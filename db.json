{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/amp-dist/sample/sample-avator.png","path":"amp-dist/sample/sample-avator.png","modified":0,"renderable":0},{"_id":"source/amp-dist/sample/sample-logo.png","path":"amp-dist/sample/sample-logo.png","modified":0,"renderable":0},{"_id":"source/amp-dist/sample/sample-placeholder.png","path":"amp-dist/sample/sample-placeholder.png","modified":0,"renderable":0},{"_id":"source/amp-dist/sample/sample-substituteTitleImage.png","path":"amp-dist/sample/sample-substituteTitleImage.png","modified":0,"renderable":0},{"_id":"themes/obsidian/source/css/ball-atom.min.css","path":"css/ball-atom.min.css","modified":0,"renderable":1},{"_id":"themes/obsidian/source/css/codemirror.styl","path":"css/codemirror.styl","modified":0,"renderable":1},{"_id":"themes/obsidian/source/css/theme.styl","path":"css/theme.styl","modified":0,"renderable":1},{"_id":"themes/obsidian/source/font/Rubik-Bold-kern-latin.woff2","path":"font/Rubik-Bold-kern-latin.woff2","modified":0,"renderable":1},{"_id":"themes/obsidian/source/font/Rubik-Regular-kern-latin.woff2","path":"font/Rubik-Regular-kern-latin.woff2","modified":0,"renderable":1},{"_id":"themes/obsidian/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/obsidian/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/obsidian/source/img/logo_icon.png","path":"img/logo_icon.png","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/busuanzi.js","path":"js/busuanzi.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/busuanzi.min.js","path":"js/busuanzi.min.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.truncate.js","path":"js/jquery.truncate.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.truncate.min.js","path":"js/jquery.truncate.min.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/obsidian.js","path":"js/obsidian.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/obsidian.min.js","path":"js/obsidian.min.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/css/obsidian.styl","path":"css/obsidian.styl","modified":0,"renderable":1},{"_id":"themes/obsidian/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/obsidian/source/img/cover.jpg","path":"img/cover.jpg","modified":0,"renderable":1},{"_id":"themes/obsidian/source/img/welcome-cover.jpg","path":"img/welcome-cover.jpg","modified":0,"renderable":1},{"_id":"themes/obsidian/source/img/profile.jpg","path":"img/profile.jpg","modified":0,"renderable":1},{"_id":"themes/obsidian/source/statics/chengdu.mp3","path":"statics/chengdu.mp3","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"8737ad9e040769728a6eeca36615158dad89de8a","modified":1577275787235},{"_id":"themes/obsidian/.DS_Store","hash":"d6518870177e497e1488ee84ac4752529ca46062","modified":1577220446780},{"_id":"themes/obsidian/.gitignore","hash":"d03db5016682965b1d1e5c060e837382b40b2463","modified":1577220446780},{"_id":"themes/obsidian/CHANGELOG.md","hash":"3554812029b05f2fa1e8c717e8f30005b3cc7c25","modified":1577220446780},{"_id":"themes/obsidian/CHANGELOG_CN.md","hash":"dfc5570319a0bac991ea823760bad5140c78bdef","modified":1577220446780},{"_id":"themes/obsidian/LICENSE","hash":"5433bef2c6c055447443802b3538cf37adabd705","modified":1577220446780},{"_id":"themes/obsidian/README.md","hash":"8286dc053570ebd272903ce45f040171dac3f104","modified":1577220446780},{"_id":"themes/obsidian/README_CN.md","hash":"755ed66487afc0ca3132bec437706d941d089830","modified":1577220446780},{"_id":"themes/obsidian/_config.yml","hash":"a6b6b598af82515bf64a4065c0018ed6ec201d85","modified":1577279864047},{"_id":"themes/obsidian/package.json","hash":"4c9f6efc7f844e54d15fe47b7ef026ba61ce47c0","modified":1577220446780},{"_id":"source/_drafts/test.md","hash":"7b6ee93429fb455769b164a99bc83ee99aff0949","modified":1577219988299},{"_id":"source/_posts/2017-02-25-ionic-dev-note.md","hash":"108b76e0146b170dc1bd5812653ba8707af94537","modified":1577219988299},{"_id":"source/_posts/2017-02-26-laravel5.4-passport-and-authen.md","hash":"0a4539dd0d0cdcbd9e36d5a81de74bcfff84fc56","modified":1577219988299},{"_id":"source/_posts/2017-03-19-ionic2-comfirm-password-validators.md","hash":"dbcb2d92e861baeec1d2faef70d02889aede6ae7","modified":1577219988299},{"_id":"source/_posts/2017-04-11-Ionic301-ios-blackscreen-fix.md","hash":"fd69616cc5da2451b9536cd153b13556c5b4acfc","modified":1577219988299},{"_id":"source/_posts/2017-04-20-Ionic-sliders-autoplay.md","hash":"65c6b6ac565467dcf77efb63d28a382509e626b2","modified":1577219988299},{"_id":"source/_posts/2017-04-24-listen-to-back-button.md","hash":"e2459818b540f88a6c536196c837688b883a8912","modified":1577219988299},{"_id":"source/_posts/2017-4-10-Ionic3-upgrade-guide.md","hash":"53c789eec4310afaa1241d8012e57498acafc3b3","modified":1577219988299},{"_id":"source/_posts/2018-07-01-openscad-stock-tank-model.md","hash":"24dc8edd07b91e01f1d7efeca63b2c6cfbd82375","modified":1577281280868},{"_id":"source/_posts/2018-08-24-vim-openfoam-power-part1.md","hash":"734165e8cf5ad23f6ffceca28be32bdd9acac81c","modified":1577281044502},{"_id":"source/_posts/2018-08-25-vim-openfoam-power-part2.md","hash":"a704d0e1406688f55f7882e4c7f551465c9d80de","modified":1577279993839},{"_id":"source/_posts/2019-01-10-lumen-multi-oauth.md","hash":"7e238dceeded158d0731d01f32f9a4ebb8c6e63b","modified":1577219988299},{"_id":"source/_posts/2019-01-10-lumen-passport-usage.md","hash":"c306cb6a4551697c9f14b7f703e7a119333cc594","modified":1577219988299},{"_id":"source/_posts/2019-08-29-forall-openfoam-cpp.md","hash":"2bf8b9baf8a97f808faeaba25b8bed9ed21f687a","modified":1577278859058},{"_id":"source/_posts/2019-09-12-openfoam-object-registry.md","hash":"a3ab0e1b354f6e959e6957f8341c883cf035930a","modified":1577278442213},{"_id":"source/about/index.md","hash":"14dc298dc0a4725403d92aa780a21afdd8ff99e7","modified":1577219988299},{"_id":"source/archives/index.md","hash":"27460295aa98db48f1f2577786f321934dba72a5","modified":1577219988299},{"_id":"source/categories/index.md","hash":"9c3c6265e0c9065357fc2a63df30fb3e58c92cee","modified":1577219988299},{"_id":"source/tags/index.md","hash":"59fab6bb6e4378053d0cc2ea70648d3d522ae891","modified":1577219988299},{"_id":"themes/obsidian/.git/FETCH_HEAD","hash":"df6e181e3c5dff37be8dfc1da2f326718a929436","modified":1577220446612},{"_id":"themes/obsidian/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1577220446780},{"_id":"themes/obsidian/.git/config","hash":"f923d8fd7d60e96fda777194e9e763e26c0a44aa","modified":1577220446756},{"_id":"themes/obsidian/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1577220446632},{"_id":"themes/obsidian/.git/index","hash":"d2dfc3c6eddd57d08d56177521b2666fb39f5d2c","modified":1577220448304},{"_id":"themes/obsidian/.git/packed-refs","hash":"dbf7b6eeaf6d2a8886a6569ab21dab3e5dd21803","modified":1577220446756},{"_id":"themes/obsidian/languages/default.yml","hash":"79c90d32b88bf865be8c27d63e4364ede6b2abab","modified":1577220446780},{"_id":"themes/obsidian/languages/fr.yml","hash":"fa0dbaf1464c62ce6e9e7ad315edb287a18a992f","modified":1577220446780},{"_id":"themes/obsidian/languages/it.yml","hash":"d7fd4985abff51f40034f107aacc515f45d632b6","modified":1577220446780},{"_id":"themes/obsidian/languages/nl.yml","hash":"0f1ec0333eb993ba8a40e2d32009f618738e4d47","modified":1577220446780},{"_id":"themes/obsidian/languages/no.yml","hash":"5235962d6d8198185db9c288e3eb88f7aa63ac39","modified":1577220446780},{"_id":"themes/obsidian/languages/ru.yml","hash":"f3e6ea6ac5073583ab306c383b0160f7e4891a83","modified":1577220446780},{"_id":"themes/obsidian/languages/zh-CN.yml","hash":"10b50135da5d34930cefd630c5c824c2029e6180","modified":1577220446780},{"_id":"themes/obsidian/languages/zh-TW.yml","hash":"891bbfc18194ef3f1c39fd2cafdf93d6d6844ccf","modified":1577220446780},{"_id":"themes/obsidian/layout/archive.ejs","hash":"17eb8f480c30e1de60e5f696942c697e20dc6d3a","modified":1577220446780},{"_id":"themes/obsidian/layout/category.ejs","hash":"e0c36bded984989c864227801dcd289207241f76","modified":1577220446780},{"_id":"themes/obsidian/layout/index.ejs","hash":"7873010b22819f17b08c67edb60fa01fba94589c","modified":1577220446780},{"_id":"themes/obsidian/layout/layout.ejs","hash":"c9a44e84e19189f42aef85ad2b074fa1285072b8","modified":1577220446780},{"_id":"themes/obsidian/layout/page.ejs","hash":"db7051aba9f46e48808236a3887d440d2369d74e","modified":1577220446780},{"_id":"themes/obsidian/layout/post.ejs","hash":"2a3eb65dafa63df605dd63c85fda84030a41b78a","modified":1577276714688},{"_id":"themes/obsidian/layout/tag.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1577220446780},{"_id":"themes/obsidian/scripts/.DS_Store","hash":"0408e94eaead1779b7f128e53a6fb0a357bd9a5a","modified":1577220446780},{"_id":"themes/obsidian/source/.DS_Store","hash":"62f16ecf8efc895b9d8c390334f803598b78ed0f","modified":1577220446784},{"_id":"source/amp-dist/sample/sample-avator.png","hash":"0c9e74f8207353ace09090a7d17def59ab9b98c8","modified":1577281286680},{"_id":"source/amp-dist/sample/sample-logo.png","hash":"9dad0e8cc4d48c6e550820e91377e2028a344176","modified":1577281286680},{"_id":"source/amp-dist/sample/sample-placeholder.png","hash":"beacd5efe796a2956255bcb854a83155a3577949","modified":1577281286680},{"_id":"source/amp-dist/sample/sample-substituteTitleImage.png","hash":"f7d5b269516ed2ef4c855466b5d78d4ca136445c","modified":1577281286680},{"_id":"themes/obsidian/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1577220446632},{"_id":"themes/obsidian/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1577220446652},{"_id":"themes/obsidian/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1577220446644},{"_id":"themes/obsidian/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1577220446632},{"_id":"themes/obsidian/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1577220446644},{"_id":"themes/obsidian/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1577220446652},{"_id":"themes/obsidian/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1577220446640},{"_id":"themes/obsidian/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1577220446656},{"_id":"themes/obsidian/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1577220446652},{"_id":"themes/obsidian/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1577220446644},{"_id":"themes/obsidian/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1577220446660},{"_id":"themes/obsidian/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1577220446660},{"_id":"themes/obsidian/.git/logs/HEAD","hash":"023c547251fd2e815a44bdbd4f7bcec0a806895f","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/categories.ejs","hash":"db45b83951cd4dca8b9f1fac289e0f38e13c3dc1","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/head.ejs","hash":"bd72025d4b30838e465edf77c8db0f37d53ef1c7","modified":1577274993783},{"_id":"themes/obsidian/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/mathjax.ejs","hash":"3aae1c6eb8795525090f83b4e2ab00a1c04db13d","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/menu.ejs","hash":"34c14e4d39fda3f4b0f6ec7e393529ebb33c1139","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/photoswipe.ejs","hash":"9cd0571569a37aef1c6c4a5bf074dc1dc7b0558b","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/screen.ejs","hash":"fb89a9621ee352592d725ab50fbd8f0316fc6e02","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/scripts.ejs","hash":"24a310d9a666e35f371e99277d4a042a13e76940","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/tags.ejs","hash":"fc037d52e956ed280d2d69f9683461ef86b5b453","modified":1577220446780},{"_id":"themes/obsidian/scripts/helpers/hexo-html-truncate.js","hash":"72733931cbe4841f3da9a680e7549718f13bd0b7","modified":1577220446780},{"_id":"themes/obsidian/scripts/helpers/hexo-symbols-count-time.js","hash":"dc213a7d2533f4624bd6c41217657c9ab4e9ce85","modified":1577220446780},{"_id":"themes/obsidian/scripts/helpers/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1577220446780},{"_id":"themes/obsidian/scripts/libs/.DS_Store","hash":"ff2e07de7b08c8aa3437e416f75b056907dc35e7","modified":1577220446780},{"_id":"themes/obsidian/source/css/.DS_Store","hash":"d8527fd40633efa58725fbbefbd14590c7e34f03","modified":1577220446784},{"_id":"themes/obsidian/source/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1577220446784},{"_id":"themes/obsidian/source/css/codemirror.styl","hash":"b2e335244baf9703d2281eb41bbbf37ddf820713","modified":1577220446784},{"_id":"themes/obsidian/source/css/theme.styl","hash":"bd1edc12656c7dc6d2fbeac9c44286b0d509c7b6","modified":1577220446784},{"_id":"themes/obsidian/source/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1577220446784},{"_id":"themes/obsidian/source/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1577220446784},{"_id":"themes/obsidian/source/img/.DS_Store","hash":"b462dc88b1b7ee65acc354139ba756a013116087","modified":1577220446784},{"_id":"themes/obsidian/source/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1577220446784},{"_id":"themes/obsidian/source/img/logo.png","hash":"956a5c90eba01360e5576178122cf29e3df1b3e4","modified":1577220446784},{"_id":"themes/obsidian/source/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1577220446784},{"_id":"themes/obsidian/source/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1577220446788},{"_id":"themes/obsidian/source/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1577220446788},{"_id":"themes/obsidian/source/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1577220446788},{"_id":"themes/obsidian/source/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1577220446788},{"_id":"themes/obsidian/source/js/obsidian.js","hash":"e6c91439919715344dd7c05dff9f0a7476909a50","modified":1577220446788},{"_id":"themes/obsidian/source/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1577220446788},{"_id":"themes/obsidian/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1577220446788},{"_id":"themes/obsidian/source/js/search.js","hash":"ccd638c9f9a1e4c4e94dfdbbde5fcc5e7a4eba0c","modified":1577220446788},{"_id":"themes/obsidian/source/css/obsidian.styl","hash":"b8c7408002d800869c924162163298b85da06ae9","modified":1577220446784},{"_id":"themes/obsidian/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1577220446788},{"_id":"themes/obsidian/.git/objects/pack/pack-331759cf6daebd1a0425f7bbd93f0700e618d56a.idx","hash":"dc5977e5a37455de8fec9f1a28c60aa556213286","modified":1577220446756},{"_id":"themes/obsidian/.git/refs/heads/master","hash":"2c2eafa0adff34a67e429aeb791bfa98e02b879a","modified":1577220446660},{"_id":"themes/obsidian/layout/_partial/post/article.ejs","hash":"5dc16bd68b9ec365b2a26b04710a432f90b21cfa","modified":1577276899541},{"_id":"themes/obsidian/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/post/gitalk.ejs","hash":"512874f93fed1bd259df00acf0efa24afc6b9927","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/post/header.ejs","hash":"4106c269e46f5c4a1ad0c8935c3ae343a160b9a0","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/post/item.ejs","hash":"6b211ed210f25c1b3fe0e8903a332dd8161ba253","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1577220446780},{"_id":"themes/obsidian/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1577220446780},{"_id":"themes/obsidian/scripts/libs/cheerio/cheerio.js","hash":"df60e3da86341b0474f15d9aa8547d71617cb5a9","modified":1577220446784},{"_id":"themes/obsidian/scripts/libs/cheerio/parse.js","hash":"dc8dc6f82fd1c8f33eda9442025235a3632bfa36","modified":1577220446784},{"_id":"themes/obsidian/scripts/libs/cheerio/static.js","hash":"36ad488d734e0d9930d0a478deacebe6d5b8c775","modified":1577220446784},{"_id":"themes/obsidian/scripts/libs/cheerio/utils.js","hash":"425759c783010cd1d72771f2b8d471047a1e1285","modified":1577220446784},{"_id":"themes/obsidian/source/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1577220446784},{"_id":"themes/obsidian/.git/logs/refs/heads/master","hash":"023c547251fd2e815a44bdbd4f7bcec0a806895f","modified":1577220446776},{"_id":"themes/obsidian/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1577220446660},{"_id":"themes/obsidian/scripts/libs/cheerio/api/attributes.js","hash":"404a942475f8bf31dd4704d17490b25bfcdffb07","modified":1577220446780},{"_id":"themes/obsidian/scripts/libs/cheerio/api/css.js","hash":"de88fe4f6977eab77bf080d9a688cc3f2b0d516c","modified":1577220446784},{"_id":"themes/obsidian/scripts/libs/cheerio/api/forms.js","hash":"e9d8465f092ce6c2d2e48575bfa1de7e1cbaf3bd","modified":1577220446784},{"_id":"themes/obsidian/scripts/libs/cheerio/api/manipulation.js","hash":"93b36f7e67557d2a2f5ba65eee21a65f93c37b1f","modified":1577220446784},{"_id":"themes/obsidian/scripts/libs/cheerio/api/traversing.js","hash":"5a83ea3c18f2e73eb1b4f4e4425de932e20d38bb","modified":1577220446784},{"_id":"themes/obsidian/.git/logs/refs/remotes/origin/HEAD","hash":"023c547251fd2e815a44bdbd4f7bcec0a806895f","modified":1577220446772},{"_id":"themes/obsidian/source/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1577220446788},{"_id":"themes/obsidian/source/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1577220446784},{"_id":"themes/obsidian/source/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1577220446792},{"_id":"themes/obsidian/.git/objects/pack/pack-331759cf6daebd1a0425f7bbd93f0700e618d56a.pack","hash":"2ddc2732c8fe03f177cb47e0dcb062ffaf6b0b04","modified":1577220446756},{"_id":"public/Ionic/ionic-2-开发笔记/amp/index.html","hash":"206603efa42727fb2725c5646e277bb72e387a40","modified":1577281291419},{"_id":"public/Laravel/laravel-5-4-开发笔记/amp/index.html","hash":"dc23a9803d0bc79e8851fb6226fccb4772341cbb","modified":1577281291421},{"_id":"public/Ionic/ionic-2-确认密码/amp/index.html","hash":"70b7ab80ee6bc4786223d2fdd8d420cd4606cf20","modified":1577281291749},{"_id":"public/Ionic/修复-ionic-3-0-1-在ios点击tabs多次出现黑屏问题方法/amp/index.html","hash":"af99d360e95e67a12ac0d5f87ea5b3950458fa1b","modified":1577281291750},{"_id":"public/Ionic/ionic-3-使用sliders轮播时拖动后autoplay失效解决方法/amp/index.html","hash":"965b9fcbf86526a14662063dd3f5a56e3b83ba0a","modified":1577281291760},{"_id":"public/Ionic/ionic-2-实现首页双击退出app/amp/index.html","hash":"9936a461c1a457573779282592c536b7849ced36","modified":1577281291760},{"_id":"public/Ionic/ionic-2-升级-3-教程/amp/index.html","hash":"c3594ee238e7a3a303b5857b749547b61825b390","modified":1577281291760},{"_id":"public/openscad/stock-tank-mesh-construction-using-openscad/amp/index.html","hash":"ed8af81f9c2d08dc82938af246bc02c1f5367149","modified":1577281291760},{"_id":"public/productivity/customize-vim-to-work-efficiently-with-openfoam-part-1/amp/index.html","hash":"944360f4229408b864a7337a847f85f35e1d2f10","modified":1577281291760},{"_id":"public/productivity/customize-vim-to-work-efficiently-with-openfoam-part-2/amp/index.html","hash":"37588f767ddb283ff6c79fc77d7e0951ce859094","modified":1577281291760},{"_id":"public/Laravel/lumen-passport实现多个用户体系下的oauth验证/amp/index.html","hash":"bd5eba3edc3dc81efa71fceb935d9b8e58e085ac","modified":1577281291760},{"_id":"public/Laravel/lumen-使用-laravel-passport/amp/index.html","hash":"a80ca6b67b0e480fa908c9aa748ecd760182b628","modified":1577281291761},{"_id":"public/coding/the-forall-macro-in-openfoam/amp/index.html","hash":"797a0578ba217add6ed846d40d35bfe151b31a5a","modified":1577281291761},{"_id":"public/coding/object-registration-in-openfoam/amp/index.html","hash":"885de64df9fbeb48b10778f54d29d36eef965c55","modified":1577281291761},{"_id":"public/404.html","hash":"0ee4fa96b72013d5d5ac3a25e75dd71f413990f0","modified":1577281291777},{"_id":"public/about/index.html","hash":"c1de2c8a65361653c71fdf1616781ccbb7390c68","modified":1577281291777},{"_id":"public/categories/index.html","hash":"724a527e9ec93669525f6adce884836e060b19cb","modified":1577281291777},{"_id":"public/tags/index.html","hash":"24a34e0f167eee1b7fc2ed087fa607eac6a6622a","modified":1577281291777},{"_id":"public/categories/openscad/index.html","hash":"4e0d1a7cb6ccd74ddb11a523679bd0e4a898a707","modified":1577281291777},{"_id":"public/tags/Laravel-5-4/index.html","hash":"146494b8c6f9f1972e3a826ed0c826fe1a216ac4","modified":1577281291777},{"_id":"public/tags/OpenSCAD/index.html","hash":"c9959ac421e864c589108910fd38c57c15366fcc","modified":1577281291777},{"_id":"public/tags/Meshing/index.html","hash":"d0e225e9273f50bce7eecb45e36ee75e33d48d55","modified":1577281291777},{"_id":"public/archives/index.html","hash":"3ed262d97db6143c9ae7ac4d30ff17b50abb87a2","modified":1577281291777},{"_id":"public/coding/object-registration-in-openfoam/index.html","hash":"a2b96c2bda797553cb3d80d343d202f5eaa7594b","modified":1577281291777},{"_id":"public/coding/the-forall-macro-in-openfoam/index.html","hash":"7e85445e861a055b8fcba65bd27016ba1ab7250c","modified":1577281291778},{"_id":"public/Laravel/lumen-使用-laravel-passport/index.html","hash":"ade4fb790cc9f38a183f2e3c691d087fe4cf1406","modified":1577281291778},{"_id":"public/Laravel/lumen-passport实现多个用户体系下的oauth验证/index.html","hash":"415af5ff603e4b16dd993756731603dbaf2dad48","modified":1577281291778},{"_id":"public/productivity/customize-vim-to-work-efficiently-with-openfoam-part-2/index.html","hash":"90c4552e3d8a9a9806304b1a43bda9a291a1020e","modified":1577281291778},{"_id":"public/productivity/customize-vim-to-work-efficiently-with-openfoam-part-1/index.html","hash":"3bebed937f730dd2709fc7e42d0b7729d5dcf93c","modified":1577281291778},{"_id":"public/openscad/stock-tank-mesh-construction-using-openscad/index.html","hash":"7eca544c02d8564eef046d4f00411af460378f2a","modified":1577281291778},{"_id":"public/Ionic/ionic-2-实现首页双击退出app/index.html","hash":"ba6318dfc8bfad84c2ca4973d55d9bfb448ac255","modified":1577281291778},{"_id":"public/Ionic/ionic-3-使用sliders轮播时拖动后autoplay失效解决方法/index.html","hash":"a8ee19e5cdc08aea5fa14b380381520d60719021","modified":1577281291778},{"_id":"public/Ionic/修复-ionic-3-0-1-在ios点击tabs多次出现黑屏问题方法/index.html","hash":"9a6de2cddcec19e8ac4176263a16ca27015805b6","modified":1577281291778},{"_id":"public/Ionic/ionic-2-升级-3-教程/index.html","hash":"72e9e7ddf21f635be196f94fe88eb84c947d9603","modified":1577281291779},{"_id":"public/Ionic/ionic-2-确认密码/index.html","hash":"c7e8931b637ca5caba8e1e7769a0470ec411b418","modified":1577281291779},{"_id":"public/Laravel/laravel-5-4-开发笔记/index.html","hash":"661be9a34344fee3489734146c0d4125b1bcfee6","modified":1577281291779},{"_id":"public/Ionic/ionic-2-开发笔记/index.html","hash":"70133492c54a67725a6522e5d9cb08f7c8cd226b","modified":1577281291779},{"_id":"public/archives/page/2/index.html","hash":"3ed262d97db6143c9ae7ac4d30ff17b50abb87a2","modified":1577281291779},{"_id":"public/archives/page/3/index.html","hash":"3ed262d97db6143c9ae7ac4d30ff17b50abb87a2","modified":1577281291779},{"_id":"public/archives/2017/index.html","hash":"33434fc1d38ff92587575dba8fdc69a0f5705d61","modified":1577281291779},{"_id":"public/archives/2017/page/2/index.html","hash":"33434fc1d38ff92587575dba8fdc69a0f5705d61","modified":1577281291779},{"_id":"public/archives/2017/02/index.html","hash":"bc00c7fbd7525ce69b2e4ad8047ba08350c5bf9a","modified":1577281291779},{"_id":"public/archives/2017/03/index.html","hash":"17170f54963225d82f6611587d5325afb3f433b4","modified":1577281291780},{"_id":"public/archives/2017/04/index.html","hash":"3f515e84c5fbab7325d3d47bf6e046c11c4eb93c","modified":1577281291780},{"_id":"public/archives/2018/index.html","hash":"480d5bf11dca876d27a98aaec516a6e3cee628ca","modified":1577281291780},{"_id":"public/archives/2018/07/index.html","hash":"602e358ed34534e9431cccba0ffe857f63a21911","modified":1577281291780},{"_id":"public/archives/2018/08/index.html","hash":"25f367262a408933ee52ea71f4fb8b041f6fa1bb","modified":1577281291780},{"_id":"public/archives/2019/index.html","hash":"c5fb006d60b88bf7992acb24877410bc2054b832","modified":1577281291780},{"_id":"public/archives/2019/01/index.html","hash":"01422a58e1120741847610fa87b2464698d2c5b6","modified":1577281291780},{"_id":"public/archives/2019/08/index.html","hash":"99169a091b30c1017566c404098186e8f5b13c9f","modified":1577281291780},{"_id":"public/archives/2019/09/index.html","hash":"fb289a1c9590c3eeb11830a28d5f78e8003d941f","modified":1577281291780},{"_id":"public/categories/Ionic/index.html","hash":"4a6376dbc45105aee225ec7f6f46486cf427fcd0","modified":1577281291780},{"_id":"public/categories/Ionic/page/2/index.html","hash":"2dc1e36b5e2f2716299610b8acfc5e4e0248fd62","modified":1577281291780},{"_id":"public/categories/Laravel/index.html","hash":"61fdfbd4b8f2748f3eb1ce9129d3e0e5c6271ec7","modified":1577281291781},{"_id":"public/categories/productivity/index.html","hash":"6629da3eb720efaaf237062d4064c754b536bb09","modified":1577281291781},{"_id":"public/categories/coding/index.html","hash":"d5987d5bfcc2f05b94b64fde3eb22cdfc8065b4e","modified":1577281291781},{"_id":"public/index.html","hash":"6e99ef23984a4b91aba61353c112858b999e478b","modified":1577281291781},{"_id":"public/page/2/index.html","hash":"02f6facffb6fda4e1a3ec283b68eb81aba4198f0","modified":1577281291781},{"_id":"public/page/3/index.html","hash":"d22a06fea083ad58d2e9782b998d4cfd215b3d00","modified":1577281291781},{"_id":"public/tags/Ionic-2/index.html","hash":"21fb0be67048bee4fa2cf769cf29a9aa06a76751","modified":1577281291781},{"_id":"public/tags/Angular-2/index.html","hash":"9373a141e88912a5391fcad249fd5b7c7cbf9c9a","modified":1577281291781},{"_id":"public/tags/Hybird-App/index.html","hash":"0d6793fd15dd0c0d7e70568f99e87826a6a1b797","modified":1577281291781},{"_id":"public/tags/Hybird-App/page/2/index.html","hash":"26516c599a474243c6a6b4af1a6c51f0a4d2658e","modified":1577281291782},{"_id":"public/tags/Laravel-Passport/index.html","hash":"a66a7ffb99fff12b98a2540585354b6cb0aa08e4","modified":1577281291782},{"_id":"public/tags/Ionic-3/index.html","hash":"a9777659f45b7b026d4ad6c90867cea58abc5afe","modified":1577281291782},{"_id":"public/tags/Angular-4/index.html","hash":"75b9a94367d8f4f0303e33ee32f72a4739310ab0","modified":1577281291782},{"_id":"public/tags/OpenFOAM/index.html","hash":"5efc857e21259185ce30e9381ee080b2349f8f2e","modified":1577281291782},{"_id":"public/tags/Vim/index.html","hash":"3007589eb4494cd11547ae81859a74c2c23869cb","modified":1577281291782},{"_id":"public/tags/Lumen/index.html","hash":"ffdf8f155f901294c7ba0168cebe98f48ed2d855","modified":1577281291783},{"_id":"public/tags/Programming/index.html","hash":"e47e8467060fee2c3435c12a41ddb57bc7d94dc1","modified":1577281291783},{"_id":"public/tags/Cpp/index.html","hash":"3c3a5c750af272fdc2780b7c3908da2e32102e06","modified":1577281291783},{"_id":"public/amp-dist/sample/sample-avator.png","hash":"0c9e74f8207353ace09090a7d17def59ab9b98c8","modified":1577281291790},{"_id":"public/amp-dist/sample/sample-logo.png","hash":"9dad0e8cc4d48c6e550820e91377e2028a344176","modified":1577281291790},{"_id":"public/amp-dist/sample/sample-placeholder.png","hash":"beacd5efe796a2956255bcb854a83155a3577949","modified":1577281291791},{"_id":"public/amp-dist/sample/sample-substituteTitleImage.png","hash":"f7d5b269516ed2ef4c855466b5d78d4ca136445c","modified":1577281291791},{"_id":"public/font/Rubik-Bold-kern-latin.woff2","hash":"5ffc50abee67c11cfe7c174e6407119dda79bffe","modified":1577281291791},{"_id":"public/font/Rubik-Regular-kern-latin.woff2","hash":"f6220f2824efbdb57afe2165886aa7e8ca9345b3","modified":1577281291791},{"_id":"public/img/favicon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1577281291791},{"_id":"public/img/logo.png","hash":"956a5c90eba01360e5576178122cf29e3df1b3e4","modified":1577281291791},{"_id":"public/img/logo_icon.png","hash":"763e5dd543412266eb38bb66d1e2ed79391c75b6","modified":1577281291791},{"_id":"public/css/ball-atom.min.css","hash":"c226472e3b8f09c1a30c55a4e1575fc2b22bd4a5","modified":1577281292395},{"_id":"public/css/codemirror.css","hash":"d45967fa2b7e701c3d0dd62cdce0385f5c8f6961","modified":1577281292395},{"_id":"public/css/theme.css","hash":"9b61386db1bb6ffe784738a2dd7ee11348fea17d","modified":1577281292395},{"_id":"public/js/busuanzi.js","hash":"8148df0753f8fdcddb306dc36003a6a636b44691","modified":1577281292395},{"_id":"public/js/busuanzi.min.js","hash":"c31e1244ea9c6da70f306b76ea0c001486e4ea78","modified":1577281292395},{"_id":"public/js/jquery.truncate.js","hash":"9bfb5e6e567458aff86e0cc4bc8c53917387ce13","modified":1577281292395},{"_id":"public/js/jquery.truncate.min.js","hash":"a71f558be59d47c2e896bea46e605eb93aa26786","modified":1577281292396},{"_id":"public/js/obsidian.min.js","hash":"609c0f9fe552687d3d4bca1f58da8bc603911410","modified":1577281292396},{"_id":"public/js/search.js","hash":"ccd638c9f9a1e4c4e94dfdbbde5fcc5e7a4eba0c","modified":1577281292396},{"_id":"public/js/obsidian.js","hash":"e6c91439919715344dd7c05dff9f0a7476909a50","modified":1577281292396},{"_id":"public/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1577281292396},{"_id":"public/css/obsidian.css","hash":"47d37763c09190b8069f3517067de0843bb1dbc4","modified":1577281292396},{"_id":"public/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1577281292396},{"_id":"public/img/cover.jpg","hash":"b977716eb4569f06ae41747c92121d44dd0ef2ec","modified":1577281292396},{"_id":"public/img/welcome-cover.jpg","hash":"4f64859e7d800f527944aab1615ecc4e24467f50","modified":1577281292425},{"_id":"public/img/profile.jpg","hash":"f039e298bfe68f8edeaa2f3bf90a118852588e4e","modified":1577281292429},{"_id":"public/statics/chengdu.mp3","hash":"ffff18953f07760d1e30a74e22eee49f1f7f793f","modified":1577281292446}],"Category":[{"name":"Ionic","_id":"ck4lcjy5600053cqeh3h3xy7v"},{"name":"Laravel","_id":"ck4lcjy5i000c3cqe66f967mi"},{"name":"openscad","_id":"ck4lcjy5z000q3cqej76h683e"},{"name":"productivity","_id":"ck4lcjy64000z3cqe4g0tyh88"},{"name":"coding","_id":"ck4lcjy6g001b3cqe0vtj515c"}],"Data":[],"Page":[{"layout":"page","title":"404 Page Not Found","comments":0,"_content":"","source":"404.md","raw":"---\nlayout: page\ntitle: 404 Page Not Found\ncomments: false\n---\n","date":"2019-12-25T12:09:47.286Z","updated":"2019-12-25T12:09:47.235Z","path":"404.html","_id":"ck4lcjy3400003cqednmxw7y4","content":"","site":{"data":{}},"excerpt":"","more":"","eyeCatchImage":"","titleImageForAmp":""},{"title":"Whoami","date":"2019-09-18T12:53:57.000Z","_content":"<div class=\"my-links\">\n  <a class=\"gradient-text\" href=\"https://github.com/TriDiamond\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-github\"></span></a>\n  <a class=\"gradient-text\" href=\"https://twitter.com/TriDiamond6\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-twitter\"></span></a>\n  <a class=\"gradient-text\" href=\"https://stackoverflow.com/users/7602324/tridiamond?tab=profile\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-stack-overflow\"></span></a>\n</div>\n\n<style>\n  .my-links {display: flex; align-content: flex-start; margin-top: 30px;}\n  .my-links a {display: flex; color: #000; padding: 2px 10px;border-bottom:none !important;}\n  .my-links a span {font-size: 28px;}\n</style>\n\n#### 关于我 Who am I\n\n<img src=\"https://s2.ax1x.com/2019/09/19/nLtSiD.png\" style=\"height: 50px; width: 50px; border-radius: 50%; margin-bottom: 15px\" />\n\n欢迎来到我的博客, 我是<b style=\"color: #42d2ca\"> **三·钻 (TriDiamond)** </b>, \n8年里从专注于 PHP 开发到入坑前端 Vue，Angular和混合APP开发，\n慢慢升级打怪，刷副本成为一个小小的全栈开发工程师/架构师。\n\n追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,\n立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。\n\n热爱户外旅游和接受挑战，与女朋友玩耍逛街，生活和工作平衡，有节奏感的人生。\n\n——————\n\nWelcome to my blog, I am <b style=\"color: #42d2ca\">**TriDiamond**</b>\nFull-stack software engineer and framework architect , \nspecialized in PHP, Javascript, VueJs, AngularJs, Webpack, Laravel, Lumen.\n\n#### 开源项目 Open Source Projects\n\n- [vuejs-countdown-timer](https://github.com/TriDiamond/vuejs-countdown-timer) 一 Vue 2 活动倒计时组件\n- [vuejs-scroll-fixed-header](https://github.com/TriDiamond/vuejs-scroll-fixed-header) 一 Vue 2 滑动固定头部组件\n- [vue-photoswipe](https://github.com/TriDiamond/vue-photoswipe) 一 A Vue Integrated PhotoSwipe Image Preview Plugin\n- [vuejs-sticky-directive](https://github.com/TriDiamond/vuejs-sticky-directive) 一 支持头部和底部sticky的功能, 使用的是原生js和vue的directive实现\n- [captcha-lumen5](https://github.com/TriDiamond/captcha-lumen5) 一 Lumen5的验证码包\n\n#### 开发装备 Development Gears\n\n+ 硬件：MackBook Pro 15 寸\n+ 系统：Mac 版本 10.10 以上\n+ 编辑器：[PhpStorm](https://www.jianshu.com/p/c8a7fcd57896)\n+ PHP 代码风格矫正器：[PHP-CS-Fixer](https://www.jianshu.com/p/d147dcf43a04)\n+ 命令行工具：[iTerm2 (Mac)](https://www.iterm2.com/)\n+ 浏览器：[Chrome](https://www.google.com/chrome/browser/desktop/index.html)\n+ 虚拟机：[VirtualBox](https://www.virtualbox.org/)\n+ MySQL 数据库查询工具：[Sequel Pro (Mac)](http://www.sequelpro.com/)\n+ Redis 管理工具：[Medis (Mac)](https://xclient.info/s/medis.html)\n+ MongoDB 管理工具：[Robo 3T](https://robomongo.org/)\n+ 设计工具：[Sketch 5 (Mac)](https://www.sketch.com/)","source":"about/index.md","raw":"---\ntitle: Whoami\ndate: 2019-09-18 13:53:57\n---\n<div class=\"my-links\">\n  <a class=\"gradient-text\" href=\"https://github.com/TriDiamond\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-github\"></span></a>\n  <a class=\"gradient-text\" href=\"https://twitter.com/TriDiamond6\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-twitter\"></span></a>\n  <a class=\"gradient-text\" href=\"https://stackoverflow.com/users/7602324/tridiamond?tab=profile\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-stack-overflow\"></span></a>\n</div>\n\n<style>\n  .my-links {display: flex; align-content: flex-start; margin-top: 30px;}\n  .my-links a {display: flex; color: #000; padding: 2px 10px;border-bottom:none !important;}\n  .my-links a span {font-size: 28px;}\n</style>\n\n#### 关于我 Who am I\n\n<img src=\"https://s2.ax1x.com/2019/09/19/nLtSiD.png\" style=\"height: 50px; width: 50px; border-radius: 50%; margin-bottom: 15px\" />\n\n欢迎来到我的博客, 我是<b style=\"color: #42d2ca\"> **三·钻 (TriDiamond)** </b>, \n8年里从专注于 PHP 开发到入坑前端 Vue，Angular和混合APP开发，\n慢慢升级打怪，刷副本成为一个小小的全栈开发工程师/架构师。\n\n追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,\n立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。\n\n热爱户外旅游和接受挑战，与女朋友玩耍逛街，生活和工作平衡，有节奏感的人生。\n\n——————\n\nWelcome to my blog, I am <b style=\"color: #42d2ca\">**TriDiamond**</b>\nFull-stack software engineer and framework architect , \nspecialized in PHP, Javascript, VueJs, AngularJs, Webpack, Laravel, Lumen.\n\n#### 开源项目 Open Source Projects\n\n- [vuejs-countdown-timer](https://github.com/TriDiamond/vuejs-countdown-timer) 一 Vue 2 活动倒计时组件\n- [vuejs-scroll-fixed-header](https://github.com/TriDiamond/vuejs-scroll-fixed-header) 一 Vue 2 滑动固定头部组件\n- [vue-photoswipe](https://github.com/TriDiamond/vue-photoswipe) 一 A Vue Integrated PhotoSwipe Image Preview Plugin\n- [vuejs-sticky-directive](https://github.com/TriDiamond/vuejs-sticky-directive) 一 支持头部和底部sticky的功能, 使用的是原生js和vue的directive实现\n- [captcha-lumen5](https://github.com/TriDiamond/captcha-lumen5) 一 Lumen5的验证码包\n\n#### 开发装备 Development Gears\n\n+ 硬件：MackBook Pro 15 寸\n+ 系统：Mac 版本 10.10 以上\n+ 编辑器：[PhpStorm](https://www.jianshu.com/p/c8a7fcd57896)\n+ PHP 代码风格矫正器：[PHP-CS-Fixer](https://www.jianshu.com/p/d147dcf43a04)\n+ 命令行工具：[iTerm2 (Mac)](https://www.iterm2.com/)\n+ 浏览器：[Chrome](https://www.google.com/chrome/browser/desktop/index.html)\n+ 虚拟机：[VirtualBox](https://www.virtualbox.org/)\n+ MySQL 数据库查询工具：[Sequel Pro (Mac)](http://www.sequelpro.com/)\n+ Redis 管理工具：[Medis (Mac)](https://xclient.info/s/medis.html)\n+ MongoDB 管理工具：[Robo 3T](https://robomongo.org/)\n+ 设计工具：[Sketch 5 (Mac)](https://www.sketch.com/)","updated":"2019-12-24T20:39:48.299Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck4lcjy5000023cqeeotgupdc","content":"<div class=\"my-links\">\n  <a class=\"gradient-text\" href=\"https://github.com/TriDiamond\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-github\"></span></a>\n  <a class=\"gradient-text\" href=\"https://twitter.com/TriDiamond6\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-twitter\"></span></a>\n  <a class=\"gradient-text\" href=\"https://stackoverflow.com/users/7602324/tridiamond?tab=profile\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-stack-overflow\"></span></a>\n</div>\n\n<style>\n  .my-links {display: flex; align-content: flex-start; margin-top: 30px;}\n  .my-links a {display: flex; color: #000; padding: 2px 10px;border-bottom:none !important;}\n  .my-links a span {font-size: 28px;}\n</style>\n\n<h4 id=\"关于我-Who-am-I\"><a href=\"#关于我-Who-am-I\" class=\"headerlink\" title=\"关于我 Who am I\"></a>关于我 Who am I</h4><img src=\"https://s2.ax1x.com/2019/09/19/nLtSiD.png\" style=\"height: 50px; width: 50px; border-radius: 50%; margin-bottom: 15px\">\n\n<p>欢迎来到我的博客, 我是<b style=\"color: #42d2ca\"> <strong>三·钻 (TriDiamond)</strong> </b>,<br>8年里从专注于 PHP 开发到入坑前端 Vue，Angular和混合APP开发，<br>慢慢升级打怪，刷副本成为一个小小的全栈开发工程师/架构师。</p>\n<p>追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,<br>立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。</p>\n<p>热爱户外旅游和接受挑战，与女朋友玩耍逛街，生活和工作平衡，有节奏感的人生。</p>\n<p>——————</p>\n<p>Welcome to my blog, I am <b style=\"color: #42d2ca\"><strong>TriDiamond</strong></b><br>Full-stack software engineer and framework architect ,<br>specialized in PHP, Javascript, VueJs, AngularJs, Webpack, Laravel, Lumen.</p>\n<h4 id=\"开源项目-Open-Source-Projects\"><a href=\"#开源项目-Open-Source-Projects\" class=\"headerlink\" title=\"开源项目 Open Source Projects\"></a>开源项目 Open Source Projects</h4><ul>\n<li><a href=\"https://github.com/TriDiamond/vuejs-countdown-timer\" target=\"_blank\" rel=\"noopener\">vuejs-countdown-timer</a> 一 Vue 2 活动倒计时组件</li>\n<li><a href=\"https://github.com/TriDiamond/vuejs-scroll-fixed-header\" target=\"_blank\" rel=\"noopener\">vuejs-scroll-fixed-header</a> 一 Vue 2 滑动固定头部组件</li>\n<li><a href=\"https://github.com/TriDiamond/vue-photoswipe\" target=\"_blank\" rel=\"noopener\">vue-photoswipe</a> 一 A Vue Integrated PhotoSwipe Image Preview Plugin</li>\n<li><a href=\"https://github.com/TriDiamond/vuejs-sticky-directive\" target=\"_blank\" rel=\"noopener\">vuejs-sticky-directive</a> 一 支持头部和底部sticky的功能, 使用的是原生js和vue的directive实现</li>\n<li><a href=\"https://github.com/TriDiamond/captcha-lumen5\" target=\"_blank\" rel=\"noopener\">captcha-lumen5</a> 一 Lumen5的验证码包</li>\n</ul>\n<h4 id=\"开发装备-Development-Gears\"><a href=\"#开发装备-Development-Gears\" class=\"headerlink\" title=\"开发装备 Development Gears\"></a>开发装备 Development Gears</h4><ul>\n<li>硬件：MackBook Pro 15 寸</li>\n<li>系统：Mac 版本 10.10 以上</li>\n<li>编辑器：<a href=\"https://www.jianshu.com/p/c8a7fcd57896\" target=\"_blank\" rel=\"noopener\">PhpStorm</a></li>\n<li>PHP 代码风格矫正器：<a href=\"https://www.jianshu.com/p/d147dcf43a04\" target=\"_blank\" rel=\"noopener\">PHP-CS-Fixer</a></li>\n<li>命令行工具：<a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">iTerm2 (Mac)</a></li>\n<li>浏览器：<a href=\"https://www.google.com/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"noopener\">Chrome</a></li>\n<li>虚拟机：<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener\">VirtualBox</a></li>\n<li>MySQL 数据库查询工具：<a href=\"http://www.sequelpro.com/\" target=\"_blank\" rel=\"noopener\">Sequel Pro (Mac)</a></li>\n<li>Redis 管理工具：<a href=\"https://xclient.info/s/medis.html\" target=\"_blank\" rel=\"noopener\">Medis (Mac)</a></li>\n<li>MongoDB 管理工具：<a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"noopener\">Robo 3T</a></li>\n<li>设计工具：<a href=\"https://www.sketch.com/\" target=\"_blank\" rel=\"noopener\">Sketch 5 (Mac)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"my-links\">\n  <a class=\"gradient-text\" href=\"https://github.com/TriDiamond\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-github\"></span></a>\n  <a class=\"gradient-text\" href=\"https://twitter.com/TriDiamond6\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-twitter\"></span></a>\n  <a class=\"gradient-text\" href=\"https://stackoverflow.com/users/7602324/tridiamond?tab=profile\" target=\"_blank\" rel=\"noopener\"><span class=\" iconfont icon-stack-overflow\"></span></a>\n</div>\n\n<style>\n  .my-links {display: flex; align-content: flex-start; margin-top: 30px;}\n  .my-links a {display: flex; color: #000; padding: 2px 10px;border-bottom:none !important;}\n  .my-links a span {font-size: 28px;}\n</style>\n\n<h4 id=\"关于我-Who-am-I\"><a href=\"#关于我-Who-am-I\" class=\"headerlink\" title=\"关于我 Who am I\"></a>关于我 Who am I</h4><img src=\"https://s2.ax1x.com/2019/09/19/nLtSiD.png\" style=\"height: 50px; width: 50px; border-radius: 50%; margin-bottom: 15px\">\n\n<p>欢迎来到我的博客, 我是<b style=\"color: #42d2ca\"> <strong>三·钻 (TriDiamond)</strong> </b>,<br>8年里从专注于 PHP 开发到入坑前端 Vue，Angular和混合APP开发，<br>慢慢升级打怪，刷副本成为一个小小的全栈开发工程师/架构师。</p>\n<p>追求极致, 追求完美, 喜欢一个高效, 优雅, 高凝聚力的团队,<br>立志于打造最优秀的产品, 成为一名既优雅而有深度的技术人才。</p>\n<p>热爱户外旅游和接受挑战，与女朋友玩耍逛街，生活和工作平衡，有节奏感的人生。</p>\n<p>——————</p>\n<p>Welcome to my blog, I am <b style=\"color: #42d2ca\"><strong>TriDiamond</strong></b><br>Full-stack software engineer and framework architect ,<br>specialized in PHP, Javascript, VueJs, AngularJs, Webpack, Laravel, Lumen.</p>\n<h4 id=\"开源项目-Open-Source-Projects\"><a href=\"#开源项目-Open-Source-Projects\" class=\"headerlink\" title=\"开源项目 Open Source Projects\"></a>开源项目 Open Source Projects</h4><ul>\n<li><a href=\"https://github.com/TriDiamond/vuejs-countdown-timer\" target=\"_blank\" rel=\"noopener\">vuejs-countdown-timer</a> 一 Vue 2 活动倒计时组件</li>\n<li><a href=\"https://github.com/TriDiamond/vuejs-scroll-fixed-header\" target=\"_blank\" rel=\"noopener\">vuejs-scroll-fixed-header</a> 一 Vue 2 滑动固定头部组件</li>\n<li><a href=\"https://github.com/TriDiamond/vue-photoswipe\" target=\"_blank\" rel=\"noopener\">vue-photoswipe</a> 一 A Vue Integrated PhotoSwipe Image Preview Plugin</li>\n<li><a href=\"https://github.com/TriDiamond/vuejs-sticky-directive\" target=\"_blank\" rel=\"noopener\">vuejs-sticky-directive</a> 一 支持头部和底部sticky的功能, 使用的是原生js和vue的directive实现</li>\n<li><a href=\"https://github.com/TriDiamond/captcha-lumen5\" target=\"_blank\" rel=\"noopener\">captcha-lumen5</a> 一 Lumen5的验证码包</li>\n</ul>\n<h4 id=\"开发装备-Development-Gears\"><a href=\"#开发装备-Development-Gears\" class=\"headerlink\" title=\"开发装备 Development Gears\"></a>开发装备 Development Gears</h4><ul>\n<li>硬件：MackBook Pro 15 寸</li>\n<li>系统：Mac 版本 10.10 以上</li>\n<li>编辑器：<a href=\"https://www.jianshu.com/p/c8a7fcd57896\" target=\"_blank\" rel=\"noopener\">PhpStorm</a></li>\n<li>PHP 代码风格矫正器：<a href=\"https://www.jianshu.com/p/d147dcf43a04\" target=\"_blank\" rel=\"noopener\">PHP-CS-Fixer</a></li>\n<li>命令行工具：<a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">iTerm2 (Mac)</a></li>\n<li>浏览器：<a href=\"https://www.google.com/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"noopener\">Chrome</a></li>\n<li>虚拟机：<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener\">VirtualBox</a></li>\n<li>MySQL 数据库查询工具：<a href=\"http://www.sequelpro.com/\" target=\"_blank\" rel=\"noopener\">Sequel Pro (Mac)</a></li>\n<li>Redis 管理工具：<a href=\"https://xclient.info/s/medis.html\" target=\"_blank\" rel=\"noopener\">Medis (Mac)</a></li>\n<li>MongoDB 管理工具：<a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"noopener\">Robo 3T</a></li>\n<li>设计工具：<a href=\"https://www.sketch.com/\" target=\"_blank\" rel=\"noopener\">Sketch 5 (Mac)</a></li>\n</ul>\n","eyeCatchImage":"","titleImageForAmp":""},{"title":"archives","date":"2019-09-24T15:28:41.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-09-24 16:28:41\n---\n","updated":"2019-12-24T20:39:48.299Z","path":"archives/index.html","comments":1,"layout":"page","_id":"ck4lcjy5400043cqeckqth5ze","content":"","site":{"data":{}},"excerpt":"","more":"","eyeCatchImage":"","titleImageForAmp":""},{"title":"categories","date":"2019-09-18T08:54:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-18 09:54:45\ntype: \"categories\"\n---","updated":"2019-12-24T20:39:48.299Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck4lcjy5a00083cqevu73392a","content":"","site":{"data":{}},"excerpt":"","more":"","eyeCatchImage":"","titleImageForAmp":""},{"title":"tags","date":"2019-09-18T08:54:51.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-09-18 09:54:51\ntype: \"tags\"\n---\n","updated":"2019-12-24T20:39:48.299Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck4lcjy5d000a3cqed1j555se","content":"","site":{"data":{}},"excerpt":"","more":"","eyeCatchImage":"","titleImageForAmp":""}],"Post":[{"title":"IONIC 2 开发笔记","abstract":"记录了所有IONIC 2开发时踩过的坑","header_image":"/assets/images/ionic2-banner.png","date":"2017-02-24T23:00:00.000Z","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","_content":"\n因为IONIC2才刚刚开始进入正式版, 中文文档基本都是不全的, 我现在开发都是在看英文文档\n在开发的过程中遇到了很多文档没有描述的问题, 而且开发的过程中遇到一些框架本身没有完善的功能和存在的BUG\n\n我会在这个日记里面记录一些文档没有写的, 和我开发过程中遇到的一些坑和经验, 希望可以帮助那些刚刚接触IONIC2的程序猿们!\n\n## APP配置\n\n### 域名配置\n因为跨域问题，在开发时如果要用到本地环境进行开发(ionic serve)，必须配置proxy\n- Proxy位于项目根目录下的 **ionic.config.json**\n+ 只需要把**proxyUrl**改为你本地环境的API地址\n\n```javascript\n{\n  \"name\": \"rlph\",\n  \"app_id\": \"\",\n  \"v2\": true,\n  \"typescript\": true,\n  \"proxies\": [\n    {\n      \"path\": \"/api\",\n      \"proxyUrl\": \"http://api.dev\"\n    }\n  ]\n}\n```\n\n+ 然后把API地址的常量制定为**/api/**这个proxy\n- 在根目录下**/src/config.ts**里面把**\"API_SERVER\"**的值改为**\"/api/\"**\n\n```\n  export let data = {\n      \"API_SERVER\" : \"/api/\"\n  }\n```\n\n\n### 上线APP配置\n+ 首先你需要配置真是服务器API地址\n配置API地址是在根目录下**/src/config.ts**里面把**\"API_SERVER\"**的值改为线上API地址\n\n```\n  export let data = {\n      \"API_SERVER\" : \"http://api.domain.com/\"\n  }\n```\n\n## 开发常见问题\n\n### APP run 失败\n当运行**ionic run android**的时候可能会遇到该报错：\n\n```\nError: Failed to install apk to device: [  1%] /data/local/tmp/android-debug.apk\n[  2%] /data/local/tmp/android-debug.apk\n...\n[100%] /data/local/tmp/android-debug.apk\n        pkg: /data/local/tmp/android-debug.apk\nFailure [INSTALL_FAILED_UPDATE_INCOMPATIBLE]\n```\n\n- 此问题是因为已有签名的APP存在手机上， 需要想删除该APP才能安装测试（debug）版的apk\n- 在cmd运行以下代码即可解决问题：\n\n```\nadb uninstall my.package.id\n```\n\n\n### Ionic 2 自带的native文件上传(FILE TRANSFER)插件无法获取成功返回内容\n这个是Ionic 2 核心代码里面的一个BUG, 在一下版本下是有问题的\n**Ionic CLI Version: 2.2.1**\n- 首先找到项目根目录下以下路径里面的**filetransfer.d.ts**文件\n\n```\nnode_modules\\ionic-native\\dist\\es5\\plugins\\filetransfer.d.ts\nnode_modules\\ionic-native\\dist\\esm\\plugins\\filetransfer.d.ts\n```\n\n- 分别修改以上两个文件里面的代码\n\n```\n//把这一行:\nupload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise<FileUploadResult | FileTransferError>\n//改为: \nupload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise<FileUploadResult>\n```\n\n\n### 在安卓下使用相册选择时, 返回的图片路径不能再显示问题\n- 首先在这个例子使用的是cordova-plugin-camera组件(Cordova的相机插件)\n- 首先引入需要的类\n- FilePath 这个类就是用来修复安卓上图片URI的问题的\n\n```typescript\nimport { Camera, File, FilePath } from 'ionic-native';\n```\n\n- 使用 FilePath.resolveNativePath(imagePath) 这个方法来纠正图片URI\n\n```typescript\nCamera.getPicture(options).then((imagePath) => {\n // 特殊安卓图片库的处理\n this.nativeFilePath = imagePath;\n if (this.pl.is('android') && sourceType === Camera.PictureSourceType.PHOTOLIBRARY) {\n   FilePath.resolveNativePath(imagePath)\n   .then(filePath => {\n       this.nativeFilePath = filePath;\n       let currentName = imagePath.substring(imagePath.lastIndexOf('/') + 1, imagePath.lastIndexOf('?'));\n   });\n } else {\n   var currentName = imagePath.substr(imagePath.lastIndexOf('/') + 1);\n }\n}, err => {\n // this.presentToast('选择图片失败.');\n});\n```\n\n","source":"_posts/2017-02-25-ionic-dev-note.md","raw":"---\ntitle: \"IONIC 2 开发笔记\"\nabstract: 记录了所有IONIC 2开发时踩过的坑\nheader_image: /assets/images/ionic2-banner.png\ndate: 2017/02/25\ncategories:\n  - Ionic\ntags:\n  - Ionic 2\n  - Angular 2\n  - Hybird App\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\n---\n\n因为IONIC2才刚刚开始进入正式版, 中文文档基本都是不全的, 我现在开发都是在看英文文档\n在开发的过程中遇到了很多文档没有描述的问题, 而且开发的过程中遇到一些框架本身没有完善的功能和存在的BUG\n\n我会在这个日记里面记录一些文档没有写的, 和我开发过程中遇到的一些坑和经验, 希望可以帮助那些刚刚接触IONIC2的程序猿们!\n\n## APP配置\n\n### 域名配置\n因为跨域问题，在开发时如果要用到本地环境进行开发(ionic serve)，必须配置proxy\n- Proxy位于项目根目录下的 **ionic.config.json**\n+ 只需要把**proxyUrl**改为你本地环境的API地址\n\n```javascript\n{\n  \"name\": \"rlph\",\n  \"app_id\": \"\",\n  \"v2\": true,\n  \"typescript\": true,\n  \"proxies\": [\n    {\n      \"path\": \"/api\",\n      \"proxyUrl\": \"http://api.dev\"\n    }\n  ]\n}\n```\n\n+ 然后把API地址的常量制定为**/api/**这个proxy\n- 在根目录下**/src/config.ts**里面把**\"API_SERVER\"**的值改为**\"/api/\"**\n\n```\n  export let data = {\n      \"API_SERVER\" : \"/api/\"\n  }\n```\n\n\n### 上线APP配置\n+ 首先你需要配置真是服务器API地址\n配置API地址是在根目录下**/src/config.ts**里面把**\"API_SERVER\"**的值改为线上API地址\n\n```\n  export let data = {\n      \"API_SERVER\" : \"http://api.domain.com/\"\n  }\n```\n\n## 开发常见问题\n\n### APP run 失败\n当运行**ionic run android**的时候可能会遇到该报错：\n\n```\nError: Failed to install apk to device: [  1%] /data/local/tmp/android-debug.apk\n[  2%] /data/local/tmp/android-debug.apk\n...\n[100%] /data/local/tmp/android-debug.apk\n        pkg: /data/local/tmp/android-debug.apk\nFailure [INSTALL_FAILED_UPDATE_INCOMPATIBLE]\n```\n\n- 此问题是因为已有签名的APP存在手机上， 需要想删除该APP才能安装测试（debug）版的apk\n- 在cmd运行以下代码即可解决问题：\n\n```\nadb uninstall my.package.id\n```\n\n\n### Ionic 2 自带的native文件上传(FILE TRANSFER)插件无法获取成功返回内容\n这个是Ionic 2 核心代码里面的一个BUG, 在一下版本下是有问题的\n**Ionic CLI Version: 2.2.1**\n- 首先找到项目根目录下以下路径里面的**filetransfer.d.ts**文件\n\n```\nnode_modules\\ionic-native\\dist\\es5\\plugins\\filetransfer.d.ts\nnode_modules\\ionic-native\\dist\\esm\\plugins\\filetransfer.d.ts\n```\n\n- 分别修改以上两个文件里面的代码\n\n```\n//把这一行:\nupload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise<FileUploadResult | FileTransferError>\n//改为: \nupload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise<FileUploadResult>\n```\n\n\n### 在安卓下使用相册选择时, 返回的图片路径不能再显示问题\n- 首先在这个例子使用的是cordova-plugin-camera组件(Cordova的相机插件)\n- 首先引入需要的类\n- FilePath 这个类就是用来修复安卓上图片URI的问题的\n\n```typescript\nimport { Camera, File, FilePath } from 'ionic-native';\n```\n\n- 使用 FilePath.resolveNativePath(imagePath) 这个方法来纠正图片URI\n\n```typescript\nCamera.getPicture(options).then((imagePath) => {\n // 特殊安卓图片库的处理\n this.nativeFilePath = imagePath;\n if (this.pl.is('android') && sourceType === Camera.PictureSourceType.PHOTOLIBRARY) {\n   FilePath.resolveNativePath(imagePath)\n   .then(filePath => {\n       this.nativeFilePath = filePath;\n       let currentName = imagePath.substring(imagePath.lastIndexOf('/') + 1, imagePath.lastIndexOf('?'));\n   });\n } else {\n   var currentName = imagePath.substr(imagePath.lastIndexOf('/') + 1);\n }\n}, err => {\n // this.presentToast('选择图片失败.');\n});\n```\n\n","slug":"2017-02-25-ionic-dev-note","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy4u00013cqe5s02fayp","content":"<p>因为IONIC2才刚刚开始进入正式版, 中文文档基本都是不全的, 我现在开发都是在看英文文档<br>在开发的过程中遇到了很多文档没有描述的问题, 而且开发的过程中遇到一些框架本身没有完善的功能和存在的BUG</p>\n<p>我会在这个日记里面记录一些文档没有写的, 和我开发过程中遇到的一些坑和经验, 希望可以帮助那些刚刚接触IONIC2的程序猿们!</p>\n<h2 id=\"APP配置\"><a href=\"#APP配置\" class=\"headerlink\" title=\"APP配置\"></a>APP配置</h2><h3 id=\"域名配置\"><a href=\"#域名配置\" class=\"headerlink\" title=\"域名配置\"></a>域名配置</h3><p>因为跨域问题，在开发时如果要用到本地环境进行开发(ionic serve)，必须配置proxy</p>\n<ul>\n<li>Proxy位于项目根目录下的 <strong>ionic.config.json</strong></li>\n</ul>\n<ul>\n<li>只需要把<strong>proxyUrl</strong>改为你本地环境的API地址</li>\n</ul>\n<pre><code class=\"javascript\">{\n  &quot;name&quot;: &quot;rlph&quot;,\n  &quot;app_id&quot;: &quot;&quot;,\n  &quot;v2&quot;: true,\n  &quot;typescript&quot;: true,\n  &quot;proxies&quot;: [\n    {\n      &quot;path&quot;: &quot;/api&quot;,\n      &quot;proxyUrl&quot;: &quot;http://api.dev&quot;\n    }\n  ]\n}</code></pre>\n<ul>\n<li>然后把API地址的常量制定为<strong>/api/</strong>这个proxy</li>\n</ul>\n<ul>\n<li>在根目录下<strong>/src/config.ts</strong>里面把<strong>“API_SERVER”</strong>的值改为<strong>“/api/“</strong></li>\n</ul>\n<pre><code>  export let data = {\n      &quot;API_SERVER&quot; : &quot;/api/&quot;\n  }</code></pre><h3 id=\"上线APP配置\"><a href=\"#上线APP配置\" class=\"headerlink\" title=\"上线APP配置\"></a>上线APP配置</h3><ul>\n<li>首先你需要配置真是服务器API地址<br>配置API地址是在根目录下<strong>/src/config.ts</strong>里面把<strong>“API_SERVER”</strong>的值改为线上API地址</li>\n</ul>\n<pre><code>  export let data = {\n      &quot;API_SERVER&quot; : &quot;http://api.domain.com/&quot;\n  }</code></pre><h2 id=\"开发常见问题\"><a href=\"#开发常见问题\" class=\"headerlink\" title=\"开发常见问题\"></a>开发常见问题</h2><h3 id=\"APP-run-失败\"><a href=\"#APP-run-失败\" class=\"headerlink\" title=\"APP run 失败\"></a>APP run 失败</h3><p>当运行<strong>ionic run android</strong>的时候可能会遇到该报错：</p>\n<pre><code>Error: Failed to install apk to device: [  1%] /data/local/tmp/android-debug.apk\n[  2%] /data/local/tmp/android-debug.apk\n...\n[100%] /data/local/tmp/android-debug.apk\n        pkg: /data/local/tmp/android-debug.apk\nFailure [INSTALL_FAILED_UPDATE_INCOMPATIBLE]</code></pre><ul>\n<li>此问题是因为已有签名的APP存在手机上， 需要想删除该APP才能安装测试（debug）版的apk</li>\n<li>在cmd运行以下代码即可解决问题：</li>\n</ul>\n<pre><code>adb uninstall my.package.id</code></pre><h3 id=\"Ionic-2-自带的native文件上传-FILE-TRANSFER-插件无法获取成功返回内容\"><a href=\"#Ionic-2-自带的native文件上传-FILE-TRANSFER-插件无法获取成功返回内容\" class=\"headerlink\" title=\"Ionic 2 自带的native文件上传(FILE TRANSFER)插件无法获取成功返回内容\"></a>Ionic 2 自带的native文件上传(FILE TRANSFER)插件无法获取成功返回内容</h3><p>这个是Ionic 2 核心代码里面的一个BUG, 在一下版本下是有问题的<br><strong>Ionic CLI Version: 2.2.1</strong></p>\n<ul>\n<li>首先找到项目根目录下以下路径里面的<strong>filetransfer.d.ts</strong>文件</li>\n</ul>\n<pre><code>node_modules\\ionic-native\\dist\\es5\\plugins\\filetransfer.d.ts\nnode_modules\\ionic-native\\dist\\esm\\plugins\\filetransfer.d.ts</code></pre><ul>\n<li>分别修改以上两个文件里面的代码</li>\n</ul>\n<pre><code>//把这一行:\nupload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise&lt;FileUploadResult | FileTransferError&gt;\n//改为: \nupload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise&lt;FileUploadResult&gt;</code></pre><h3 id=\"在安卓下使用相册选择时-返回的图片路径不能再显示问题\"><a href=\"#在安卓下使用相册选择时-返回的图片路径不能再显示问题\" class=\"headerlink\" title=\"在安卓下使用相册选择时, 返回的图片路径不能再显示问题\"></a>在安卓下使用相册选择时, 返回的图片路径不能再显示问题</h3><ul>\n<li>首先在这个例子使用的是cordova-plugin-camera组件(Cordova的相机插件)</li>\n<li>首先引入需要的类</li>\n<li>FilePath 这个类就是用来修复安卓上图片URI的问题的</li>\n</ul>\n<pre><code class=\"typescript\">import { Camera, File, FilePath } from &#39;ionic-native&#39;;</code></pre>\n<ul>\n<li>使用 FilePath.resolveNativePath(imagePath) 这个方法来纠正图片URI</li>\n</ul>\n<pre><code class=\"typescript\">Camera.getPicture(options).then((imagePath) =&gt; {\n // 特殊安卓图片库的处理\n this.nativeFilePath = imagePath;\n if (this.pl.is(&#39;android&#39;) &amp;&amp; sourceType === Camera.PictureSourceType.PHOTOLIBRARY) {\n   FilePath.resolveNativePath(imagePath)\n   .then(filePath =&gt; {\n       this.nativeFilePath = filePath;\n       let currentName = imagePath.substring(imagePath.lastIndexOf(&#39;/&#39;) + 1, imagePath.lastIndexOf(&#39;?&#39;));\n   });\n } else {\n   var currentName = imagePath.substr(imagePath.lastIndexOf(&#39;/&#39;) + 1);\n }\n}, err =&gt; {\n // this.presentToast(&#39;选择图片失败.&#39;);\n});</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>因为IONIC2才刚刚开始进入正式版, 中文文档基本都是不全的, 我现在开发都是在看英文文档<br>在开发的过程中遇到了很多文档没有描述的问题, 而且开发的过程中遇到一些框架本身没有完善的功能和存在的BUG</p>\n<p>我会在这个日记里面记录一些文档没有写的, 和我开发过程中遇到的一些坑和经验, 希望可以帮助那些刚刚接触IONIC2的程序猿们!</p>\n<h2 id=\"APP配置\"><a href=\"#APP配置\" class=\"headerlink\" title=\"APP配置\"></a>APP配置</h2><h3 id=\"域名配置\"><a href=\"#域名配置\" class=\"headerlink\" title=\"域名配置\"></a>域名配置</h3><p>因为跨域问题，在开发时如果要用到本地环境进行开发(ionic serve)，必须配置proxy</p>\n<ul>\n<li>Proxy位于项目根目录下的 <strong>ionic.config.json</strong></li>\n</ul>\n<ul>\n<li>只需要把<strong>proxyUrl</strong>改为你本地环境的API地址</li>\n</ul>\n<pre><code class=\"javascript\">{\n  &quot;name&quot;: &quot;rlph&quot;,\n  &quot;app_id&quot;: &quot;&quot;,\n  &quot;v2&quot;: true,\n  &quot;typescript&quot;: true,\n  &quot;proxies&quot;: [\n    {\n      &quot;path&quot;: &quot;/api&quot;,\n      &quot;proxyUrl&quot;: &quot;http://api.dev&quot;\n    }\n  ]\n}</code></pre>\n<ul>\n<li>然后把API地址的常量制定为<strong>/api/</strong>这个proxy</li>\n</ul>\n<ul>\n<li>在根目录下<strong>/src/config.ts</strong>里面把<strong>“API_SERVER”</strong>的值改为<strong>“/api/“</strong></li>\n</ul>\n<pre><code>  export let data = {\n      &quot;API_SERVER&quot; : &quot;/api/&quot;\n  }</code></pre><h3 id=\"上线APP配置\"><a href=\"#上线APP配置\" class=\"headerlink\" title=\"上线APP配置\"></a>上线APP配置</h3><ul>\n<li>首先你需要配置真是服务器API地址<br>配置API地址是在根目录下<strong>/src/config.ts</strong>里面把<strong>“API_SERVER”</strong>的值改为线上API地址</li>\n</ul>\n<pre><code>  export let data = {\n      &quot;API_SERVER&quot; : &quot;http://api.domain.com/&quot;\n  }</code></pre><h2 id=\"开发常见问题\"><a href=\"#开发常见问题\" class=\"headerlink\" title=\"开发常见问题\"></a>开发常见问题</h2><h3 id=\"APP-run-失败\"><a href=\"#APP-run-失败\" class=\"headerlink\" title=\"APP run 失败\"></a>APP run 失败</h3><p>当运行<strong>ionic run android</strong>的时候可能会遇到该报错：</p>\n<pre><code>Error: Failed to install apk to device: [  1%] /data/local/tmp/android-debug.apk\n[  2%] /data/local/tmp/android-debug.apk\n...\n[100%] /data/local/tmp/android-debug.apk\n        pkg: /data/local/tmp/android-debug.apk\nFailure [INSTALL_FAILED_UPDATE_INCOMPATIBLE]</code></pre><ul>\n<li>此问题是因为已有签名的APP存在手机上， 需要想删除该APP才能安装测试（debug）版的apk</li>\n<li>在cmd运行以下代码即可解决问题：</li>\n</ul>\n<pre><code>adb uninstall my.package.id</code></pre><h3 id=\"Ionic-2-自带的native文件上传-FILE-TRANSFER-插件无法获取成功返回内容\"><a href=\"#Ionic-2-自带的native文件上传-FILE-TRANSFER-插件无法获取成功返回内容\" class=\"headerlink\" title=\"Ionic 2 自带的native文件上传(FILE TRANSFER)插件无法获取成功返回内容\"></a>Ionic 2 自带的native文件上传(FILE TRANSFER)插件无法获取成功返回内容</h3><p>这个是Ionic 2 核心代码里面的一个BUG, 在一下版本下是有问题的<br><strong>Ionic CLI Version: 2.2.1</strong></p>\n<ul>\n<li>首先找到项目根目录下以下路径里面的<strong>filetransfer.d.ts</strong>文件</li>\n</ul>\n<pre><code>node_modules\\ionic-native\\dist\\es5\\plugins\\filetransfer.d.ts\nnode_modules\\ionic-native\\dist\\esm\\plugins\\filetransfer.d.ts</code></pre><ul>\n<li>分别修改以上两个文件里面的代码</li>\n</ul>\n<pre><code>//把这一行:\nupload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise&lt;FileUploadResult | FileTransferError&gt;\n//改为: \nupload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise&lt;FileUploadResult&gt;</code></pre><h3 id=\"在安卓下使用相册选择时-返回的图片路径不能再显示问题\"><a href=\"#在安卓下使用相册选择时-返回的图片路径不能再显示问题\" class=\"headerlink\" title=\"在安卓下使用相册选择时, 返回的图片路径不能再显示问题\"></a>在安卓下使用相册选择时, 返回的图片路径不能再显示问题</h3><ul>\n<li>首先在这个例子使用的是cordova-plugin-camera组件(Cordova的相机插件)</li>\n<li>首先引入需要的类</li>\n<li>FilePath 这个类就是用来修复安卓上图片URI的问题的</li>\n</ul>\n<pre><code class=\"typescript\">import { Camera, File, FilePath } from &#39;ionic-native&#39;;</code></pre>\n<ul>\n<li>使用 FilePath.resolveNativePath(imagePath) 这个方法来纠正图片URI</li>\n</ul>\n<pre><code class=\"typescript\">Camera.getPicture(options).then((imagePath) =&gt; {\n // 特殊安卓图片库的处理\n this.nativeFilePath = imagePath;\n if (this.pl.is(&#39;android&#39;) &amp;&amp; sourceType === Camera.PictureSourceType.PHOTOLIBRARY) {\n   FilePath.resolveNativePath(imagePath)\n   .then(filePath =&gt; {\n       this.nativeFilePath = filePath;\n       let currentName = imagePath.substring(imagePath.lastIndexOf(&#39;/&#39;) + 1, imagePath.lastIndexOf(&#39;?&#39;));\n   });\n } else {\n   var currentName = imagePath.substr(imagePath.lastIndexOf(&#39;/&#39;) + 1);\n }\n}, err =&gt; {\n // this.presentToast(&#39;选择图片失败.&#39;);\n});</code></pre>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"IONIC 2 开发笔记","path":"Ionic/ionic-2-开发笔记/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2017-02-24T23:00:00.000Z","pv":0,"totalPV":0,"categories":"Ionic","tags":["Ionic 2","Angular 2","Hybird App"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2019-12-24T20:39:48.299Z","updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5200033cqep52wa3s1","content":"","site":{"data":{}},"excerpt":"","more":"","eyeCatchImage":"","titleImageForAmp":""},{"title":"Laravel 5.4 开发笔记","abstract":"记录了首次使用Laravel 5.4踩过的坑","header_image":"/assets/images/ionic2-banner.png","date":"2017-02-25T23:00:00.000Z","cover":"https://s2.ax1x.com/2019/09/18/noYn41.png","_content":"\nLaravel最近出的Laravel5.4新加了挺多功能的, 比起我用了1年的5.1完善多了. 比较吸引我使用最新的5.4的有几点:\n+ 5.4 添加了谷歌内核的浏览器模拟操作\n+ 自带API认证类\"PASSPORT\"\n+ 路由自动分类, 现有有了Route自己的文件夹然后里面分类好了WEB和API的路由\n这一篇记录会分享一些我在尝试Laravel 5.4的过程中遇到的问题和经验\n\n## 开发记录\n\n### 移植(Migrate)用户和API认证表格是出现sql错误\n\n```console\n[Illuminate\\Database\\QueryException]                                                         \n  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key  \n   length is 767 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))   \n```\n\n```console\n[PDOException]                                                                               \n  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key  \n   length is 767 bytes  \n```\n\n解决办法就是在**app/Providers/AppServiceProvider.php**的这个文件里面的**boot**方法里面添加一下代码:\n\n```php\nuse Illuminate\\Support\\Facades\\Schema;\n\nfunction boot()\n{\n    Schema::defaultStringLength(191);\n}\n```\n\n### 怎么不使用Laravel5.4自带的用户登录字段\n每次使用laravel自带的用户认证体系都会纠结, 怎么不用它自带的email作为用户名!\n这次适用Laravel5.4 又遇到了这个问题, 而且解决办法和5.1,5.2的不一样了, 因为Laravel的Auth Provider变动了.\n解决办法就是在自带的**User.php**(用户模型)里面使用**findForPassport**, 参考一下例子:\n\n```php\nclass User extends Authenticatable\n{\n    use HasApiTokens, Notifiable;\n\n    // ... some code\n\n    public function findForPassport($username) {\n        return $this->where('id', $username)->first();\n    }\n}\n```\n\n","source":"_posts/2017-02-26-laravel5.4-passport-and-authen.md","raw":"---\ntitle: \"Laravel 5.4 开发笔记\"\nabstract: 记录了首次使用Laravel 5.4踩过的坑\nheader_image: /assets/images/ionic2-banner.png\ndate: 2017/02/26\ncategories:\n  - Laravel\ntags:\n  - Laravel 5.4\n  - Laravel Passport\ncover: https://s2.ax1x.com/2019/09/18/noYn41.png\n---\n\nLaravel最近出的Laravel5.4新加了挺多功能的, 比起我用了1年的5.1完善多了. 比较吸引我使用最新的5.4的有几点:\n+ 5.4 添加了谷歌内核的浏览器模拟操作\n+ 自带API认证类\"PASSPORT\"\n+ 路由自动分类, 现有有了Route自己的文件夹然后里面分类好了WEB和API的路由\n这一篇记录会分享一些我在尝试Laravel 5.4的过程中遇到的问题和经验\n\n## 开发记录\n\n### 移植(Migrate)用户和API认证表格是出现sql错误\n\n```console\n[Illuminate\\Database\\QueryException]                                                         \n  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key  \n   length is 767 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))   \n```\n\n```console\n[PDOException]                                                                               \n  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key  \n   length is 767 bytes  \n```\n\n解决办法就是在**app/Providers/AppServiceProvider.php**的这个文件里面的**boot**方法里面添加一下代码:\n\n```php\nuse Illuminate\\Support\\Facades\\Schema;\n\nfunction boot()\n{\n    Schema::defaultStringLength(191);\n}\n```\n\n### 怎么不使用Laravel5.4自带的用户登录字段\n每次使用laravel自带的用户认证体系都会纠结, 怎么不用它自带的email作为用户名!\n这次适用Laravel5.4 又遇到了这个问题, 而且解决办法和5.1,5.2的不一样了, 因为Laravel的Auth Provider变动了.\n解决办法就是在自带的**User.php**(用户模型)里面使用**findForPassport**, 参考一下例子:\n\n```php\nclass User extends Authenticatable\n{\n    use HasApiTokens, Notifiable;\n\n    // ... some code\n\n    public function findForPassport($username) {\n        return $this->where('id', $username)->first();\n    }\n}\n```\n\n","slug":"2017-02-26-laravel5.4-passport-and-authen","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5800073cqexgocfvsl","content":"<p>Laravel最近出的Laravel5.4新加了挺多功能的, 比起我用了1年的5.1完善多了. 比较吸引我使用最新的5.4的有几点:</p>\n<ul>\n<li>5.4 添加了谷歌内核的浏览器模拟操作</li>\n<li>自带API认证类”PASSPORT”</li>\n<li>路由自动分类, 现有有了Route自己的文件夹然后里面分类好了WEB和API的路由<br>这一篇记录会分享一些我在尝试Laravel 5.4的过程中遇到的问题和经验</li>\n</ul>\n<h2 id=\"开发记录\"><a href=\"#开发记录\" class=\"headerlink\" title=\"开发记录\"></a>开发记录</h2><h3 id=\"移植-Migrate-用户和API认证表格是出现sql错误\"><a href=\"#移植-Migrate-用户和API认证表格是出现sql错误\" class=\"headerlink\" title=\"移植(Migrate)用户和API认证表格是出现sql错误\"></a>移植(Migrate)用户和API认证表格是出现sql错误</h3><pre><code class=\"console\">[Illuminate\\Database\\QueryException]                                                         \n  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key  \n   length is 767 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))   </code></pre>\n<pre><code class=\"console\">[PDOException]                                                                               \n  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key  \n   length is 767 bytes  </code></pre>\n<p>解决办法就是在<strong>app/Providers/AppServiceProvider.php</strong>的这个文件里面的<strong>boot</strong>方法里面添加一下代码:</p>\n<pre><code class=\"php\">use Illuminate\\Support\\Facades\\Schema;\n\nfunction boot()\n{\n    Schema::defaultStringLength(191);\n}</code></pre>\n<h3 id=\"怎么不使用Laravel5-4自带的用户登录字段\"><a href=\"#怎么不使用Laravel5-4自带的用户登录字段\" class=\"headerlink\" title=\"怎么不使用Laravel5.4自带的用户登录字段\"></a>怎么不使用Laravel5.4自带的用户登录字段</h3><p>每次使用laravel自带的用户认证体系都会纠结, 怎么不用它自带的email作为用户名!<br>这次适用Laravel5.4 又遇到了这个问题, 而且解决办法和5.1,5.2的不一样了, 因为Laravel的Auth Provider变动了.<br>解决办法就是在自带的<strong>User.php</strong>(用户模型)里面使用<strong>findForPassport</strong>, 参考一下例子:</p>\n<pre><code class=\"php\">class User extends Authenticatable\n{\n    use HasApiTokens, Notifiable;\n\n    // ... some code\n\n    public function findForPassport($username) {\n        return $this-&gt;where(&#39;id&#39;, $username)-&gt;first();\n    }\n}</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>Laravel最近出的Laravel5.4新加了挺多功能的, 比起我用了1年的5.1完善多了. 比较吸引我使用最新的5.4的有几点:</p>\n<ul>\n<li>5.4 添加了谷歌内核的浏览器模拟操作</li>\n<li>自带API认证类”PASSPORT”</li>\n<li>路由自动分类, 现有有了Route自己的文件夹然后里面分类好了WEB和API的路由<br>这一篇记录会分享一些我在尝试Laravel 5.4的过程中遇到的问题和经验</li>\n</ul>\n<h2 id=\"开发记录\"><a href=\"#开发记录\" class=\"headerlink\" title=\"开发记录\"></a>开发记录</h2><h3 id=\"移植-Migrate-用户和API认证表格是出现sql错误\"><a href=\"#移植-Migrate-用户和API认证表格是出现sql错误\" class=\"headerlink\" title=\"移植(Migrate)用户和API认证表格是出现sql错误\"></a>移植(Migrate)用户和API认证表格是出现sql错误</h3><pre><code class=\"console\">[Illuminate\\Database\\QueryException]                                                         \n  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key  \n   length is 767 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))   </code></pre>\n<pre><code class=\"console\">[PDOException]                                                                               \n  SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key  \n   length is 767 bytes  </code></pre>\n<p>解决办法就是在<strong>app/Providers/AppServiceProvider.php</strong>的这个文件里面的<strong>boot</strong>方法里面添加一下代码:</p>\n<pre><code class=\"php\">use Illuminate\\Support\\Facades\\Schema;\n\nfunction boot()\n{\n    Schema::defaultStringLength(191);\n}</code></pre>\n<h3 id=\"怎么不使用Laravel5-4自带的用户登录字段\"><a href=\"#怎么不使用Laravel5-4自带的用户登录字段\" class=\"headerlink\" title=\"怎么不使用Laravel5.4自带的用户登录字段\"></a>怎么不使用Laravel5.4自带的用户登录字段</h3><p>每次使用laravel自带的用户认证体系都会纠结, 怎么不用它自带的email作为用户名!<br>这次适用Laravel5.4 又遇到了这个问题, 而且解决办法和5.1,5.2的不一样了, 因为Laravel的Auth Provider变动了.<br>解决办法就是在自带的<strong>User.php</strong>(用户模型)里面使用<strong>findForPassport</strong>, 参考一下例子:</p>\n<pre><code class=\"php\">class User extends Authenticatable\n{\n    use HasApiTokens, Notifiable;\n\n    // ... some code\n\n    public function findForPassport($username) {\n        return $this-&gt;where(&#39;id&#39;, $username)-&gt;first();\n    }\n}</code></pre>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"Laravel 5.4 开发笔记","path":"Laravel/laravel-5-4-开发笔记/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2017-02-25T23:00:00.000Z","pv":0,"totalPV":0,"categories":"Laravel","tags":["Laravel 5.4","Laravel Passport"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"IONIC 2 - 确认密码","abstract":"开发过程中一般在注册或者修改密码都要写一个密码确认的表格, 这篇文章就是记录怎么在Ionic2里面使用FormBuilder和Validators判断密码是否一致.","header_image":"/assets/images/ionic2-banner.png","date":"2017-03-18T23:00:00.000Z","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","_content":"\n开发过程中一般在注册或者修改密码都要写一个密码确认的表格, 这篇文章就是记录怎么在Ionic2里面使用**FormBuilder**和**Validators**判断密码是否一致.\n\n首先这篇文章是默认您已经了解怎么使用**Angualr2**的**FormBuilder**和**Validator**, 如果你还没了解这两个类的用法可以前去看[Ionic2的文档](https://ionicframework.com/docs/v2/resources/forms/)\n\n# 实例一个`FormGroup`\n\n> 第一步首先我们需要实例了FormBuilder的一个FormGroup\n\n+ 这里我们定义了passwordForm的这个表格里面的input.\n+ 在最后我们加入了自定义认证方法 { validator: AdvanceValidator.matchingPasswords('password', 'rePassword') }\n+ 这里我们把password, 和rePassword 传给了 AdvanceValidator 方法, 这里传的是密码和确认密码在FormGroup里面定义的名字.\n+ 现在我们看看这个password.ts怎么写.\n\n```typescript\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { AdvanceValidator } from '../../validators/advance-validator';\n\n@Component({\n  selector: 'page-password',\n  templateUrl: 'password.html'\n})\n\n//密码修改页\nexport class PasswordPage {\n  passwordForm: FormGroup;\n\n  constructor(private fb: FormBuilder) \n  {\n    \n    this.passwordForm = fb.group({\n        username: ['', Validators.required],\n        password: ['', Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],\n        rePassword: ['', Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],\n    }, { validator: AdvanceValidator.matchingPasswords('password', 'rePassword') });\n    \n  }\n}\n```\n\n# 创建自定义认证器\n\n+ 我们首先在项目根目录创建 **validators** 的文件夹\n+ 然后在里面创建 **advance-validators.ts** 的ts文件\n+ 在 **advance-validators.ts** 里面编以下代码\n\n```typescript\nimport { FormGroup } from '@angular/forms';\n\nexport class AdvanceValidator {\n\n\tstatic matchingPasswords(passwordKey: string, rePasswordKey: string) {\n    return (group: FormGroup) => {\n      let password = group.controls[passwordKey]; //获取密码值\n      let rePassword = group.controls[rePasswordKey]; //获取确认密码值\n\n      if(password.value !== rePassword.value) {\n        //如果密码和确认密码的值不一致就返回给FormBuild rePassword有错误\n        return rePassword.setErrors({notEquivalent: true}) \n      }\n    }\n  }\n}\n```\n\n# 前端表格示例\n\n```html\n<form [formGroup] = \"passwordForm\">\n  <ion-list inset>\n\n    <ion-item>\n      <ion-input type=\"tel\" placeholder=\"用户名\" formControlName=\"username\"></ion-input>\n      <div item-right *ngIf=\"!passwordForm.controls.username.valid  && (passwordForm.controls.username.dirty)\">\n        <ion-icon name=\"alert\"></ion-icon> 用户名必填\n      </div>\n    </ion-item>\n\n    <ion-item>\n      <ion-input type=\"password\" placeholder=\"新密码\" formControlName=\"password\"></ion-input>\n      <div item-right *ngIf=\"!passwordForm.controls.password.valid  && (passwordForm.controls.password.dirty)\" >\n        <ion-icon name=\"alert\"></ion-icon> 密码必须7个字以上\n      </div>\n    </ion-item>\n\n    <ion-item>\n      <ion-input type=\"password\" placeholder=\"确认密码\" formControlName=\"rePassword\"></ion-input>\n      <div item-right *ngIf=\"!passwordForm.controls.rePassword.valid  && (passwordForm.controls.rePassword.dirty)\" >\n        <ion-icon name=\"alert\"></ion-icon> 密码必须一致\n      </div>\n    </ion-item>\n\n  </ion-list>\n</form>\n```\n","source":"_posts/2017-03-19-ionic2-comfirm-password-validators.md","raw":"---\ntitle: \"IONIC 2 - 确认密码\"\nabstract: 开发过程中一般在注册或者修改密码都要写一个密码确认的表格, 这篇文章就是记录怎么在Ionic2里面使用FormBuilder和Validators判断密码是否一致.\nheader_image: /assets/images/ionic2-banner.png\ndate: 2017/03/19\ncategories:\n  - Ionic\ntags:\n  - Ionic 2\n  - Angular 2\n  - Hybird App\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\n---\n\n开发过程中一般在注册或者修改密码都要写一个密码确认的表格, 这篇文章就是记录怎么在Ionic2里面使用**FormBuilder**和**Validators**判断密码是否一致.\n\n首先这篇文章是默认您已经了解怎么使用**Angualr2**的**FormBuilder**和**Validator**, 如果你还没了解这两个类的用法可以前去看[Ionic2的文档](https://ionicframework.com/docs/v2/resources/forms/)\n\n# 实例一个`FormGroup`\n\n> 第一步首先我们需要实例了FormBuilder的一个FormGroup\n\n+ 这里我们定义了passwordForm的这个表格里面的input.\n+ 在最后我们加入了自定义认证方法 { validator: AdvanceValidator.matchingPasswords('password', 'rePassword') }\n+ 这里我们把password, 和rePassword 传给了 AdvanceValidator 方法, 这里传的是密码和确认密码在FormGroup里面定义的名字.\n+ 现在我们看看这个password.ts怎么写.\n\n```typescript\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { AdvanceValidator } from '../../validators/advance-validator';\n\n@Component({\n  selector: 'page-password',\n  templateUrl: 'password.html'\n})\n\n//密码修改页\nexport class PasswordPage {\n  passwordForm: FormGroup;\n\n  constructor(private fb: FormBuilder) \n  {\n    \n    this.passwordForm = fb.group({\n        username: ['', Validators.required],\n        password: ['', Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],\n        rePassword: ['', Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],\n    }, { validator: AdvanceValidator.matchingPasswords('password', 'rePassword') });\n    \n  }\n}\n```\n\n# 创建自定义认证器\n\n+ 我们首先在项目根目录创建 **validators** 的文件夹\n+ 然后在里面创建 **advance-validators.ts** 的ts文件\n+ 在 **advance-validators.ts** 里面编以下代码\n\n```typescript\nimport { FormGroup } from '@angular/forms';\n\nexport class AdvanceValidator {\n\n\tstatic matchingPasswords(passwordKey: string, rePasswordKey: string) {\n    return (group: FormGroup) => {\n      let password = group.controls[passwordKey]; //获取密码值\n      let rePassword = group.controls[rePasswordKey]; //获取确认密码值\n\n      if(password.value !== rePassword.value) {\n        //如果密码和确认密码的值不一致就返回给FormBuild rePassword有错误\n        return rePassword.setErrors({notEquivalent: true}) \n      }\n    }\n  }\n}\n```\n\n# 前端表格示例\n\n```html\n<form [formGroup] = \"passwordForm\">\n  <ion-list inset>\n\n    <ion-item>\n      <ion-input type=\"tel\" placeholder=\"用户名\" formControlName=\"username\"></ion-input>\n      <div item-right *ngIf=\"!passwordForm.controls.username.valid  && (passwordForm.controls.username.dirty)\">\n        <ion-icon name=\"alert\"></ion-icon> 用户名必填\n      </div>\n    </ion-item>\n\n    <ion-item>\n      <ion-input type=\"password\" placeholder=\"新密码\" formControlName=\"password\"></ion-input>\n      <div item-right *ngIf=\"!passwordForm.controls.password.valid  && (passwordForm.controls.password.dirty)\" >\n        <ion-icon name=\"alert\"></ion-icon> 密码必须7个字以上\n      </div>\n    </ion-item>\n\n    <ion-item>\n      <ion-input type=\"password\" placeholder=\"确认密码\" formControlName=\"rePassword\"></ion-input>\n      <div item-right *ngIf=\"!passwordForm.controls.rePassword.valid  && (passwordForm.controls.rePassword.dirty)\" >\n        <ion-icon name=\"alert\"></ion-icon> 密码必须一致\n      </div>\n    </ion-item>\n\n  </ion-list>\n</form>\n```\n","slug":"2017-03-19-ionic2-comfirm-password-validators","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5c00093cqecpu5dnks","content":"<p>开发过程中一般在注册或者修改密码都要写一个密码确认的表格, 这篇文章就是记录怎么在Ionic2里面使用<strong>FormBuilder</strong>和<strong>Validators</strong>判断密码是否一致.</p>\n<p>首先这篇文章是默认您已经了解怎么使用<strong>Angualr2</strong>的<strong>FormBuilder</strong>和<strong>Validator</strong>, 如果你还没了解这两个类的用法可以前去看<a href=\"https://ionicframework.com/docs/v2/resources/forms/\" target=\"_blank\" rel=\"noopener\">Ionic2的文档</a></p>\n<h1 id=\"实例一个FormGroup\"><a href=\"#实例一个FormGroup\" class=\"headerlink\" title=\"实例一个FormGroup\"></a>实例一个<code>FormGroup</code></h1><blockquote>\n<p>第一步首先我们需要实例了FormBuilder的一个FormGroup</p>\n</blockquote>\n<ul>\n<li>这里我们定义了passwordForm的这个表格里面的input.</li>\n<li>在最后我们加入了自定义认证方法 { validator: AdvanceValidator.matchingPasswords(‘password’, ‘rePassword’) }</li>\n<li>这里我们把password, 和rePassword 传给了 AdvanceValidator 方法, 这里传的是密码和确认密码在FormGroup里面定义的名字.</li>\n<li>现在我们看看这个password.ts怎么写.</li>\n</ul>\n<pre><code class=\"typescript\">import { FormBuilder, Validators, FormGroup } from &#39;@angular/forms&#39;;\nimport { AdvanceValidator } from &#39;../../validators/advance-validator&#39;;\n\n@Component({\n  selector: &#39;page-password&#39;,\n  templateUrl: &#39;password.html&#39;\n})\n\n//密码修改页\nexport class PasswordPage {\n  passwordForm: FormGroup;\n\n  constructor(private fb: FormBuilder) \n  {\n\n    this.passwordForm = fb.group({\n        username: [&#39;&#39;, Validators.required],\n        password: [&#39;&#39;, Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],\n        rePassword: [&#39;&#39;, Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],\n    }, { validator: AdvanceValidator.matchingPasswords(&#39;password&#39;, &#39;rePassword&#39;) });\n\n  }\n}</code></pre>\n<h1 id=\"创建自定义认证器\"><a href=\"#创建自定义认证器\" class=\"headerlink\" title=\"创建自定义认证器\"></a>创建自定义认证器</h1><ul>\n<li>我们首先在项目根目录创建 <strong>validators</strong> 的文件夹</li>\n<li>然后在里面创建 <strong>advance-validators.ts</strong> 的ts文件</li>\n<li>在 <strong>advance-validators.ts</strong> 里面编以下代码</li>\n</ul>\n<pre><code class=\"typescript\">import { FormGroup } from &#39;@angular/forms&#39;;\n\nexport class AdvanceValidator {\n\n    static matchingPasswords(passwordKey: string, rePasswordKey: string) {\n    return (group: FormGroup) =&gt; {\n      let password = group.controls[passwordKey]; //获取密码值\n      let rePassword = group.controls[rePasswordKey]; //获取确认密码值\n\n      if(password.value !== rePassword.value) {\n        //如果密码和确认密码的值不一致就返回给FormBuild rePassword有错误\n        return rePassword.setErrors({notEquivalent: true}) \n      }\n    }\n  }\n}</code></pre>\n<h1 id=\"前端表格示例\"><a href=\"#前端表格示例\" class=\"headerlink\" title=\"前端表格示例\"></a>前端表格示例</h1><pre><code class=\"html\">&lt;form [formGroup] = &quot;passwordForm&quot;&gt;\n  &lt;ion-list inset&gt;\n\n    &lt;ion-item&gt;\n      &lt;ion-input type=&quot;tel&quot; placeholder=&quot;用户名&quot; formControlName=&quot;username&quot;&gt;&lt;/ion-input&gt;\n      &lt;div item-right *ngIf=&quot;!passwordForm.controls.username.valid  &amp;&amp; (passwordForm.controls.username.dirty)&quot;&gt;\n        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 用户名必填\n      &lt;/div&gt;\n    &lt;/ion-item&gt;\n\n    &lt;ion-item&gt;\n      &lt;ion-input type=&quot;password&quot; placeholder=&quot;新密码&quot; formControlName=&quot;password&quot;&gt;&lt;/ion-input&gt;\n      &lt;div item-right *ngIf=&quot;!passwordForm.controls.password.valid  &amp;&amp; (passwordForm.controls.password.dirty)&quot; &gt;\n        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 密码必须7个字以上\n      &lt;/div&gt;\n    &lt;/ion-item&gt;\n\n    &lt;ion-item&gt;\n      &lt;ion-input type=&quot;password&quot; placeholder=&quot;确认密码&quot; formControlName=&quot;rePassword&quot;&gt;&lt;/ion-input&gt;\n      &lt;div item-right *ngIf=&quot;!passwordForm.controls.rePassword.valid  &amp;&amp; (passwordForm.controls.rePassword.dirty)&quot; &gt;\n        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 密码必须一致\n      &lt;/div&gt;\n    &lt;/ion-item&gt;\n\n  &lt;/ion-list&gt;\n&lt;/form&gt;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>开发过程中一般在注册或者修改密码都要写一个密码确认的表格, 这篇文章就是记录怎么在Ionic2里面使用<strong>FormBuilder</strong>和<strong>Validators</strong>判断密码是否一致.</p>\n<p>首先这篇文章是默认您已经了解怎么使用<strong>Angualr2</strong>的<strong>FormBuilder</strong>和<strong>Validator</strong>, 如果你还没了解这两个类的用法可以前去看<a href=\"https://ionicframework.com/docs/v2/resources/forms/\" target=\"_blank\" rel=\"noopener\">Ionic2的文档</a></p>\n<h1 id=\"实例一个FormGroup\"><a href=\"#实例一个FormGroup\" class=\"headerlink\" title=\"实例一个FormGroup\"></a>实例一个<code>FormGroup</code></h1><blockquote>\n<p>第一步首先我们需要实例了FormBuilder的一个FormGroup</p>\n</blockquote>\n<ul>\n<li>这里我们定义了passwordForm的这个表格里面的input.</li>\n<li>在最后我们加入了自定义认证方法 { validator: AdvanceValidator.matchingPasswords(‘password’, ‘rePassword’) }</li>\n<li>这里我们把password, 和rePassword 传给了 AdvanceValidator 方法, 这里传的是密码和确认密码在FormGroup里面定义的名字.</li>\n<li>现在我们看看这个password.ts怎么写.</li>\n</ul>\n<pre><code class=\"typescript\">import { FormBuilder, Validators, FormGroup } from &#39;@angular/forms&#39;;\nimport { AdvanceValidator } from &#39;../../validators/advance-validator&#39;;\n\n@Component({\n  selector: &#39;page-password&#39;,\n  templateUrl: &#39;password.html&#39;\n})\n\n//密码修改页\nexport class PasswordPage {\n  passwordForm: FormGroup;\n\n  constructor(private fb: FormBuilder) \n  {\n\n    this.passwordForm = fb.group({\n        username: [&#39;&#39;, Validators.required],\n        password: [&#39;&#39;, Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],\n        rePassword: [&#39;&#39;, Validators.compose([Validators.maxLength(30), Validators.minLength(7), Validators.required])],\n    }, { validator: AdvanceValidator.matchingPasswords(&#39;password&#39;, &#39;rePassword&#39;) });\n\n  }\n}</code></pre>\n<h1 id=\"创建自定义认证器\"><a href=\"#创建自定义认证器\" class=\"headerlink\" title=\"创建自定义认证器\"></a>创建自定义认证器</h1><ul>\n<li>我们首先在项目根目录创建 <strong>validators</strong> 的文件夹</li>\n<li>然后在里面创建 <strong>advance-validators.ts</strong> 的ts文件</li>\n<li>在 <strong>advance-validators.ts</strong> 里面编以下代码</li>\n</ul>\n<pre><code class=\"typescript\">import { FormGroup } from &#39;@angular/forms&#39;;\n\nexport class AdvanceValidator {\n\n    static matchingPasswords(passwordKey: string, rePasswordKey: string) {\n    return (group: FormGroup) =&gt; {\n      let password = group.controls[passwordKey]; //获取密码值\n      let rePassword = group.controls[rePasswordKey]; //获取确认密码值\n\n      if(password.value !== rePassword.value) {\n        //如果密码和确认密码的值不一致就返回给FormBuild rePassword有错误\n        return rePassword.setErrors({notEquivalent: true}) \n      }\n    }\n  }\n}</code></pre>\n<h1 id=\"前端表格示例\"><a href=\"#前端表格示例\" class=\"headerlink\" title=\"前端表格示例\"></a>前端表格示例</h1><pre><code class=\"html\">&lt;form [formGroup] = &quot;passwordForm&quot;&gt;\n  &lt;ion-list inset&gt;\n\n    &lt;ion-item&gt;\n      &lt;ion-input type=&quot;tel&quot; placeholder=&quot;用户名&quot; formControlName=&quot;username&quot;&gt;&lt;/ion-input&gt;\n      &lt;div item-right *ngIf=&quot;!passwordForm.controls.username.valid  &amp;&amp; (passwordForm.controls.username.dirty)&quot;&gt;\n        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 用户名必填\n      &lt;/div&gt;\n    &lt;/ion-item&gt;\n\n    &lt;ion-item&gt;\n      &lt;ion-input type=&quot;password&quot; placeholder=&quot;新密码&quot; formControlName=&quot;password&quot;&gt;&lt;/ion-input&gt;\n      &lt;div item-right *ngIf=&quot;!passwordForm.controls.password.valid  &amp;&amp; (passwordForm.controls.password.dirty)&quot; &gt;\n        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 密码必须7个字以上\n      &lt;/div&gt;\n    &lt;/ion-item&gt;\n\n    &lt;ion-item&gt;\n      &lt;ion-input type=&quot;password&quot; placeholder=&quot;确认密码&quot; formControlName=&quot;rePassword&quot;&gt;&lt;/ion-input&gt;\n      &lt;div item-right *ngIf=&quot;!passwordForm.controls.rePassword.valid  &amp;&amp; (passwordForm.controls.rePassword.dirty)&quot; &gt;\n        &lt;ion-icon name=&quot;alert&quot;&gt;&lt;/ion-icon&gt; 密码必须一致\n      &lt;/div&gt;\n    &lt;/ion-item&gt;\n\n  &lt;/ion-list&gt;\n&lt;/form&gt;</code></pre>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"IONIC 2 - 确认密码","path":"Ionic/ionic-2-确认密码/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2017-03-18T23:00:00.000Z","pv":0,"totalPV":0,"categories":"Ionic","tags":["Ionic 2","Angular 2","Hybird App"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"修复 Ionic 3.0.1 在IOS点击Tabs多次出现黑屏问题方法","abstract":"Ionic 3.0.1 在IOS存在的一个严重的BUG，在IOS下多次重复点击TAB的时候页面会出现黑屏问题。","date":"2017-04-10T23:00:00.000Z","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","_content":"\n> Ionic 3.0.1 在IOS存在的一个严重的BUG，在IOS下多次重复点击TAB的时候页面会出现黑屏问题。\n\n> 好消息是目前有一个暂时的修复方法。但是这个方法涉及修改Ionic核心代码，所以如果你们正在使用Ionic3发布APP，可以暂时使用以下办法修复问题。\n\n> 在```node_modules/ionic-angular/components/tabs/tabs.js```找到一下代码 (468行)\n\n```typescript\ngetComponent(this._linker, tab.root).then(function (viewController) {\n    if (viewController !== active.component) {\n        // Otherwise, if the page we're on is not our real root\n        // reset it to our default root type\n        return tab.setRoot(tab.root);\n    }\n}).catch(function () {\n    (void 0) /* console.debug */;\n});\n```\n\n> 把以上代码改为\n\n```typescript\ngetComponent(this._linker, tab.root).then(function (viewController) {\n    if (viewController.component !== active.component) {\n        // Otherwise, if the page we're on is not our real root\n        // reset it to our default root type\n        return tab.setRoot(tab.root);\n    }\n}).catch(function () {\n    (void 0) /* console.debug */;\n});\n```\n\n> 以上解决办法来自于github上面的一个大神 https://github.com/driftyco/ionic/pull/11084\n\n\n\n","source":"_posts/2017-04-11-Ionic301-ios-blackscreen-fix.md","raw":"---\ntitle: \"修复 Ionic 3.0.1 在IOS点击Tabs多次出现黑屏问题方法\"\nabstract: Ionic 3.0.1 在IOS存在的一个严重的BUG，在IOS下多次重复点击TAB的时候页面会出现黑屏问题。\ndate: 2017/04/11\ncategories:\n  - Ionic\ntags:\n  - Ionic 3\n  - Angular 4\n  - Hybird App\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\n---\n\n> Ionic 3.0.1 在IOS存在的一个严重的BUG，在IOS下多次重复点击TAB的时候页面会出现黑屏问题。\n\n> 好消息是目前有一个暂时的修复方法。但是这个方法涉及修改Ionic核心代码，所以如果你们正在使用Ionic3发布APP，可以暂时使用以下办法修复问题。\n\n> 在```node_modules/ionic-angular/components/tabs/tabs.js```找到一下代码 (468行)\n\n```typescript\ngetComponent(this._linker, tab.root).then(function (viewController) {\n    if (viewController !== active.component) {\n        // Otherwise, if the page we're on is not our real root\n        // reset it to our default root type\n        return tab.setRoot(tab.root);\n    }\n}).catch(function () {\n    (void 0) /* console.debug */;\n});\n```\n\n> 把以上代码改为\n\n```typescript\ngetComponent(this._linker, tab.root).then(function (viewController) {\n    if (viewController.component !== active.component) {\n        // Otherwise, if the page we're on is not our real root\n        // reset it to our default root type\n        return tab.setRoot(tab.root);\n    }\n}).catch(function () {\n    (void 0) /* console.debug */;\n});\n```\n\n> 以上解决办法来自于github上面的一个大神 https://github.com/driftyco/ionic/pull/11084\n\n\n\n","slug":"2017-04-11-Ionic301-ios-blackscreen-fix","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5f000b3cqexclvqyrd","content":"<blockquote>\n<p>Ionic 3.0.1 在IOS存在的一个严重的BUG，在IOS下多次重复点击TAB的时候页面会出现黑屏问题。</p>\n</blockquote>\n<blockquote>\n<p>好消息是目前有一个暂时的修复方法。但是这个方法涉及修改Ionic核心代码，所以如果你们正在使用Ionic3发布APP，可以暂时使用以下办法修复问题。</p>\n</blockquote>\n<blockquote>\n<p>在<code>node_modules/ionic-angular/components/tabs/tabs.js</code>找到一下代码 (468行)</p>\n</blockquote>\n<pre><code class=\"typescript\">getComponent(this._linker, tab.root).then(function (viewController) {\n    if (viewController !== active.component) {\n        // Otherwise, if the page we&#39;re on is not our real root\n        // reset it to our default root type\n        return tab.setRoot(tab.root);\n    }\n}).catch(function () {\n    (void 0) /* console.debug */;\n});</code></pre>\n<blockquote>\n<p>把以上代码改为</p>\n</blockquote>\n<pre><code class=\"typescript\">getComponent(this._linker, tab.root).then(function (viewController) {\n    if (viewController.component !== active.component) {\n        // Otherwise, if the page we&#39;re on is not our real root\n        // reset it to our default root type\n        return tab.setRoot(tab.root);\n    }\n}).catch(function () {\n    (void 0) /* console.debug */;\n});</code></pre>\n<blockquote>\n<p>以上解决办法来自于github上面的一个大神 <a href=\"https://github.com/driftyco/ionic/pull/11084\" target=\"_blank\" rel=\"noopener\">https://github.com/driftyco/ionic/pull/11084</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Ionic 3.0.1 在IOS存在的一个严重的BUG，在IOS下多次重复点击TAB的时候页面会出现黑屏问题。</p>\n</blockquote>\n<blockquote>\n<p>好消息是目前有一个暂时的修复方法。但是这个方法涉及修改Ionic核心代码，所以如果你们正在使用Ionic3发布APP，可以暂时使用以下办法修复问题。</p>\n</blockquote>\n<blockquote>\n<p>在<code>node_modules/ionic-angular/components/tabs/tabs.js</code>找到一下代码 (468行)</p>\n</blockquote>\n<pre><code class=\"typescript\">getComponent(this._linker, tab.root).then(function (viewController) {\n    if (viewController !== active.component) {\n        // Otherwise, if the page we&#39;re on is not our real root\n        // reset it to our default root type\n        return tab.setRoot(tab.root);\n    }\n}).catch(function () {\n    (void 0) /* console.debug */;\n});</code></pre>\n<blockquote>\n<p>把以上代码改为</p>\n</blockquote>\n<pre><code class=\"typescript\">getComponent(this._linker, tab.root).then(function (viewController) {\n    if (viewController.component !== active.component) {\n        // Otherwise, if the page we&#39;re on is not our real root\n        // reset it to our default root type\n        return tab.setRoot(tab.root);\n    }\n}).catch(function () {\n    (void 0) /* console.debug */;\n});</code></pre>\n<blockquote>\n<p>以上解决办法来自于github上面的一个大神 <a href=\"https://github.com/driftyco/ionic/pull/11084\" target=\"_blank\" rel=\"noopener\">https://github.com/driftyco/ionic/pull/11084</a></p>\n</blockquote>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"修复 Ionic 3.0.1 在IOS点击Tabs多次出现黑屏问题方法","path":"Ionic/修复-ionic-3-0-1-在ios点击tabs多次出现黑屏问题方法/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2017-04-10T23:00:00.000Z","pv":0,"totalPV":0,"categories":"Ionic","tags":["Hybird App","Ionic 3","Angular 4"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"IONIC 3 使用sliders轮播时拖动后autoplay失效解决方法","abstract":"使用sliders轮播时拖动后autoplay失效解决方法","header_image":"/assets/images/ionic2-banner.png","date":"2017-04-19T23:00:00.000Z","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","_content":"\n#### 我们先了解一下Ionic的Sliders\n\n> 首先Ionic里面的sliders是用[Swiper.js](http://idangero.us/swiper/api/#.WPhzbPB96Uk)的第三方插件实现的, Ionic官方Sliders的文档里面只描述了可以直接写入html标签内的属性, 有很多高级属性是没有写在文档里面的. \n\n#### 要怎么改变sliders的其他属性呢?\n\n> 那如果我们要用到Swiper的其他属性怎么办呢? Ionic 2.x 的时候我们是可以在options里面传入的, 但是升级Ionic 3.x.x 后sliders的options属性被移除了. 现在要改变sliders的属性我们要用到sliders类. \n\n#### 如何拖动轮播图后不让autoplay失效呢?\n\n> 首先我们要引入```viewChild```和```Sliders```\n\n```ts\nimport { ViewChild } from '@angular/core';\nimport { Slides } from 'ionic-angular';\n\n```\n\n> 然后使用```ionViewWillEnter```在进入页面前改变sliders的```autoplayDisableOnInteraction```属性\n\n```ts\nimport { ViewChild } from '@angular/core';\nimport { Slides } from 'ionic-angular';\n\nclass MyPage {\n  @ViewChild(Slides) slides: Slides;\n\n  ionViewWillEnter() {\n    this.slides.autoplayDisableOnInteraction = false; //禁止slider拖动后autoPlay失效\n  }\n}\n```\n","source":"_posts/2017-04-20-Ionic-sliders-autoplay.md","raw":"---\ntitle: \"IONIC 3 使用sliders轮播时拖动后autoplay失效解决方法\"\nabstract: 使用sliders轮播时拖动后autoplay失效解决方法\nheader_image: /assets/images/ionic2-banner.png\ndate: 2017/04/20\ncategories:\n  - Ionic\ntags:\n  - Ionic 3\n  - Angular 4\n  - Hybird App\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\n---\n\n#### 我们先了解一下Ionic的Sliders\n\n> 首先Ionic里面的sliders是用[Swiper.js](http://idangero.us/swiper/api/#.WPhzbPB96Uk)的第三方插件实现的, Ionic官方Sliders的文档里面只描述了可以直接写入html标签内的属性, 有很多高级属性是没有写在文档里面的. \n\n#### 要怎么改变sliders的其他属性呢?\n\n> 那如果我们要用到Swiper的其他属性怎么办呢? Ionic 2.x 的时候我们是可以在options里面传入的, 但是升级Ionic 3.x.x 后sliders的options属性被移除了. 现在要改变sliders的属性我们要用到sliders类. \n\n#### 如何拖动轮播图后不让autoplay失效呢?\n\n> 首先我们要引入```viewChild```和```Sliders```\n\n```ts\nimport { ViewChild } from '@angular/core';\nimport { Slides } from 'ionic-angular';\n\n```\n\n> 然后使用```ionViewWillEnter```在进入页面前改变sliders的```autoplayDisableOnInteraction```属性\n\n```ts\nimport { ViewChild } from '@angular/core';\nimport { Slides } from 'ionic-angular';\n\nclass MyPage {\n  @ViewChild(Slides) slides: Slides;\n\n  ionViewWillEnter() {\n    this.slides.autoplayDisableOnInteraction = false; //禁止slider拖动后autoPlay失效\n  }\n}\n```\n","slug":"2017-04-20-Ionic-sliders-autoplay","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5l000e3cqekw1cmrn4","content":"<h4 id=\"我们先了解一下Ionic的Sliders\"><a href=\"#我们先了解一下Ionic的Sliders\" class=\"headerlink\" title=\"我们先了解一下Ionic的Sliders\"></a>我们先了解一下Ionic的Sliders</h4><blockquote>\n<p>首先Ionic里面的sliders是用<a href=\"http://idangero.us/swiper/api/#.WPhzbPB96Uk\" target=\"_blank\" rel=\"noopener\">Swiper.js</a>的第三方插件实现的, Ionic官方Sliders的文档里面只描述了可以直接写入html标签内的属性, 有很多高级属性是没有写在文档里面的. </p>\n</blockquote>\n<h4 id=\"要怎么改变sliders的其他属性呢\"><a href=\"#要怎么改变sliders的其他属性呢\" class=\"headerlink\" title=\"要怎么改变sliders的其他属性呢?\"></a>要怎么改变sliders的其他属性呢?</h4><blockquote>\n<p>那如果我们要用到Swiper的其他属性怎么办呢? Ionic 2.x 的时候我们是可以在options里面传入的, 但是升级Ionic 3.x.x 后sliders的options属性被移除了. 现在要改变sliders的属性我们要用到sliders类. </p>\n</blockquote>\n<h4 id=\"如何拖动轮播图后不让autoplay失效呢\"><a href=\"#如何拖动轮播图后不让autoplay失效呢\" class=\"headerlink\" title=\"如何拖动轮播图后不让autoplay失效呢?\"></a>如何拖动轮播图后不让autoplay失效呢?</h4><blockquote>\n<p>首先我们要引入<code>viewChild</code>和<code>Sliders</code></p>\n</blockquote>\n<pre><code class=\"ts\">import { ViewChild } from &#39;@angular/core&#39;;\nimport { Slides } from &#39;ionic-angular&#39;;\n</code></pre>\n<blockquote>\n<p>然后使用<code>ionViewWillEnter</code>在进入页面前改变sliders的<code>autoplayDisableOnInteraction</code>属性</p>\n</blockquote>\n<pre><code class=\"ts\">import { ViewChild } from &#39;@angular/core&#39;;\nimport { Slides } from &#39;ionic-angular&#39;;\n\nclass MyPage {\n  @ViewChild(Slides) slides: Slides;\n\n  ionViewWillEnter() {\n    this.slides.autoplayDisableOnInteraction = false; //禁止slider拖动后autoPlay失效\n  }\n}</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"我们先了解一下Ionic的Sliders\"><a href=\"#我们先了解一下Ionic的Sliders\" class=\"headerlink\" title=\"我们先了解一下Ionic的Sliders\"></a>我们先了解一下Ionic的Sliders</h4><blockquote>\n<p>首先Ionic里面的sliders是用<a href=\"http://idangero.us/swiper/api/#.WPhzbPB96Uk\" target=\"_blank\" rel=\"noopener\">Swiper.js</a>的第三方插件实现的, Ionic官方Sliders的文档里面只描述了可以直接写入html标签内的属性, 有很多高级属性是没有写在文档里面的. </p>\n</blockquote>\n<h4 id=\"要怎么改变sliders的其他属性呢\"><a href=\"#要怎么改变sliders的其他属性呢\" class=\"headerlink\" title=\"要怎么改变sliders的其他属性呢?\"></a>要怎么改变sliders的其他属性呢?</h4><blockquote>\n<p>那如果我们要用到Swiper的其他属性怎么办呢? Ionic 2.x 的时候我们是可以在options里面传入的, 但是升级Ionic 3.x.x 后sliders的options属性被移除了. 现在要改变sliders的属性我们要用到sliders类. </p>\n</blockquote>\n<h4 id=\"如何拖动轮播图后不让autoplay失效呢\"><a href=\"#如何拖动轮播图后不让autoplay失效呢\" class=\"headerlink\" title=\"如何拖动轮播图后不让autoplay失效呢?\"></a>如何拖动轮播图后不让autoplay失效呢?</h4><blockquote>\n<p>首先我们要引入<code>viewChild</code>和<code>Sliders</code></p>\n</blockquote>\n<pre><code class=\"ts\">import { ViewChild } from &#39;@angular/core&#39;;\nimport { Slides } from &#39;ionic-angular&#39;;\n</code></pre>\n<blockquote>\n<p>然后使用<code>ionViewWillEnter</code>在进入页面前改变sliders的<code>autoplayDisableOnInteraction</code>属性</p>\n</blockquote>\n<pre><code class=\"ts\">import { ViewChild } from &#39;@angular/core&#39;;\nimport { Slides } from &#39;ionic-angular&#39;;\n\nclass MyPage {\n  @ViewChild(Slides) slides: Slides;\n\n  ionViewWillEnter() {\n    this.slides.autoplayDisableOnInteraction = false; //禁止slider拖动后autoPlay失效\n  }\n}</code></pre>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"IONIC 3 使用sliders轮播时拖动后autoplay失效解决方法","path":"Ionic/ionic-3-使用sliders轮播时拖动后autoplay失效解决方法/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2017-04-19T23:00:00.000Z","pv":0,"totalPV":0,"categories":"Ionic","tags":["Hybird App","Ionic 3","Angular 4"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"IONIC 2 实现首页双击退出APP","abstract":"在ICONIC 2 快速实现双击退出APP的功能","header_image":"/assets/images/ionic2-banner.png","date":"2017-04-23T23:00:00.000Z","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","_content":"\n## 添加绑定值\n> 首先在```app/app.html```下加入```#myNav```, 这个是用于绑定当前页面的导航标签\n\n```html\n <ion-nav #myNav [root]=\"rootPage\"></ion-nav>\n```\n\n## 代码实现\n> 然后在```app.component.ts```做相对的改动\n\n```ts\nimport { Component, ViewChild } from '@angular/core';\nimport { Platform, ToastController, Nav, App } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n\n\n@Component({\n  templateUrl: 'app.html',\n  providers: [SplashScreen, StatusBar]\n})\nexport class MyApp {\n  rootPage = 'TabsPage';\n  backButtonPressed: boolean = false;  //用于判断返回键是否触发\n  @ViewChild('myNav') nav: Nav;\n\n  constructor(public platform: Platform, private splashScreen: SplashScreen, private statusBar: StatusBar, public app: App, public toastCtrl: ToastController) {\n    platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      this.statusBar.styleDefault();\n      this.statusBar.backgroundColorByHexString('#661F22');\n      this.splashScreen.hide();\n      this.registerBackButtonAction(); //运行这个方法绑定返回按钮\n    });\n  }\n\n  registerBackButtonAction() {\n    this.platform.registerBackButtonAction(() => {\n      //如果想点击返回按钮隐藏toast或loading或Overlay就把下面加上\n      // this.ionicApp._toastPortal.getActive() || this.ionicApp._loadingPortal.getActive() || this.ionicApp._overlayPortal.getActive();\n      let nav = this.app.getActiveNav();\n      if (nav.canGoBack()){ //是否已经到了首页\n        nav.pop();\n      }else{\n        this.showExit()\n      }\n    }, 1);\n  }\n\n  //双击退出提示框\n  showExit() {\n    if (this.backButtonPressed) { //当触发标志为true时，即2秒内双击返回按键则退出APP\n      this.platform.exitApp();\n    } else {\n     this.toastCtrl.create({\n      message: '再按一次退出应用',\n      duration: 2000,\n      position: 'middle'\n     }).present();\n     this.backButtonPressed = true;\n     setTimeout(() => this.backButtonPressed = false, 2000);//2秒内没有再次点击返回则将触发标志标记为false\n    }\n  }\n}\n```\n\n\n","source":"_posts/2017-04-24-listen-to-back-button.md","raw":"---\ntitle: \"IONIC 2 实现首页双击退出APP\"\nabstract: 在ICONIC 2 快速实现双击退出APP的功能\nheader_image: /assets/images/ionic2-banner.png\ndate: 2017/04/24\ncategories:\n  - Ionic\ntags:\n  - Ionic 2\n  - Angular 4\n  - Hybird App\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\n---\n\n## 添加绑定值\n> 首先在```app/app.html```下加入```#myNav```, 这个是用于绑定当前页面的导航标签\n\n```html\n <ion-nav #myNav [root]=\"rootPage\"></ion-nav>\n```\n\n## 代码实现\n> 然后在```app.component.ts```做相对的改动\n\n```ts\nimport { Component, ViewChild } from '@angular/core';\nimport { Platform, ToastController, Nav, App } from 'ionic-angular';\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\n\n\n@Component({\n  templateUrl: 'app.html',\n  providers: [SplashScreen, StatusBar]\n})\nexport class MyApp {\n  rootPage = 'TabsPage';\n  backButtonPressed: boolean = false;  //用于判断返回键是否触发\n  @ViewChild('myNav') nav: Nav;\n\n  constructor(public platform: Platform, private splashScreen: SplashScreen, private statusBar: StatusBar, public app: App, public toastCtrl: ToastController) {\n    platform.ready().then(() => {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      this.statusBar.styleDefault();\n      this.statusBar.backgroundColorByHexString('#661F22');\n      this.splashScreen.hide();\n      this.registerBackButtonAction(); //运行这个方法绑定返回按钮\n    });\n  }\n\n  registerBackButtonAction() {\n    this.platform.registerBackButtonAction(() => {\n      //如果想点击返回按钮隐藏toast或loading或Overlay就把下面加上\n      // this.ionicApp._toastPortal.getActive() || this.ionicApp._loadingPortal.getActive() || this.ionicApp._overlayPortal.getActive();\n      let nav = this.app.getActiveNav();\n      if (nav.canGoBack()){ //是否已经到了首页\n        nav.pop();\n      }else{\n        this.showExit()\n      }\n    }, 1);\n  }\n\n  //双击退出提示框\n  showExit() {\n    if (this.backButtonPressed) { //当触发标志为true时，即2秒内双击返回按键则退出APP\n      this.platform.exitApp();\n    } else {\n     this.toastCtrl.create({\n      message: '再按一次退出应用',\n      duration: 2000,\n      position: 'middle'\n     }).present();\n     this.backButtonPressed = true;\n     setTimeout(() => this.backButtonPressed = false, 2000);//2秒内没有再次点击返回则将触发标志标记为false\n    }\n  }\n}\n```\n\n\n","slug":"2017-04-24-listen-to-back-button","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5o000f3cqeosa1oo2m","content":"<h2 id=\"添加绑定值\"><a href=\"#添加绑定值\" class=\"headerlink\" title=\"添加绑定值\"></a>添加绑定值</h2><blockquote>\n<p>首先在<code>app/app.html</code>下加入<code>#myNav</code>, 这个是用于绑定当前页面的导航标签</p>\n</blockquote>\n<pre><code class=\"html\"> &lt;ion-nav #myNav [root]=&quot;rootPage&quot;&gt;&lt;/ion-nav&gt;</code></pre>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><blockquote>\n<p>然后在<code>app.component.ts</code>做相对的改动</p>\n</blockquote>\n<pre><code class=\"ts\">import { Component, ViewChild } from &#39;@angular/core&#39;;\nimport { Platform, ToastController, Nav, App } from &#39;ionic-angular&#39;;\nimport { StatusBar } from &#39;@ionic-native/status-bar&#39;;\nimport { SplashScreen } from &#39;@ionic-native/splash-screen&#39;;\n\n\n@Component({\n  templateUrl: &#39;app.html&#39;,\n  providers: [SplashScreen, StatusBar]\n})\nexport class MyApp {\n  rootPage = &#39;TabsPage&#39;;\n  backButtonPressed: boolean = false;  //用于判断返回键是否触发\n  @ViewChild(&#39;myNav&#39;) nav: Nav;\n\n  constructor(public platform: Platform, private splashScreen: SplashScreen, private statusBar: StatusBar, public app: App, public toastCtrl: ToastController) {\n    platform.ready().then(() =&gt; {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      this.statusBar.styleDefault();\n      this.statusBar.backgroundColorByHexString(&#39;#661F22&#39;);\n      this.splashScreen.hide();\n      this.registerBackButtonAction(); //运行这个方法绑定返回按钮\n    });\n  }\n\n  registerBackButtonAction() {\n    this.platform.registerBackButtonAction(() =&gt; {\n      //如果想点击返回按钮隐藏toast或loading或Overlay就把下面加上\n      // this.ionicApp._toastPortal.getActive() || this.ionicApp._loadingPortal.getActive() || this.ionicApp._overlayPortal.getActive();\n      let nav = this.app.getActiveNav();\n      if (nav.canGoBack()){ //是否已经到了首页\n        nav.pop();\n      }else{\n        this.showExit()\n      }\n    }, 1);\n  }\n\n  //双击退出提示框\n  showExit() {\n    if (this.backButtonPressed) { //当触发标志为true时，即2秒内双击返回按键则退出APP\n      this.platform.exitApp();\n    } else {\n     this.toastCtrl.create({\n      message: &#39;再按一次退出应用&#39;,\n      duration: 2000,\n      position: &#39;middle&#39;\n     }).present();\n     this.backButtonPressed = true;\n     setTimeout(() =&gt; this.backButtonPressed = false, 2000);//2秒内没有再次点击返回则将触发标志标记为false\n    }\n  }\n}</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加绑定值\"><a href=\"#添加绑定值\" class=\"headerlink\" title=\"添加绑定值\"></a>添加绑定值</h2><blockquote>\n<p>首先在<code>app/app.html</code>下加入<code>#myNav</code>, 这个是用于绑定当前页面的导航标签</p>\n</blockquote>\n<pre><code class=\"html\"> &lt;ion-nav #myNav [root]=&quot;rootPage&quot;&gt;&lt;/ion-nav&gt;</code></pre>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><blockquote>\n<p>然后在<code>app.component.ts</code>做相对的改动</p>\n</blockquote>\n<pre><code class=\"ts\">import { Component, ViewChild } from &#39;@angular/core&#39;;\nimport { Platform, ToastController, Nav, App } from &#39;ionic-angular&#39;;\nimport { StatusBar } from &#39;@ionic-native/status-bar&#39;;\nimport { SplashScreen } from &#39;@ionic-native/splash-screen&#39;;\n\n\n@Component({\n  templateUrl: &#39;app.html&#39;,\n  providers: [SplashScreen, StatusBar]\n})\nexport class MyApp {\n  rootPage = &#39;TabsPage&#39;;\n  backButtonPressed: boolean = false;  //用于判断返回键是否触发\n  @ViewChild(&#39;myNav&#39;) nav: Nav;\n\n  constructor(public platform: Platform, private splashScreen: SplashScreen, private statusBar: StatusBar, public app: App, public toastCtrl: ToastController) {\n    platform.ready().then(() =&gt; {\n      // Okay, so the platform is ready and our plugins are available.\n      // Here you can do any higher level native things you might need.\n      this.statusBar.styleDefault();\n      this.statusBar.backgroundColorByHexString(&#39;#661F22&#39;);\n      this.splashScreen.hide();\n      this.registerBackButtonAction(); //运行这个方法绑定返回按钮\n    });\n  }\n\n  registerBackButtonAction() {\n    this.platform.registerBackButtonAction(() =&gt; {\n      //如果想点击返回按钮隐藏toast或loading或Overlay就把下面加上\n      // this.ionicApp._toastPortal.getActive() || this.ionicApp._loadingPortal.getActive() || this.ionicApp._overlayPortal.getActive();\n      let nav = this.app.getActiveNav();\n      if (nav.canGoBack()){ //是否已经到了首页\n        nav.pop();\n      }else{\n        this.showExit()\n      }\n    }, 1);\n  }\n\n  //双击退出提示框\n  showExit() {\n    if (this.backButtonPressed) { //当触发标志为true时，即2秒内双击返回按键则退出APP\n      this.platform.exitApp();\n    } else {\n     this.toastCtrl.create({\n      message: &#39;再按一次退出应用&#39;,\n      duration: 2000,\n      position: &#39;middle&#39;\n     }).present();\n     this.backButtonPressed = true;\n     setTimeout(() =&gt; this.backButtonPressed = false, 2000);//2秒内没有再次点击返回则将触发标志标记为false\n    }\n  }\n}</code></pre>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"IONIC 2 实现首页双击退出APP","path":"Ionic/ionic-2-实现首页双击退出app/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2017-04-23T23:00:00.000Z","pv":0,"totalPV":0,"categories":"Ionic","tags":["Ionic 2","Hybird App","Angular 4"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"IONIC 2 升级 3 教程","abstract":"这一次的升级Ionic 3 换成了使用最新的Angular 4.0, 最新的TypeScript, 添加了懒加载和修复了一些组件的bug.","header_image":"/assets/images/ionic2-banner.png","date":"2017-04-09T23:00:00.000Z","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","_content":"\n## 升级步骤\n\n> 这一次的升级Ionic 3 换成了使用最新的Angular 4.0, 最新的TypeScript, 添加了懒加载和修复了一些组件的bug.\n\n1. 首先更新```package.json```, 按照以下的代码相应替换你package.json里面的代码, 并且把你项目根目录下的```node_modules```文件夹删除掉, 然后运行```npm install``` (如果你是用淘宝镜像可以运行 ```cnpm install```)\n\n```json\n\"dependencies\": {\n    \"@angular/common\": \"4.0.0\",\n    \"@angular/compiler\": \"4.0.0\",\n    \"@angular/compiler-cli\": \"4.0.0\",\n    \"@angular/core\": \"4.0.0\",\n    \"@angular/forms\": \"4.0.0\",\n    \"@angular/http\": \"4.0.0\",\n    \"@angular/platform-browser\": \"4.0.0\",\n    \"@angular/platform-browser-dynamic\": \"4.0.0\",\n    \"@ionic-native/core\": \"3.4.2\",\n    \"@ionic-native/splash-screen\": \"3.4.2\",\n    \"@ionic-native/status-bar\": \"3.4.2\",\n    \"@ionic/storage\": \"2.0.1\",\n    \"ionic-angular\": \"3.0.1\",\n    \"ionicons\": \"3.0.0\",\n    \"rxjs\": \"5.1.1\",\n    \"sw-toolbox\": \"3.4.0\",\n    \"zone.js\": \"^0.8.4\"\n},\n\"devDependencies\": {\n  \"@ionic/app-scripts\": \"1.3.0\",\n  \"typescript\": \"~2.2.1\"\n}\n```\n\n2. 第二步你需要在```app/app.module.ts```文件里面引入```BrowserModule```和```HttpModule```\n\n> 首先需要在头部引入这两个module (如果你的APP不使用HTTP可以不引入```HttpModule```)\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\n```\n\n> 在同一个文件里面找到```imports```并且加入```BrowserModule```和```HttpModule```\n\n```typescript\nimports: [\n  BrowserModule,\n  HttpModule,\n  IonicModule.forRoot(MyApp)\n],\n```\n\n3. 如果你升级到 Ionic Native 3.x, 就是CLI3. 使用 Ionic Native 3.x的话, APP打包出来会更小. 因为Ionic Native的原生插件都不自带有了, 你使用一个就要安装一个. 如果你原有的Ionic 2 项目有引入原生插件, 你就要做以下操作.\n\n> 这里用```Camera```和```Geolocation```这个两个原生插件作为例子, 你其他的插件都需要使用相同的方式做修改\n\n> 注意您使用的所有插件都必须要在```app/app.module.ts```里面先引用了, 而且要在```app/app.modules.ts```里面的providers里面声明, 如果没有这样配置就会出现```No provider for XXXXX```这样的报错了!\n\n#### Camera插件\n\n```typescript\n// 在app/app.module.ts文件里面\nimport { Camera } from '@ionic-native/camera';\n\n...\n\n@NgModule({\n  ...\n\n  providers: [\n    ...\n    Camera\n    ...\n  ]\n  ...\n})\nexport class AppModule { }\n```\n\n#### Geolocation插件\n\n```typescript\n// 在app/app.module.ts文件里面\nimport { Geolocation } from '@ionic-native/geolocation';\nimport { Platform } from 'ionic-angular';\n\nimport { NgZone } from '@angular/core';\n\n@Component({ ... })\nexport class MyComponent {\n\n  constructor(private geolocation: Geolocation, private platform: Platform, private ngZone: NgZone) {\n\n    platform.ready().then(() => {\n\n      // get position\n      geolocation.getCurrentPosition().then(pos => {\n\n        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)\n\n      });\n\n\n      // watch position\n      const watch = geolocation.watchPosition().subscribe(pos => {\n\n        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)\n\n        // Currently, observables from Ionic Native plugins\n        // need to run inside of zone to trigger change detection\n        ngZone.run(() => {\n          this.position = pos;\n        })\n\n      });\n\n      // to stop watching\n      watch.unsubscribe();\n\n    });\n\n  }\n\n}\n```\n\n> 更详细的文档可以参考官方的修改日记 https://github.com/driftyco/ionic-native/blob/master/README.md\n\n## 组件`Component`更变\n\n#### 新网格\n\n> 旧的网格体系已经废除, 新的网格组件请参考官方文档 http://blog.ionic.io/build-awesome-desktop-apps-with-ionics-new-responsive-grid/\n\n#### 标签的`color`属性更变\n\n> 以下标签的```color```属性在新的版本里面会不起效果了, 现在必须要使用```ion-text```才会起效果, 详细说明请看官方文档 http://ionicframework.com/docs/api/components/typography/Typography/\n\n```css\nh1[color], h2[color], h3[color], h4[color], h5[color], h6[color], a[color]:not([ion-button]):not([ion-item]):not([ion-fab]), p[color], span[color], b[color], i[color], strong[color], em[color], small[color], sub[color], sup[color]\n```\n\n#### Slides组件更变\n\n> 以下的Slides属性和方法已经正式在新版本里面移除了\n\n+ Slides的input的```options```属性已经废除, 请使用标签的属性;\n+ Slide的事件```ionWillChange```方法已经废除, 请使用```ionSlideWillChange```;\n+ Slide的事件```ionDidChange```方法已经废除, 请使用```ionSlideDidChange```;\n+ Slide的事件```ionDrag```方法已经废除, 请使用```ionSlideDrag```;\n+ Slides的```getSlider()```方法已经废除, 请使用```ion-slides```实例;\n\n","source":"_posts/2017-4-10-Ionic3-upgrade-guide.md","raw":"---\ntitle: \"IONIC 2 升级 3 教程\"\nabstract: 这一次的升级Ionic 3 换成了使用最新的Angular 4.0, 最新的TypeScript, 添加了懒加载和修复了一些组件的bug.\nheader_image: /assets/images/ionic2-banner.png\ndate: 2017/04/10\ncategories:\n  - Ionic\ntags:\n  - Ionic 3\n  - Angular 4\n  - Hybird App\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\n---\n\n## 升级步骤\n\n> 这一次的升级Ionic 3 换成了使用最新的Angular 4.0, 最新的TypeScript, 添加了懒加载和修复了一些组件的bug.\n\n1. 首先更新```package.json```, 按照以下的代码相应替换你package.json里面的代码, 并且把你项目根目录下的```node_modules```文件夹删除掉, 然后运行```npm install``` (如果你是用淘宝镜像可以运行 ```cnpm install```)\n\n```json\n\"dependencies\": {\n    \"@angular/common\": \"4.0.0\",\n    \"@angular/compiler\": \"4.0.0\",\n    \"@angular/compiler-cli\": \"4.0.0\",\n    \"@angular/core\": \"4.0.0\",\n    \"@angular/forms\": \"4.0.0\",\n    \"@angular/http\": \"4.0.0\",\n    \"@angular/platform-browser\": \"4.0.0\",\n    \"@angular/platform-browser-dynamic\": \"4.0.0\",\n    \"@ionic-native/core\": \"3.4.2\",\n    \"@ionic-native/splash-screen\": \"3.4.2\",\n    \"@ionic-native/status-bar\": \"3.4.2\",\n    \"@ionic/storage\": \"2.0.1\",\n    \"ionic-angular\": \"3.0.1\",\n    \"ionicons\": \"3.0.0\",\n    \"rxjs\": \"5.1.1\",\n    \"sw-toolbox\": \"3.4.0\",\n    \"zone.js\": \"^0.8.4\"\n},\n\"devDependencies\": {\n  \"@ionic/app-scripts\": \"1.3.0\",\n  \"typescript\": \"~2.2.1\"\n}\n```\n\n2. 第二步你需要在```app/app.module.ts```文件里面引入```BrowserModule```和```HttpModule```\n\n> 首先需要在头部引入这两个module (如果你的APP不使用HTTP可以不引入```HttpModule```)\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\n```\n\n> 在同一个文件里面找到```imports```并且加入```BrowserModule```和```HttpModule```\n\n```typescript\nimports: [\n  BrowserModule,\n  HttpModule,\n  IonicModule.forRoot(MyApp)\n],\n```\n\n3. 如果你升级到 Ionic Native 3.x, 就是CLI3. 使用 Ionic Native 3.x的话, APP打包出来会更小. 因为Ionic Native的原生插件都不自带有了, 你使用一个就要安装一个. 如果你原有的Ionic 2 项目有引入原生插件, 你就要做以下操作.\n\n> 这里用```Camera```和```Geolocation```这个两个原生插件作为例子, 你其他的插件都需要使用相同的方式做修改\n\n> 注意您使用的所有插件都必须要在```app/app.module.ts```里面先引用了, 而且要在```app/app.modules.ts```里面的providers里面声明, 如果没有这样配置就会出现```No provider for XXXXX```这样的报错了!\n\n#### Camera插件\n\n```typescript\n// 在app/app.module.ts文件里面\nimport { Camera } from '@ionic-native/camera';\n\n...\n\n@NgModule({\n  ...\n\n  providers: [\n    ...\n    Camera\n    ...\n  ]\n  ...\n})\nexport class AppModule { }\n```\n\n#### Geolocation插件\n\n```typescript\n// 在app/app.module.ts文件里面\nimport { Geolocation } from '@ionic-native/geolocation';\nimport { Platform } from 'ionic-angular';\n\nimport { NgZone } from '@angular/core';\n\n@Component({ ... })\nexport class MyComponent {\n\n  constructor(private geolocation: Geolocation, private platform: Platform, private ngZone: NgZone) {\n\n    platform.ready().then(() => {\n\n      // get position\n      geolocation.getCurrentPosition().then(pos => {\n\n        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)\n\n      });\n\n\n      // watch position\n      const watch = geolocation.watchPosition().subscribe(pos => {\n\n        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)\n\n        // Currently, observables from Ionic Native plugins\n        // need to run inside of zone to trigger change detection\n        ngZone.run(() => {\n          this.position = pos;\n        })\n\n      });\n\n      // to stop watching\n      watch.unsubscribe();\n\n    });\n\n  }\n\n}\n```\n\n> 更详细的文档可以参考官方的修改日记 https://github.com/driftyco/ionic-native/blob/master/README.md\n\n## 组件`Component`更变\n\n#### 新网格\n\n> 旧的网格体系已经废除, 新的网格组件请参考官方文档 http://blog.ionic.io/build-awesome-desktop-apps-with-ionics-new-responsive-grid/\n\n#### 标签的`color`属性更变\n\n> 以下标签的```color```属性在新的版本里面会不起效果了, 现在必须要使用```ion-text```才会起效果, 详细说明请看官方文档 http://ionicframework.com/docs/api/components/typography/Typography/\n\n```css\nh1[color], h2[color], h3[color], h4[color], h5[color], h6[color], a[color]:not([ion-button]):not([ion-item]):not([ion-fab]), p[color], span[color], b[color], i[color], strong[color], em[color], small[color], sub[color], sup[color]\n```\n\n#### Slides组件更变\n\n> 以下的Slides属性和方法已经正式在新版本里面移除了\n\n+ Slides的input的```options```属性已经废除, 请使用标签的属性;\n+ Slide的事件```ionWillChange```方法已经废除, 请使用```ionSlideWillChange```;\n+ Slide的事件```ionDidChange```方法已经废除, 请使用```ionSlideDidChange```;\n+ Slide的事件```ionDrag```方法已经废除, 请使用```ionSlideDrag```;\n+ Slides的```getSlider()```方法已经废除, 请使用```ion-slides```实例;\n\n","slug":"2017-4-10-Ionic3-upgrade-guide","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5s000i3cqe2qem7wu3","content":"<h2 id=\"升级步骤\"><a href=\"#升级步骤\" class=\"headerlink\" title=\"升级步骤\"></a>升级步骤</h2><blockquote>\n<p>这一次的升级Ionic 3 换成了使用最新的Angular 4.0, 最新的TypeScript, 添加了懒加载和修复了一些组件的bug.</p>\n</blockquote>\n<ol>\n<li>首先更新<code>package.json</code>, 按照以下的代码相应替换你package.json里面的代码, 并且把你项目根目录下的<code>node_modules</code>文件夹删除掉, 然后运行<code>npm install</code> (如果你是用淘宝镜像可以运行 <code>cnpm install</code>)</li>\n</ol>\n<pre><code class=\"json\">&quot;dependencies&quot;: {\n    &quot;@angular/common&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/compiler&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/compiler-cli&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/core&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/forms&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/http&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/platform-browser&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/platform-browser-dynamic&quot;: &quot;4.0.0&quot;,\n    &quot;@ionic-native/core&quot;: &quot;3.4.2&quot;,\n    &quot;@ionic-native/splash-screen&quot;: &quot;3.4.2&quot;,\n    &quot;@ionic-native/status-bar&quot;: &quot;3.4.2&quot;,\n    &quot;@ionic/storage&quot;: &quot;2.0.1&quot;,\n    &quot;ionic-angular&quot;: &quot;3.0.1&quot;,\n    &quot;ionicons&quot;: &quot;3.0.0&quot;,\n    &quot;rxjs&quot;: &quot;5.1.1&quot;,\n    &quot;sw-toolbox&quot;: &quot;3.4.0&quot;,\n    &quot;zone.js&quot;: &quot;^0.8.4&quot;\n},\n&quot;devDependencies&quot;: {\n  &quot;@ionic/app-scripts&quot;: &quot;1.3.0&quot;,\n  &quot;typescript&quot;: &quot;~2.2.1&quot;\n}</code></pre>\n<ol start=\"2\">\n<li>第二步你需要在<code>app/app.module.ts</code>文件里面引入<code>BrowserModule</code>和<code>HttpModule</code></li>\n</ol>\n<blockquote>\n<p>首先需要在头部引入这两个module (如果你的APP不使用HTTP可以不引入<code>HttpModule</code>)</p>\n</blockquote>\n<pre><code class=\"typescript\">import { BrowserModule } from &#39;@angular/platform-browser&#39;;\nimport { HttpModule } from &#39;@angular/http&#39;;</code></pre>\n<blockquote>\n<p>在同一个文件里面找到<code>imports</code>并且加入<code>BrowserModule</code>和<code>HttpModule</code></p>\n</blockquote>\n<pre><code class=\"typescript\">imports: [\n  BrowserModule,\n  HttpModule,\n  IonicModule.forRoot(MyApp)\n],</code></pre>\n<ol start=\"3\">\n<li>如果你升级到 Ionic Native 3.x, 就是CLI3. 使用 Ionic Native 3.x的话, APP打包出来会更小. 因为Ionic Native的原生插件都不自带有了, 你使用一个就要安装一个. 如果你原有的Ionic 2 项目有引入原生插件, 你就要做以下操作.</li>\n</ol>\n<blockquote>\n<p>这里用<code>Camera</code>和<code>Geolocation</code>这个两个原生插件作为例子, 你其他的插件都需要使用相同的方式做修改</p>\n</blockquote>\n<blockquote>\n<p>注意您使用的所有插件都必须要在<code>app/app.module.ts</code>里面先引用了, 而且要在<code>app/app.modules.ts</code>里面的providers里面声明, 如果没有这样配置就会出现<code>No provider for XXXXX</code>这样的报错了!</p>\n</blockquote>\n<h4 id=\"Camera插件\"><a href=\"#Camera插件\" class=\"headerlink\" title=\"Camera插件\"></a>Camera插件</h4><pre><code class=\"typescript\">// 在app/app.module.ts文件里面\nimport { Camera } from &#39;@ionic-native/camera&#39;;\n\n...\n\n@NgModule({\n  ...\n\n  providers: [\n    ...\n    Camera\n    ...\n  ]\n  ...\n})\nexport class AppModule { }</code></pre>\n<h4 id=\"Geolocation插件\"><a href=\"#Geolocation插件\" class=\"headerlink\" title=\"Geolocation插件\"></a>Geolocation插件</h4><pre><code class=\"typescript\">// 在app/app.module.ts文件里面\nimport { Geolocation } from &#39;@ionic-native/geolocation&#39;;\nimport { Platform } from &#39;ionic-angular&#39;;\n\nimport { NgZone } from &#39;@angular/core&#39;;\n\n@Component({ ... })\nexport class MyComponent {\n\n  constructor(private geolocation: Geolocation, private platform: Platform, private ngZone: NgZone) {\n\n    platform.ready().then(() =&gt; {\n\n      // get position\n      geolocation.getCurrentPosition().then(pos =&gt; {\n\n        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)\n\n      });\n\n\n      // watch position\n      const watch = geolocation.watchPosition().subscribe(pos =&gt; {\n\n        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)\n\n        // Currently, observables from Ionic Native plugins\n        // need to run inside of zone to trigger change detection\n        ngZone.run(() =&gt; {\n          this.position = pos;\n        })\n\n      });\n\n      // to stop watching\n      watch.unsubscribe();\n\n    });\n\n  }\n\n}</code></pre>\n<blockquote>\n<p>更详细的文档可以参考官方的修改日记 <a href=\"https://github.com/driftyco/ionic-native/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/driftyco/ionic-native/blob/master/README.md</a></p>\n</blockquote>\n<h2 id=\"组件Component更变\"><a href=\"#组件Component更变\" class=\"headerlink\" title=\"组件Component更变\"></a>组件<code>Component</code>更变</h2><h4 id=\"新网格\"><a href=\"#新网格\" class=\"headerlink\" title=\"新网格\"></a>新网格</h4><blockquote>\n<p>旧的网格体系已经废除, 新的网格组件请参考官方文档 <a href=\"http://blog.ionic.io/build-awesome-desktop-apps-with-ionics-new-responsive-grid/\" target=\"_blank\" rel=\"noopener\">http://blog.ionic.io/build-awesome-desktop-apps-with-ionics-new-responsive-grid/</a></p>\n</blockquote>\n<h4 id=\"标签的color属性更变\"><a href=\"#标签的color属性更变\" class=\"headerlink\" title=\"标签的color属性更变\"></a>标签的<code>color</code>属性更变</h4><blockquote>\n<p>以下标签的<code>color</code>属性在新的版本里面会不起效果了, 现在必须要使用<code>ion-text</code>才会起效果, 详细说明请看官方文档 <a href=\"http://ionicframework.com/docs/api/components/typography/Typography/\" target=\"_blank\" rel=\"noopener\">http://ionicframework.com/docs/api/components/typography/Typography/</a></p>\n</blockquote>\n<pre><code class=\"css\">h1[color], h2[color], h3[color], h4[color], h5[color], h6[color], a[color]:not([ion-button]):not([ion-item]):not([ion-fab]), p[color], span[color], b[color], i[color], strong[color], em[color], small[color], sub[color], sup[color]</code></pre>\n<h4 id=\"Slides组件更变\"><a href=\"#Slides组件更变\" class=\"headerlink\" title=\"Slides组件更变\"></a>Slides组件更变</h4><blockquote>\n<p>以下的Slides属性和方法已经正式在新版本里面移除了</p>\n</blockquote>\n<ul>\n<li>Slides的input的<code>options</code>属性已经废除, 请使用标签的属性;</li>\n<li>Slide的事件<code>ionWillChange</code>方法已经废除, 请使用<code>ionSlideWillChange</code>;</li>\n<li>Slide的事件<code>ionDidChange</code>方法已经废除, 请使用<code>ionSlideDidChange</code>;</li>\n<li>Slide的事件<code>ionDrag</code>方法已经废除, 请使用<code>ionSlideDrag</code>;</li>\n<li>Slides的<code>getSlider()</code>方法已经废除, 请使用<code>ion-slides</code>实例;</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"升级步骤\"><a href=\"#升级步骤\" class=\"headerlink\" title=\"升级步骤\"></a>升级步骤</h2><blockquote>\n<p>这一次的升级Ionic 3 换成了使用最新的Angular 4.0, 最新的TypeScript, 添加了懒加载和修复了一些组件的bug.</p>\n</blockquote>\n<ol>\n<li>首先更新<code>package.json</code>, 按照以下的代码相应替换你package.json里面的代码, 并且把你项目根目录下的<code>node_modules</code>文件夹删除掉, 然后运行<code>npm install</code> (如果你是用淘宝镜像可以运行 <code>cnpm install</code>)</li>\n</ol>\n<pre><code class=\"json\">&quot;dependencies&quot;: {\n    &quot;@angular/common&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/compiler&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/compiler-cli&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/core&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/forms&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/http&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/platform-browser&quot;: &quot;4.0.0&quot;,\n    &quot;@angular/platform-browser-dynamic&quot;: &quot;4.0.0&quot;,\n    &quot;@ionic-native/core&quot;: &quot;3.4.2&quot;,\n    &quot;@ionic-native/splash-screen&quot;: &quot;3.4.2&quot;,\n    &quot;@ionic-native/status-bar&quot;: &quot;3.4.2&quot;,\n    &quot;@ionic/storage&quot;: &quot;2.0.1&quot;,\n    &quot;ionic-angular&quot;: &quot;3.0.1&quot;,\n    &quot;ionicons&quot;: &quot;3.0.0&quot;,\n    &quot;rxjs&quot;: &quot;5.1.1&quot;,\n    &quot;sw-toolbox&quot;: &quot;3.4.0&quot;,\n    &quot;zone.js&quot;: &quot;^0.8.4&quot;\n},\n&quot;devDependencies&quot;: {\n  &quot;@ionic/app-scripts&quot;: &quot;1.3.0&quot;,\n  &quot;typescript&quot;: &quot;~2.2.1&quot;\n}</code></pre>\n<ol start=\"2\">\n<li>第二步你需要在<code>app/app.module.ts</code>文件里面引入<code>BrowserModule</code>和<code>HttpModule</code></li>\n</ol>\n<blockquote>\n<p>首先需要在头部引入这两个module (如果你的APP不使用HTTP可以不引入<code>HttpModule</code>)</p>\n</blockquote>\n<pre><code class=\"typescript\">import { BrowserModule } from &#39;@angular/platform-browser&#39;;\nimport { HttpModule } from &#39;@angular/http&#39;;</code></pre>\n<blockquote>\n<p>在同一个文件里面找到<code>imports</code>并且加入<code>BrowserModule</code>和<code>HttpModule</code></p>\n</blockquote>\n<pre><code class=\"typescript\">imports: [\n  BrowserModule,\n  HttpModule,\n  IonicModule.forRoot(MyApp)\n],</code></pre>\n<ol start=\"3\">\n<li>如果你升级到 Ionic Native 3.x, 就是CLI3. 使用 Ionic Native 3.x的话, APP打包出来会更小. 因为Ionic Native的原生插件都不自带有了, 你使用一个就要安装一个. 如果你原有的Ionic 2 项目有引入原生插件, 你就要做以下操作.</li>\n</ol>\n<blockquote>\n<p>这里用<code>Camera</code>和<code>Geolocation</code>这个两个原生插件作为例子, 你其他的插件都需要使用相同的方式做修改</p>\n</blockquote>\n<blockquote>\n<p>注意您使用的所有插件都必须要在<code>app/app.module.ts</code>里面先引用了, 而且要在<code>app/app.modules.ts</code>里面的providers里面声明, 如果没有这样配置就会出现<code>No provider for XXXXX</code>这样的报错了!</p>\n</blockquote>\n<h4 id=\"Camera插件\"><a href=\"#Camera插件\" class=\"headerlink\" title=\"Camera插件\"></a>Camera插件</h4><pre><code class=\"typescript\">// 在app/app.module.ts文件里面\nimport { Camera } from &#39;@ionic-native/camera&#39;;\n\n...\n\n@NgModule({\n  ...\n\n  providers: [\n    ...\n    Camera\n    ...\n  ]\n  ...\n})\nexport class AppModule { }</code></pre>\n<h4 id=\"Geolocation插件\"><a href=\"#Geolocation插件\" class=\"headerlink\" title=\"Geolocation插件\"></a>Geolocation插件</h4><pre><code class=\"typescript\">// 在app/app.module.ts文件里面\nimport { Geolocation } from &#39;@ionic-native/geolocation&#39;;\nimport { Platform } from &#39;ionic-angular&#39;;\n\nimport { NgZone } from &#39;@angular/core&#39;;\n\n@Component({ ... })\nexport class MyComponent {\n\n  constructor(private geolocation: Geolocation, private platform: Platform, private ngZone: NgZone) {\n\n    platform.ready().then(() =&gt; {\n\n      // get position\n      geolocation.getCurrentPosition().then(pos =&gt; {\n\n        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)\n\n      });\n\n\n      // watch position\n      const watch = geolocation.watchPosition().subscribe(pos =&gt; {\n\n        console.log(`lat: ${pos.coords.latitude}, lon: ${pos.coords.longitude}`)\n\n        // Currently, observables from Ionic Native plugins\n        // need to run inside of zone to trigger change detection\n        ngZone.run(() =&gt; {\n          this.position = pos;\n        })\n\n      });\n\n      // to stop watching\n      watch.unsubscribe();\n\n    });\n\n  }\n\n}</code></pre>\n<blockquote>\n<p>更详细的文档可以参考官方的修改日记 <a href=\"https://github.com/driftyco/ionic-native/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/driftyco/ionic-native/blob/master/README.md</a></p>\n</blockquote>\n<h2 id=\"组件Component更变\"><a href=\"#组件Component更变\" class=\"headerlink\" title=\"组件Component更变\"></a>组件<code>Component</code>更变</h2><h4 id=\"新网格\"><a href=\"#新网格\" class=\"headerlink\" title=\"新网格\"></a>新网格</h4><blockquote>\n<p>旧的网格体系已经废除, 新的网格组件请参考官方文档 <a href=\"http://blog.ionic.io/build-awesome-desktop-apps-with-ionics-new-responsive-grid/\" target=\"_blank\" rel=\"noopener\">http://blog.ionic.io/build-awesome-desktop-apps-with-ionics-new-responsive-grid/</a></p>\n</blockquote>\n<h4 id=\"标签的color属性更变\"><a href=\"#标签的color属性更变\" class=\"headerlink\" title=\"标签的color属性更变\"></a>标签的<code>color</code>属性更变</h4><blockquote>\n<p>以下标签的<code>color</code>属性在新的版本里面会不起效果了, 现在必须要使用<code>ion-text</code>才会起效果, 详细说明请看官方文档 <a href=\"http://ionicframework.com/docs/api/components/typography/Typography/\" target=\"_blank\" rel=\"noopener\">http://ionicframework.com/docs/api/components/typography/Typography/</a></p>\n</blockquote>\n<pre><code class=\"css\">h1[color], h2[color], h3[color], h4[color], h5[color], h6[color], a[color]:not([ion-button]):not([ion-item]):not([ion-fab]), p[color], span[color], b[color], i[color], strong[color], em[color], small[color], sub[color], sup[color]</code></pre>\n<h4 id=\"Slides组件更变\"><a href=\"#Slides组件更变\" class=\"headerlink\" title=\"Slides组件更变\"></a>Slides组件更变</h4><blockquote>\n<p>以下的Slides属性和方法已经正式在新版本里面移除了</p>\n</blockquote>\n<ul>\n<li>Slides的input的<code>options</code>属性已经废除, 请使用标签的属性;</li>\n<li>Slide的事件<code>ionWillChange</code>方法已经废除, 请使用<code>ionSlideWillChange</code>;</li>\n<li>Slide的事件<code>ionDidChange</code>方法已经废除, 请使用<code>ionSlideDidChange</code>;</li>\n<li>Slide的事件<code>ionDrag</code>方法已经废除, 请使用<code>ionSlideDrag</code>;</li>\n<li>Slides的<code>getSlider()</code>方法已经废除, 请使用<code>ion-slides</code>实例;</li>\n</ul>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"IONIC 2 升级 3 教程","path":"Ionic/ionic-2-升级-3-教程/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2017-04-09T23:00:00.000Z","pv":0,"totalPV":0,"categories":"Ionic","tags":["Hybird App","Ionic 3","Angular 4"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Stock-Tank mesh construction using OpenSCAD","abstract":"Constructing OpenFOAM meshes with blockMesh utility can get really tricky, that's  why I prefer to create geometry STL models with OpenSCAD first and then mesh them.","header_image":"/assets/images/ionic2-banner.png","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","date":"2018-06-30T23:00:00.000Z","_content":"\nThis post is part of a longer collection:\n* [OpenSCAD 101: Basics of the OpenSCAD language](/openscad-basics/)\n* [OpenSCAD Transformations & Boolean Ops](/openscad-transformations-boolean-operations/)\n* [OpenSCAD CFD-oriented Usage Examples](/openscad-cfd-usage-examples/)\n\nIt features a very simple, quick and efficient way of constructing a (2D) stock-tank geometry and similar shapes using **OpenSCAD**.\n\n\n\nThe main reason I present this way of thinking here is that I don't think `blockMesh` is quite the right tool for such tasks; even when used with a powerful macro language, like *m4*.\n\nWell, there are a couple of things I expect you to be proficient in:\n* A decent text editor should be used (I'm using VIM) to edit OpenSCAD scripts:  It's good to have something that allows for quick basic calculations to be inserted,  or at least, provide access to the shell.\n* Basic Knowledge of some interpreted languages (Python, Lua, Ruby ... etc, pick the one you like, I usually use Python): They are great to test ideas quickly.\n\nAs an example mesh, we will be creating the one presented in the following\nfigure:\n\n![Sketch of desired OpenSCAD model](/assets/img/OpenSCAD/tank-model-sketch.png)\n\nOf course, model dimensions don't matter because the goal is to create a parametric one.\n\n# A one time deal: Hard code everything in OpenSCAD scripts!\n\nConstructing the stock-tank model point-by-point is not as hard as you might think:\n\n1. Create **points** and **paths** vectors (if necessary) using your text editor.\n2. Run `linear_extrude` on resulting polygon.\n\nThe first step strongly depends on used text editor; In VIM,  I have this awesome vim command defined in my *.vimrc* file:\n\n~~~vim\ncommand! -nargs=+ Calc :read !python -c \"from math import *;\n            \\ import numpy as np;\n            \\ np.set_printoptions(precision=4);\n            \\ <args>\"\n~~~\n\nWhich allows me to run Python code directly via VIM (imports are kind of important here).\n\nIf, for example, I need a set of points to define an \"arc\" of **radius = 1** between `[10,1]` and `[12,1]` points,\nI only need to issue the following VIM command while editing the SCAD script:\n\n\n~~~vim\n:Calc l=np.linspace(10,12,10); m=np.mat([l,1+np.sqrt(1-(l-11)**2)]); print(m.transpose().tolist())\n~~~\n\nWhich will insert all points into the current file (actually, the print command is the one responsible for this). `linear_extrude`'s default `paths` vector is usually fine.\n\n## Is it a bad idea to do things this way?\n\n\nYes, it is. These tricks may work if one only needs to prototype something, or if one desires to check whether an idea is good enough to be implemented!  But they fail badly in real situations, where users absolutely have to create a parametric model.\n\nFortunately, similar tricks often suggest possible approaches to the task at hand: Notice that we used Python's **list comprehensions** to create *numpy* vectors; So, why not using **OpenSCAD list comprehensions** to create OpenSCAD vectors?\n\n# Parametric design of a stock tank\n\n## Better than hard-coding points, but still not an optimal approach\n\nInstead of relying on the power of a text editor, it might be a good idea to use list comprehensions to build needed points. Here's a complete OpenSCAD script explaining the situation:\n\n~~~clike\n// Points of the lower arc:\n// half-a-circle, radius = 1, between [10,1] and [12,1]\n// which means center is [11,1]\nlist1 = [ for (i = [10 : 0.1 : 12]) [i, 1+sqrt(1-pow((i-11),2))] ];\n// Points of the upper arc\n// half-a-circle, radius = 2, between [9,1] and [13,1]\n// which means center is [11,1]\nlist2 = [ for (i = [13 : -0.1 : 9]) [i, 1+sqrt(4-pow((i-11),2))] ];\n// Repeating code, --> consider a function\n\n// polygon points, just some concatenated lists\npoints = concat(\n    [[0,0], [10,0]],\n    list1,\n    [[12, -3], [13, -3]],\n    list2,\n    [[8,1], [8,8], [4,8], [4,4], [3,4], [3,6], [0,6]]\n    );  \n\n// Default behavior of polygon module\npaths = [ for (i = [0 : 1 : len(points)-1]) i ];\n\n// The actual 3D model\nlinear_extrude(2,[0,0]) polygon(points, [paths]);\n~~~\n\n\nThis is certainly a better approach, but we still need to do some adjustments for easier parameterization: Let's define an (object) module to create the boxes-like portion of our model.\n\n## Using modules to construct parametric geometries\n\n\n~~~clike\n/*\n    Create an object model called tank.\n    Parameters:\n    - w: Base width, to interface with the \"arc-y region\", default=1.\n    - tbh: Total Box height, defaults to 10.\n    - pbl: A list of partial box lengths, defaults to [6,4]\n    - pbw: A list of partial box \"widths\", default = [3,1]\n    - st: Translate partial boxes in x-direction, defaults to [0,3]\n*/\nmodule tank (w=1, tbh=10, pbl=[6,4],pbw=[3,1],st=[0,3]) {\n        // create a parent cube, and subtruct all following objects\n        // You can also build this region box-by-box    \n        difference () {\n        \n        \t// parent cube\n        \tcube([tbh,tbh,2]);\n        \n        \t// A special box, allows for better connection with the arc.\n        \ttranslate([tbh-2*w,w,-0.01]) cube([2.001,tbh+0.01,3]);\n        \n        \t// A set of helper boxes to create desired shape.\n        \tfor (i=[0:len(pbl)-1]) translate([st[i]-0.01,pbl[i]-0.01,-0.01]) \n            \tcube([pbw[i]+0.001,tbh,3]);\n        }   \n}\n~~~\n\nWe can also define our own module to create arcs:\n\n~~~clike\n/*\n    Create module named arc.\n    Parameters:\n    - r: inner radius, default=1.\n    - w: arc width, defaults to 1.\n    - ext: vertical extension length, defaults  to 3.\n*/\nmodule arc (r=1, w=1, ext=3) {\n    ar = r+w;\n    \n    // points on arcs\n    list1 = [ for (i = [-r : 0.1 : r])\n        [i, sqrt(pow(r,2)-pow(i,2))] ];\n    list2 = [ for (i = [ar : -0.1 : -ar])\n        [i, sqrt(pow(ar,2)-pow(i,2))] ];\n\n    points = concat(\n        [[-ar,0]],\n        list1,\n        [[r, -ext], [ar, -ext]],\n        list2\n        );\n\n    // Default behavior of polygon, but let's\n    // specify it.\n    paths = [ for (i = [0 : 1 : len(points)-1]) i ];\n    linear_extrude(2) polygon(points, [paths]);\n}\n~~~\n\nTo make sense of module arguments, refer to the following figure:\n\n![Partially parametric OpenSCAD model](/assets/img/OpenSCAD/tank-model-boxes.png)\n\nNow, creating basic models is as simple as issuing:\n\n~~~clike\nunion() {\n    tank();\n    translate([11,1]) arc();\n}\n~~~\n\nMore complicated models can be easily derived by overwriting default parameter values:\n\n~~~clike\nunion() {\n    tank(tbh=15, pbl=[6,4,10],pbw=[3,1,5],st=[0,3,4]);\n    translate([16,1]) arc();\n    translate([-2,6,2]) rotate([0,180,0]) arc(r=2);\n}\n~~~\n\nWhich results in:\n\n\n![Final OpenSCAD parametric model](/assets/img/OpenSCAD/tank-model.png)\n\n> There may be simpler ways to achieve these results, but this approach is most useful for users who want to practice creating 3D geometry models with **OpenSCAD**.\n\n\n","source":"_posts/2018-07-01-openscad-stock-tank-model.md","raw":"---\ntitle: Stock-Tank mesh construction using OpenSCAD\nabstract: \"Constructing OpenFOAM meshes with blockMesh utility can get really tricky, that's \n\twhy I prefer to create geometry STL models with OpenSCAD first and then mesh them.\"\nheader_image: /assets/images/ionic2-banner.png\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\ndate: 2018/07/01\ncategories:\n  - openscad\ntags:\n  - OpenSCAD\n  - Meshing\n---\n\nThis post is part of a longer collection:\n* [OpenSCAD 101: Basics of the OpenSCAD language](/openscad-basics/)\n* [OpenSCAD Transformations & Boolean Ops](/openscad-transformations-boolean-operations/)\n* [OpenSCAD CFD-oriented Usage Examples](/openscad-cfd-usage-examples/)\n\nIt features a very simple, quick and efficient way of constructing a (2D) stock-tank geometry and similar shapes using **OpenSCAD**.\n\n\n\nThe main reason I present this way of thinking here is that I don't think `blockMesh` is quite the right tool for such tasks; even when used with a powerful macro language, like *m4*.\n\nWell, there are a couple of things I expect you to be proficient in:\n* A decent text editor should be used (I'm using VIM) to edit OpenSCAD scripts:  It's good to have something that allows for quick basic calculations to be inserted,  or at least, provide access to the shell.\n* Basic Knowledge of some interpreted languages (Python, Lua, Ruby ... etc, pick the one you like, I usually use Python): They are great to test ideas quickly.\n\nAs an example mesh, we will be creating the one presented in the following\nfigure:\n\n![Sketch of desired OpenSCAD model](/assets/img/OpenSCAD/tank-model-sketch.png)\n\nOf course, model dimensions don't matter because the goal is to create a parametric one.\n\n# A one time deal: Hard code everything in OpenSCAD scripts!\n\nConstructing the stock-tank model point-by-point is not as hard as you might think:\n\n1. Create **points** and **paths** vectors (if necessary) using your text editor.\n2. Run `linear_extrude` on resulting polygon.\n\nThe first step strongly depends on used text editor; In VIM,  I have this awesome vim command defined in my *.vimrc* file:\n\n~~~vim\ncommand! -nargs=+ Calc :read !python -c \"from math import *;\n            \\ import numpy as np;\n            \\ np.set_printoptions(precision=4);\n            \\ <args>\"\n~~~\n\nWhich allows me to run Python code directly via VIM (imports are kind of important here).\n\nIf, for example, I need a set of points to define an \"arc\" of **radius = 1** between `[10,1]` and `[12,1]` points,\nI only need to issue the following VIM command while editing the SCAD script:\n\n\n~~~vim\n:Calc l=np.linspace(10,12,10); m=np.mat([l,1+np.sqrt(1-(l-11)**2)]); print(m.transpose().tolist())\n~~~\n\nWhich will insert all points into the current file (actually, the print command is the one responsible for this). `linear_extrude`'s default `paths` vector is usually fine.\n\n## Is it a bad idea to do things this way?\n\n\nYes, it is. These tricks may work if one only needs to prototype something, or if one desires to check whether an idea is good enough to be implemented!  But they fail badly in real situations, where users absolutely have to create a parametric model.\n\nFortunately, similar tricks often suggest possible approaches to the task at hand: Notice that we used Python's **list comprehensions** to create *numpy* vectors; So, why not using **OpenSCAD list comprehensions** to create OpenSCAD vectors?\n\n# Parametric design of a stock tank\n\n## Better than hard-coding points, but still not an optimal approach\n\nInstead of relying on the power of a text editor, it might be a good idea to use list comprehensions to build needed points. Here's a complete OpenSCAD script explaining the situation:\n\n~~~clike\n// Points of the lower arc:\n// half-a-circle, radius = 1, between [10,1] and [12,1]\n// which means center is [11,1]\nlist1 = [ for (i = [10 : 0.1 : 12]) [i, 1+sqrt(1-pow((i-11),2))] ];\n// Points of the upper arc\n// half-a-circle, radius = 2, between [9,1] and [13,1]\n// which means center is [11,1]\nlist2 = [ for (i = [13 : -0.1 : 9]) [i, 1+sqrt(4-pow((i-11),2))] ];\n// Repeating code, --> consider a function\n\n// polygon points, just some concatenated lists\npoints = concat(\n    [[0,0], [10,0]],\n    list1,\n    [[12, -3], [13, -3]],\n    list2,\n    [[8,1], [8,8], [4,8], [4,4], [3,4], [3,6], [0,6]]\n    );  \n\n// Default behavior of polygon module\npaths = [ for (i = [0 : 1 : len(points)-1]) i ];\n\n// The actual 3D model\nlinear_extrude(2,[0,0]) polygon(points, [paths]);\n~~~\n\n\nThis is certainly a better approach, but we still need to do some adjustments for easier parameterization: Let's define an (object) module to create the boxes-like portion of our model.\n\n## Using modules to construct parametric geometries\n\n\n~~~clike\n/*\n    Create an object model called tank.\n    Parameters:\n    - w: Base width, to interface with the \"arc-y region\", default=1.\n    - tbh: Total Box height, defaults to 10.\n    - pbl: A list of partial box lengths, defaults to [6,4]\n    - pbw: A list of partial box \"widths\", default = [3,1]\n    - st: Translate partial boxes in x-direction, defaults to [0,3]\n*/\nmodule tank (w=1, tbh=10, pbl=[6,4],pbw=[3,1],st=[0,3]) {\n        // create a parent cube, and subtruct all following objects\n        // You can also build this region box-by-box    \n        difference () {\n        \n        \t// parent cube\n        \tcube([tbh,tbh,2]);\n        \n        \t// A special box, allows for better connection with the arc.\n        \ttranslate([tbh-2*w,w,-0.01]) cube([2.001,tbh+0.01,3]);\n        \n        \t// A set of helper boxes to create desired shape.\n        \tfor (i=[0:len(pbl)-1]) translate([st[i]-0.01,pbl[i]-0.01,-0.01]) \n            \tcube([pbw[i]+0.001,tbh,3]);\n        }   \n}\n~~~\n\nWe can also define our own module to create arcs:\n\n~~~clike\n/*\n    Create module named arc.\n    Parameters:\n    - r: inner radius, default=1.\n    - w: arc width, defaults to 1.\n    - ext: vertical extension length, defaults  to 3.\n*/\nmodule arc (r=1, w=1, ext=3) {\n    ar = r+w;\n    \n    // points on arcs\n    list1 = [ for (i = [-r : 0.1 : r])\n        [i, sqrt(pow(r,2)-pow(i,2))] ];\n    list2 = [ for (i = [ar : -0.1 : -ar])\n        [i, sqrt(pow(ar,2)-pow(i,2))] ];\n\n    points = concat(\n        [[-ar,0]],\n        list1,\n        [[r, -ext], [ar, -ext]],\n        list2\n        );\n\n    // Default behavior of polygon, but let's\n    // specify it.\n    paths = [ for (i = [0 : 1 : len(points)-1]) i ];\n    linear_extrude(2) polygon(points, [paths]);\n}\n~~~\n\nTo make sense of module arguments, refer to the following figure:\n\n![Partially parametric OpenSCAD model](/assets/img/OpenSCAD/tank-model-boxes.png)\n\nNow, creating basic models is as simple as issuing:\n\n~~~clike\nunion() {\n    tank();\n    translate([11,1]) arc();\n}\n~~~\n\nMore complicated models can be easily derived by overwriting default parameter values:\n\n~~~clike\nunion() {\n    tank(tbh=15, pbl=[6,4,10],pbw=[3,1,5],st=[0,3,4]);\n    translate([16,1]) arc();\n    translate([-2,6,2]) rotate([0,180,0]) arc(r=2);\n}\n~~~\n\nWhich results in:\n\n\n![Final OpenSCAD parametric model](/assets/img/OpenSCAD/tank-model.png)\n\n> There may be simpler ways to achieve these results, but this approach is most useful for users who want to practice creating 3D geometry models with **OpenSCAD**.\n\n\n","slug":"2018-07-01-openscad-stock-tank-model","published":1,"updated":"2019-12-25T13:44:03.975Z","_id":"ck4lcjy5t000k3cqe7saonjdm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>This post is part of a longer collection:</p>\n<ul>\n<li><a href=\"/openscad-basics/\">OpenSCAD 101: Basics of the OpenSCAD language</a></li>\n<li><a href=\"/openscad-transformations-boolean-operations/\">OpenSCAD Transformations &amp; Boolean Ops</a></li>\n<li><a href=\"/openscad-cfd-usage-examples/\">OpenSCAD CFD-oriented Usage Examples</a></li>\n</ul>\n<p>It features a very simple, quick and efficient way of constructing a (2D) stock-tank geometry and similar shapes using <strong>OpenSCAD</strong>.</p>\n<p>The main reason I present this way of thinking here is that I don’t think <code>blockMesh</code> is quite the right tool for such tasks; even when used with a powerful macro language, like <em>m4</em>.</p>\n<p>Well, there are a couple of things I expect you to be proficient in:</p>\n<ul>\n<li>A decent text editor should be used (I’m using VIM) to edit OpenSCAD scripts:  It’s good to have something that allows for quick basic calculations to be inserted,  or at least, provide access to the shell.</li>\n<li>Basic Knowledge of some interpreted languages (Python, Lua, Ruby … etc, pick the one you like, I usually use Python): They are great to test ideas quickly.</li>\n</ul>\n<p>As an example mesh, we will be creating the one presented in the following<br>figure:</p>\n<p><img src=\"/assets/img/OpenSCAD/tank-model-sketch.png\" alt=\"Sketch of desired OpenSCAD model\"></p>\n<p>Of course, model dimensions don’t matter because the goal is to create a parametric one.</p>\n<h1 id=\"A-one-time-deal-Hard-code-everything-in-OpenSCAD-scripts\"><a href=\"#A-one-time-deal-Hard-code-everything-in-OpenSCAD-scripts\" class=\"headerlink\" title=\"A one time deal: Hard code everything in OpenSCAD scripts!\"></a>A one time deal: Hard code everything in OpenSCAD scripts!</h1><p>Constructing the stock-tank model point-by-point is not as hard as you might think:</p>\n<ol>\n<li>Create <strong>points</strong> and <strong>paths</strong> vectors (if necessary) using your text editor.</li>\n<li>Run <code>linear_extrude</code> on resulting polygon.</li>\n</ol>\n<p>The first step strongly depends on used text editor; In VIM,  I have this awesome vim command defined in my <em>.vimrc</em> file:</p>\n<pre><code class=\"vim\">command! -nargs=+ Calc :read !python -c &quot;from math import *;\n            \\ import numpy as np;\n            \\ np.set_printoptions(precision=4);\n            \\ &lt;args&gt;&quot;</code></pre>\n<p>Which allows me to run Python code directly via VIM (imports are kind of important here).</p>\n<p>If, for example, I need a set of points to define an “arc” of <strong>radius = 1</strong> between <code>[10,1]</code> and <code>[12,1]</code> points,<br>I only need to issue the following VIM command while editing the SCAD script:</p>\n<pre><code class=\"vim\">:Calc l=np.linspace(10,12,10); m=np.mat([l,1+np.sqrt(1-(l-11)**2)]); print(m.transpose().tolist())</code></pre>\n<p>Which will insert all points into the current file (actually, the print command is the one responsible for this). <code>linear_extrude</code>‘s default <code>paths</code> vector is usually fine.</p>\n<h2 id=\"Is-it-a-bad-idea-to-do-things-this-way\"><a href=\"#Is-it-a-bad-idea-to-do-things-this-way\" class=\"headerlink\" title=\"Is it a bad idea to do things this way?\"></a>Is it a bad idea to do things this way?</h2><p>Yes, it is. These tricks may work if one only needs to prototype something, or if one desires to check whether an idea is good enough to be implemented!  But they fail badly in real situations, where users absolutely have to create a parametric model.</p>\n<p>Fortunately, similar tricks often suggest possible approaches to the task at hand: Notice that we used Python’s <strong>list comprehensions</strong> to create <em>numpy</em> vectors; So, why not using <strong>OpenSCAD list comprehensions</strong> to create OpenSCAD vectors?</p>\n<h1 id=\"Parametric-design-of-a-stock-tank\"><a href=\"#Parametric-design-of-a-stock-tank\" class=\"headerlink\" title=\"Parametric design of a stock tank\"></a>Parametric design of a stock tank</h1><h2 id=\"Better-than-hard-coding-points-but-still-not-an-optimal-approach\"><a href=\"#Better-than-hard-coding-points-but-still-not-an-optimal-approach\" class=\"headerlink\" title=\"Better than hard-coding points, but still not an optimal approach\"></a>Better than hard-coding points, but still not an optimal approach</h2><p>Instead of relying on the power of a text editor, it might be a good idea to use list comprehensions to build needed points. Here’s a complete OpenSCAD script explaining the situation:</p>\n<pre><code class=\"clike\">// Points of the lower arc:\n// half-a-circle, radius = 1, between [10,1] and [12,1]\n// which means center is [11,1]\nlist1 = [ for (i = [10 : 0.1 : 12]) [i, 1+sqrt(1-pow((i-11),2))] ];\n// Points of the upper arc\n// half-a-circle, radius = 2, between [9,1] and [13,1]\n// which means center is [11,1]\nlist2 = [ for (i = [13 : -0.1 : 9]) [i, 1+sqrt(4-pow((i-11),2))] ];\n// Repeating code, --&gt; consider a function\n\n// polygon points, just some concatenated lists\npoints = concat(\n    [[0,0], [10,0]],\n    list1,\n    [[12, -3], [13, -3]],\n    list2,\n    [[8,1], [8,8], [4,8], [4,4], [3,4], [3,6], [0,6]]\n    );  \n\n// Default behavior of polygon module\npaths = [ for (i = [0 : 1 : len(points)-1]) i ];\n\n// The actual 3D model\nlinear_extrude(2,[0,0]) polygon(points, [paths]);</code></pre>\n<p>This is certainly a better approach, but we still need to do some adjustments for easier parameterization: Let’s define an (object) module to create the boxes-like portion of our model.</p>\n<h2 id=\"Using-modules-to-construct-parametric-geometries\"><a href=\"#Using-modules-to-construct-parametric-geometries\" class=\"headerlink\" title=\"Using modules to construct parametric geometries\"></a>Using modules to construct parametric geometries</h2><pre><code class=\"clike\">/*\n    Create an object model called tank.\n    Parameters:\n    - w: Base width, to interface with the &quot;arc-y region&quot;, default=1.\n    - tbh: Total Box height, defaults to 10.\n    - pbl: A list of partial box lengths, defaults to [6,4]\n    - pbw: A list of partial box &quot;widths&quot;, default = [3,1]\n    - st: Translate partial boxes in x-direction, defaults to [0,3]\n*/\nmodule tank (w=1, tbh=10, pbl=[6,4],pbw=[3,1],st=[0,3]) {\n        // create a parent cube, and subtruct all following objects\n        // You can also build this region box-by-box    \n        difference () {\n\n            // parent cube\n            cube([tbh,tbh,2]);\n\n            // A special box, allows for better connection with the arc.\n            translate([tbh-2*w,w,-0.01]) cube([2.001,tbh+0.01,3]);\n\n            // A set of helper boxes to create desired shape.\n            for (i=[0:len(pbl)-1]) translate([st[i]-0.01,pbl[i]-0.01,-0.01]) \n                cube([pbw[i]+0.001,tbh,3]);\n        }   \n}</code></pre>\n<p>We can also define our own module to create arcs:</p>\n<pre><code class=\"clike\">/*\n    Create module named arc.\n    Parameters:\n    - r: inner radius, default=1.\n    - w: arc width, defaults to 1.\n    - ext: vertical extension length, defaults  to 3.\n*/\nmodule arc (r=1, w=1, ext=3) {\n    ar = r+w;\n\n    // points on arcs\n    list1 = [ for (i = [-r : 0.1 : r])\n        [i, sqrt(pow(r,2)-pow(i,2))] ];\n    list2 = [ for (i = [ar : -0.1 : -ar])\n        [i, sqrt(pow(ar,2)-pow(i,2))] ];\n\n    points = concat(\n        [[-ar,0]],\n        list1,\n        [[r, -ext], [ar, -ext]],\n        list2\n        );\n\n    // Default behavior of polygon, but let&#39;s\n    // specify it.\n    paths = [ for (i = [0 : 1 : len(points)-1]) i ];\n    linear_extrude(2) polygon(points, [paths]);\n}</code></pre>\n<p>To make sense of module arguments, refer to the following figure:</p>\n<p><img src=\"/assets/img/OpenSCAD/tank-model-boxes.png\" alt=\"Partially parametric OpenSCAD model\"></p>\n<p>Now, creating basic models is as simple as issuing:</p>\n<pre><code class=\"clike\">union() {\n    tank();\n    translate([11,1]) arc();\n}</code></pre>\n<p>More complicated models can be easily derived by overwriting default parameter values:</p>\n<pre><code class=\"clike\">union() {\n    tank(tbh=15, pbl=[6,4,10],pbw=[3,1,5],st=[0,3,4]);\n    translate([16,1]) arc();\n    translate([-2,6,2]) rotate([0,180,0]) arc(r=2);\n}</code></pre>\n<p>Which results in:</p>\n<p><img src=\"/assets/img/OpenSCAD/tank-model.png\" alt=\"Final OpenSCAD parametric model\"></p>\n<blockquote>\n<p>There may be simpler ways to achieve these results, but this approach is most useful for users who want to practice creating 3D geometry models with <strong>OpenSCAD</strong>.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>This post is part of a longer collection:</p>\n<ul>\n<li><a href=\"/openscad-basics/\">OpenSCAD 101: Basics of the OpenSCAD language</a></li>\n<li><a href=\"/openscad-transformations-boolean-operations/\">OpenSCAD Transformations &amp; Boolean Ops</a></li>\n<li><a href=\"/openscad-cfd-usage-examples/\">OpenSCAD CFD-oriented Usage Examples</a></li>\n</ul>\n<p>It features a very simple, quick and efficient way of constructing a (2D) stock-tank geometry and similar shapes using <strong>OpenSCAD</strong>.</p>\n<p>The main reason I present this way of thinking here is that I don’t think <code>blockMesh</code> is quite the right tool for such tasks; even when used with a powerful macro language, like <em>m4</em>.</p>\n<p>Well, there are a couple of things I expect you to be proficient in:</p>\n<ul>\n<li>A decent text editor should be used (I’m using VIM) to edit OpenSCAD scripts:  It’s good to have something that allows for quick basic calculations to be inserted,  or at least, provide access to the shell.</li>\n<li>Basic Knowledge of some interpreted languages (Python, Lua, Ruby … etc, pick the one you like, I usually use Python): They are great to test ideas quickly.</li>\n</ul>\n<p>As an example mesh, we will be creating the one presented in the following<br>figure:</p>\n<p><img src=\"/assets/img/OpenSCAD/tank-model-sketch.png\" alt=\"Sketch of desired OpenSCAD model\"></p>\n<p>Of course, model dimensions don’t matter because the goal is to create a parametric one.</p>\n<h1 id=\"A-one-time-deal-Hard-code-everything-in-OpenSCAD-scripts\"><a href=\"#A-one-time-deal-Hard-code-everything-in-OpenSCAD-scripts\" class=\"headerlink\" title=\"A one time deal: Hard code everything in OpenSCAD scripts!\"></a>A one time deal: Hard code everything in OpenSCAD scripts!</h1><p>Constructing the stock-tank model point-by-point is not as hard as you might think:</p>\n<ol>\n<li>Create <strong>points</strong> and <strong>paths</strong> vectors (if necessary) using your text editor.</li>\n<li>Run <code>linear_extrude</code> on resulting polygon.</li>\n</ol>\n<p>The first step strongly depends on used text editor; In VIM,  I have this awesome vim command defined in my <em>.vimrc</em> file:</p>\n<pre><code class=\"vim\">command! -nargs=+ Calc :read !python -c &quot;from math import *;\n            \\ import numpy as np;\n            \\ np.set_printoptions(precision=4);\n            \\ &lt;args&gt;&quot;</code></pre>\n<p>Which allows me to run Python code directly via VIM (imports are kind of important here).</p>\n<p>If, for example, I need a set of points to define an “arc” of <strong>radius = 1</strong> between <code>[10,1]</code> and <code>[12,1]</code> points,<br>I only need to issue the following VIM command while editing the SCAD script:</p>\n<pre><code class=\"vim\">:Calc l=np.linspace(10,12,10); m=np.mat([l,1+np.sqrt(1-(l-11)**2)]); print(m.transpose().tolist())</code></pre>\n<p>Which will insert all points into the current file (actually, the print command is the one responsible for this). <code>linear_extrude</code>‘s default <code>paths</code> vector is usually fine.</p>\n<h2 id=\"Is-it-a-bad-idea-to-do-things-this-way\"><a href=\"#Is-it-a-bad-idea-to-do-things-this-way\" class=\"headerlink\" title=\"Is it a bad idea to do things this way?\"></a>Is it a bad idea to do things this way?</h2><p>Yes, it is. These tricks may work if one only needs to prototype something, or if one desires to check whether an idea is good enough to be implemented!  But they fail badly in real situations, where users absolutely have to create a parametric model.</p>\n<p>Fortunately, similar tricks often suggest possible approaches to the task at hand: Notice that we used Python’s <strong>list comprehensions</strong> to create <em>numpy</em> vectors; So, why not using <strong>OpenSCAD list comprehensions</strong> to create OpenSCAD vectors?</p>\n<h1 id=\"Parametric-design-of-a-stock-tank\"><a href=\"#Parametric-design-of-a-stock-tank\" class=\"headerlink\" title=\"Parametric design of a stock tank\"></a>Parametric design of a stock tank</h1><h2 id=\"Better-than-hard-coding-points-but-still-not-an-optimal-approach\"><a href=\"#Better-than-hard-coding-points-but-still-not-an-optimal-approach\" class=\"headerlink\" title=\"Better than hard-coding points, but still not an optimal approach\"></a>Better than hard-coding points, but still not an optimal approach</h2><p>Instead of relying on the power of a text editor, it might be a good idea to use list comprehensions to build needed points. Here’s a complete OpenSCAD script explaining the situation:</p>\n<pre><code class=\"clike\">// Points of the lower arc:\n// half-a-circle, radius = 1, between [10,1] and [12,1]\n// which means center is [11,1]\nlist1 = [ for (i = [10 : 0.1 : 12]) [i, 1+sqrt(1-pow((i-11),2))] ];\n// Points of the upper arc\n// half-a-circle, radius = 2, between [9,1] and [13,1]\n// which means center is [11,1]\nlist2 = [ for (i = [13 : -0.1 : 9]) [i, 1+sqrt(4-pow((i-11),2))] ];\n// Repeating code, --&gt; consider a function\n\n// polygon points, just some concatenated lists\npoints = concat(\n    [[0,0], [10,0]],\n    list1,\n    [[12, -3], [13, -3]],\n    list2,\n    [[8,1], [8,8], [4,8], [4,4], [3,4], [3,6], [0,6]]\n    );  \n\n// Default behavior of polygon module\npaths = [ for (i = [0 : 1 : len(points)-1]) i ];\n\n// The actual 3D model\nlinear_extrude(2,[0,0]) polygon(points, [paths]);</code></pre>\n<p>This is certainly a better approach, but we still need to do some adjustments for easier parameterization: Let’s define an (object) module to create the boxes-like portion of our model.</p>\n<h2 id=\"Using-modules-to-construct-parametric-geometries\"><a href=\"#Using-modules-to-construct-parametric-geometries\" class=\"headerlink\" title=\"Using modules to construct parametric geometries\"></a>Using modules to construct parametric geometries</h2><pre><code class=\"clike\">/*\n    Create an object model called tank.\n    Parameters:\n    - w: Base width, to interface with the &quot;arc-y region&quot;, default=1.\n    - tbh: Total Box height, defaults to 10.\n    - pbl: A list of partial box lengths, defaults to [6,4]\n    - pbw: A list of partial box &quot;widths&quot;, default = [3,1]\n    - st: Translate partial boxes in x-direction, defaults to [0,3]\n*/\nmodule tank (w=1, tbh=10, pbl=[6,4],pbw=[3,1],st=[0,3]) {\n        // create a parent cube, and subtruct all following objects\n        // You can also build this region box-by-box    \n        difference () {\n\n            // parent cube\n            cube([tbh,tbh,2]);\n\n            // A special box, allows for better connection with the arc.\n            translate([tbh-2*w,w,-0.01]) cube([2.001,tbh+0.01,3]);\n\n            // A set of helper boxes to create desired shape.\n            for (i=[0:len(pbl)-1]) translate([st[i]-0.01,pbl[i]-0.01,-0.01]) \n                cube([pbw[i]+0.001,tbh,3]);\n        }   \n}</code></pre>\n<p>We can also define our own module to create arcs:</p>\n<pre><code class=\"clike\">/*\n    Create module named arc.\n    Parameters:\n    - r: inner radius, default=1.\n    - w: arc width, defaults to 1.\n    - ext: vertical extension length, defaults  to 3.\n*/\nmodule arc (r=1, w=1, ext=3) {\n    ar = r+w;\n\n    // points on arcs\n    list1 = [ for (i = [-r : 0.1 : r])\n        [i, sqrt(pow(r,2)-pow(i,2))] ];\n    list2 = [ for (i = [ar : -0.1 : -ar])\n        [i, sqrt(pow(ar,2)-pow(i,2))] ];\n\n    points = concat(\n        [[-ar,0]],\n        list1,\n        [[r, -ext], [ar, -ext]],\n        list2\n        );\n\n    // Default behavior of polygon, but let&#39;s\n    // specify it.\n    paths = [ for (i = [0 : 1 : len(points)-1]) i ];\n    linear_extrude(2) polygon(points, [paths]);\n}</code></pre>\n<p>To make sense of module arguments, refer to the following figure:</p>\n<p><img src=\"/assets/img/OpenSCAD/tank-model-boxes.png\" alt=\"Partially parametric OpenSCAD model\"></p>\n<p>Now, creating basic models is as simple as issuing:</p>\n<pre><code class=\"clike\">union() {\n    tank();\n    translate([11,1]) arc();\n}</code></pre>\n<p>More complicated models can be easily derived by overwriting default parameter values:</p>\n<pre><code class=\"clike\">union() {\n    tank(tbh=15, pbl=[6,4,10],pbw=[3,1,5],st=[0,3,4]);\n    translate([16,1]) arc();\n    translate([-2,6,2]) rotate([0,180,0]) arc(r=2);\n}</code></pre>\n<p>Which results in:</p>\n<p><img src=\"/assets/img/OpenSCAD/tank-model.png\" alt=\"Final OpenSCAD parametric model\"></p>\n<blockquote>\n<p>There may be simpler ways to achieve these results, but this approach is most useful for users who want to practice creating 3D geometry models with <strong>OpenSCAD</strong>.</p>\n</blockquote>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":false,"popularPost_tmp_gaData":{"updated":"Wed Dec 25 2019 14:44:03 GMT+0100 (Central European Standard Time)","title":"Stock-Tank mesh construction using OpenSCAD","path":"openscad/stock-tank-mesh-construction-using-openscad/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2018-06-30T23:00:00.000Z","pv":0,"totalPV":0,"categories":"openscad","tags":["OpenSCAD","Meshing"],"internalLinks":["openscad-basics/","openscad-transformations-boolean-operations/","openscad-cfd-usage-examples/"],"keywords":[],"keywordsLength":0}},{"title":"Customize VIM to work efficiently with OpenFOAM - Part 1","abstract":"Working with OpenFOAM case files gets really tedious if the text editor is not \t selected properly; and with VIM I still feel like missing some features, that's why \t customizing VIM for such tasks is the best path to take","header_image":"/assets/images/ionic2-banner.png","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","date":"2018-08-26T23:00:00.000Z","_content":"\nToday, I'm starting new (short) post series suggesting tricks to customize the **VIM** text editor so it can be used to edit OpenFOAM cases more efficiently. Of course, making VIM work optimally with every single piece of software you have installed through scripting is a bit of \"over-kill\"; but having it configured properly is crucial.\n\n> These series of posts are for those who are ready to write some lines of VIML code to add interesting functionality to VIM (OpenFOAM-wise).\n\n\n## VIM Plugins for OpenFOAM\n\nWe can easily customize our VIM installation using our own scripts, sourced in the `.vimrc` file. The versatility of VIM allows for sharing these scripts between users, we then call the scripts: *Plug-ins*.\n\nThese plugins differ in both their goal and their implementation:\n- General purpose plugins. Eg. for handling text formatting, VIM configuration.\n- File-Type specific plugins. Eg. those which operate only on C source/header files.\n- Syntax highlighting. Eg. highlight OpenFOAM keywords in a OpenFOAM dictionary.\n- Compiler plugins. Eg. interpret a python script from VIM command line and jump to errors.\n\nAs OpenFOAM users, we'll naturally be interested in any C++ related plugins in addition to few OpenFOAM-specific ones.\n\n### Syntax Highlighting of OPENFOAM dictionaries in VIM\n\nIt's always good to have keyword-specific highlighting of a file; It helps you instantly catch misspelled keywords, it makes understanding the file easier; and with appropriate color themes, it makes you feel comfortable while editing the file.\n\nThere is already a VIM plugin that takes care of OpenFOAM keywords highlighting (Vim-OpenFOAM-syntax). It's true that the plugin does some weird stuff (eg. loading weird files into the buffer list) but, in general, it's good for the job of highlighting OpenFOAM syntax. To install it on your system, follow the instructions at [Vim-OpenFoam-syntax](https://github.com/effi/vim-OpenFoam-syntax) on github, or the fork for manual installation (not that scary) [Vim-Extension-OpenFOAM](https://bitbucket.org/shor-ty/vimextensionopenfoam) on bitbucket.\n\nWhile programming, I usually use a couple of VIM plugins:\n- *c-support*: to turn VIM into a C/C++ IDE (code snippets ... etc).\n- *taglist*: to browse source code efficiently\n\n## Your own VIM scripts\n\nIn this blog post, we'll write a very small VIM script, called `customFoam.vim`,  which is capable of doing a couple of things:\n\n- It needs to be aware of the current file's FileType.\n- When the file is of type `foam`, VIM should set a couple of things up:\n  * Changing the path variable for the `:find` command so it includes our case's directory.\n  * Changing VIM's current directory to case directory.\n- At this moment, that's all, but we'll add some stuff in the upcoming blog posts.\n\n### First steps: Determining file types\n\nThere are two common ways to determine a file type for a file:\n\n- Use the extension in its same; I call it the `lazy Windows way`: for example ,files that have names ending with `.html` are considered HTML files no matter what their content is.\n- Take a look at the file's content then decide; This is the Unix way, which we'll be using here: It just means we'll search the content of a file for the line that says `FoamFile`.\n\n\nWe are not the first ones who try to detect `foam` file type in VIM; the *vim-OpenFoam-syntax* plugin already does that. Actually, it assigns different file types for different `foam` files. For example, it sets: `ft=\"foam256_thermodynamicProperties\"` for `thermodynamicProperties` dictionaries, but in general, its sets the file type to `foam256_general`.\n\nThus, if you have the plugin installed, you already have the required means to detect `foam` file type. However, for the sake of leaning VIM, we'll illustrate a very quick way to do it (but not that efficient!).\n\nAll what we have to do is to write a small script -which contains only one function- searching the first few lines of a file for the keyword `FoamFile`. \nThis tells VIM that the file is a `OpenFOAM Dictionary File`:\n\n~~~vim\n\" Filename: foamFT.vim\n\n\" No debug stuff\n\" Should check if the file type is already set\n\" But it's OK; just set it again\n\nfunction! SetFoamType()\n    \" loop through the first 10 lines\n    \" FoamFile is at line 8 usually\n    for nL in range(1,10)\n    \" match 'FoamFile'\n        if (getline(nL) =~ 'FoamFile')\n            setfiletype foam\n            \" if file type is set, leave the loop\n            break\n        endif\n    endfor\nendfunction\n\n\" That's it!\n\" Now, when to call it?\naugroup FOAMFTautocmds\nautocmd!\nautocmd BufRead * call SetFoamType()\naugroup End\n~~~\n\n\nTo check whether the script works or not; Just execute the ex-command `:set ft` while an OpenFOAM dictionary is loaded. If it works, the output should say *filetype=foam*.\n\n### Now we know the filetype, then what?\n\nWell, **VIM** knows *what* we are editing, but it doesn't know *where* we are editing it. In fact, it does know the exact path to the current file (try running the ex-command `:pwd`): VIM considers the startup-directory as your current directory; and to change it, guess what, we have to use the `:cd` (change directory!) command.\n\nIf you invoke VIM from the case directory, you'll have the advantage of file names auto-completion in command-line mode; that is, when you type `:e c<TAB>`, VIM automatically completes *constant* for you. But, if, for example, you invoke it from the system directory of a case, it won't know about the files in the other directories (*0*, *constant* ... etc).\n\n\nThere's also the super-useful command `:find` which finds the specified file in the path (could include multiple -independent- directories) and then edit it. The desired work-flow can be summarized as follows: While editing `blockMeshDict` in *system* directory of a case; type `:find t<TAB>`, which instantly expands to `:find transportProperties` (Note that this file is located under *constant* directory), then, hitting *ENTER* switches to that file to edit it.\n\n\n~~~vim\n\" Filename: customFoam.vim\n\nfunction! FOAMSetPathToCaseDir()\n    \" IF you care only for files in\n    \" system, 0, and constant, use\n    \" let caseDir = expand('%:p:h:h')\n    \" But, I'm a regexp lover, so,\n    \" Make Vim remember everything in the path until case name.\n    \" delete everything else!\n    let caseDir = expand('%:p:s?\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*?\\1?')\n    \" set path to include all subdirs of caseDir.\n    \" you can also use '=+' instead of '=' to add the caseDir to\n    \" the default path; but I like it this way.\n    exe 'set path='.caseDir.'/**'\n    \" I want to run blockMesh, solvers and other tools\n    \" Directly in VIM, so change dir to casedir\n    exe 'cd '.caseDir\nendfunction\n\n\" This is just incredible\n\naugroup FOAMautocmds\nautocmd!\nautocmd FileType foam* call FOAMSetPathToCaseDir()\naugroup End\n~~~\n\n\nLet's go through that script line-by-line, shall we?\n- `function! FOAMSetPathToCaseDir()` overwrites any function defined with this name (Remember, user-defined function names start with a capital letter). `endfunction` denotes the end of function block.\n\n- All lines preceded with ( `\"` ) are considered comments.\n\n- The line `let caseDir = expand('%:p:s?\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*?\\1?')` needs deeper explanation: \n  1. The standard function `let` defines Vim Variables (In this case, variables are local to the user-defined function).\n  2. *caseDir* is the name of our variable (a string). It is local to the function: To use a global variable inside a function, name it `g:var`, to make it available only in this script, use `s:var`, and, in fact, to use a local variable in a function, it should be called `l:var`, but this is tolerated.\n  3. The standard function `expand` manipulates filenames (shortcut *%*) and paths to them, with modifiers:\n    4. `:p` prints the whole absolute path to the file, eg. while editing *blockMeshDict*,\n       the ex-command `echo expand('%:p')` should display something like\n      `/home/path-to-case/system/blockMeshDict`.\n    5. `:h` removes the last entry in a path, eg. `echo expand('%:p:h')` would display\n      `/home/path-to-case/system`\n    6. `:s?pattern?string?` acts like the substitute command. *pattern* is a regular expression, and *string* accepts **back-references**; All the power one needs in one command.\n    7. So, the regexp `\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*` remembers everything from the start of filename to \"run\" (hopefully, your OpenFOAM cases directory) to the first directory (that's the case dir. at least for me). Case Name may contain alphabet characters, digits, dots and spaces (The last two are really bad options). The rest of the path is forgotten (eg. /system/blockMeshDict).\n\n\n\nThis way, we can find our path to the case no matter what case file we are editing!\n\n\n\n- In the line `exe 'set path='.caseDir.'/**'` , the command `exe` (short for `execute`) executes the following string as an ex-command. Concatenation in VIML is done with a dot,  and because our *caseDir* variable is a string, and we are still inside the same function, it can be concatenated with other strings. The /** part expands to all sub-directories, to the last one of them, no matter how many levels of directories the case have.\n\n- The path variable is set so the `:find` command can help us a bit.\n\n- I like to change the directory to the case dir. so I can run commands directly from within VIM without worrying about which files I'm editing, or the start-up directory. For that, we simply use the `:cd` ex-command (VIM's command).\n\n\n\nThe function is completed, now, we have to find a way to automate calling it: `auto-commands`. Simply, we group all of our autocmds in a group called `FOAMautocmds` (Good practice but optional) .\n\n\n\n- `autocmd!` overwrites previous autocmds of this group (often abbriviated as `au!` ).\n\n- We want to call the function when we open a file of type `foam*` (including `foam`, `foam_general` ... etc), so we write: `autocmd FileType foam* call FOAMSetPathToCaseDir()`\nThat's it, source the script in your `.vimrc` file and you are good to test it out:\n\n- From the shell (from /../constant/polyMesh in an arbitrary OpenFOAM case, where the mesh is present) run `vim boundary`\n- Now, in Vim, type `:fin tr<TAB>` (`fin` is a short form for `find`) then hit ENTER.\n- Check both the path and the working directory (using `:set path` and `:pwd` respectively).\n- You can issue `:!blockMesh` while editing the file to rebuild the mesh.\n\n\nThat's it for now, the next post will explain ways to get the most of VIM compilers to run `blockMesh` and OpenFOAM solvers on cases right from inside VIM and browse errors.\n","source":"_posts/2018-08-24-vim-openfoam-power-part1.md","raw":"---\ntitle: Customize VIM to work efficiently with OpenFOAM - Part 1\nabstract: \"Working with OpenFOAM case files gets really tedious if the text editor is not \t\n\tselected properly; and with VIM I still feel like missing some features, that's why \t\n\tcustomizing VIM for such tasks is the best path to take\"\nheader_image: /assets/images/ionic2-banner.png\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\ndate: 2018/08/27\ncategories:\n  - productivity\ntags:\n  - OpenFOAM\n  - Vim\n---\n\nToday, I'm starting new (short) post series suggesting tricks to customize the **VIM** text editor so it can be used to edit OpenFOAM cases more efficiently. Of course, making VIM work optimally with every single piece of software you have installed through scripting is a bit of \"over-kill\"; but having it configured properly is crucial.\n\n> These series of posts are for those who are ready to write some lines of VIML code to add interesting functionality to VIM (OpenFOAM-wise).\n\n\n## VIM Plugins for OpenFOAM\n\nWe can easily customize our VIM installation using our own scripts, sourced in the `.vimrc` file. The versatility of VIM allows for sharing these scripts between users, we then call the scripts: *Plug-ins*.\n\nThese plugins differ in both their goal and their implementation:\n- General purpose plugins. Eg. for handling text formatting, VIM configuration.\n- File-Type specific plugins. Eg. those which operate only on C source/header files.\n- Syntax highlighting. Eg. highlight OpenFOAM keywords in a OpenFOAM dictionary.\n- Compiler plugins. Eg. interpret a python script from VIM command line and jump to errors.\n\nAs OpenFOAM users, we'll naturally be interested in any C++ related plugins in addition to few OpenFOAM-specific ones.\n\n### Syntax Highlighting of OPENFOAM dictionaries in VIM\n\nIt's always good to have keyword-specific highlighting of a file; It helps you instantly catch misspelled keywords, it makes understanding the file easier; and with appropriate color themes, it makes you feel comfortable while editing the file.\n\nThere is already a VIM plugin that takes care of OpenFOAM keywords highlighting (Vim-OpenFOAM-syntax). It's true that the plugin does some weird stuff (eg. loading weird files into the buffer list) but, in general, it's good for the job of highlighting OpenFOAM syntax. To install it on your system, follow the instructions at [Vim-OpenFoam-syntax](https://github.com/effi/vim-OpenFoam-syntax) on github, or the fork for manual installation (not that scary) [Vim-Extension-OpenFOAM](https://bitbucket.org/shor-ty/vimextensionopenfoam) on bitbucket.\n\nWhile programming, I usually use a couple of VIM plugins:\n- *c-support*: to turn VIM into a C/C++ IDE (code snippets ... etc).\n- *taglist*: to browse source code efficiently\n\n## Your own VIM scripts\n\nIn this blog post, we'll write a very small VIM script, called `customFoam.vim`,  which is capable of doing a couple of things:\n\n- It needs to be aware of the current file's FileType.\n- When the file is of type `foam`, VIM should set a couple of things up:\n  * Changing the path variable for the `:find` command so it includes our case's directory.\n  * Changing VIM's current directory to case directory.\n- At this moment, that's all, but we'll add some stuff in the upcoming blog posts.\n\n### First steps: Determining file types\n\nThere are two common ways to determine a file type for a file:\n\n- Use the extension in its same; I call it the `lazy Windows way`: for example ,files that have names ending with `.html` are considered HTML files no matter what their content is.\n- Take a look at the file's content then decide; This is the Unix way, which we'll be using here: It just means we'll search the content of a file for the line that says `FoamFile`.\n\n\nWe are not the first ones who try to detect `foam` file type in VIM; the *vim-OpenFoam-syntax* plugin already does that. Actually, it assigns different file types for different `foam` files. For example, it sets: `ft=\"foam256_thermodynamicProperties\"` for `thermodynamicProperties` dictionaries, but in general, its sets the file type to `foam256_general`.\n\nThus, if you have the plugin installed, you already have the required means to detect `foam` file type. However, for the sake of leaning VIM, we'll illustrate a very quick way to do it (but not that efficient!).\n\nAll what we have to do is to write a small script -which contains only one function- searching the first few lines of a file for the keyword `FoamFile`. \nThis tells VIM that the file is a `OpenFOAM Dictionary File`:\n\n~~~vim\n\" Filename: foamFT.vim\n\n\" No debug stuff\n\" Should check if the file type is already set\n\" But it's OK; just set it again\n\nfunction! SetFoamType()\n    \" loop through the first 10 lines\n    \" FoamFile is at line 8 usually\n    for nL in range(1,10)\n    \" match 'FoamFile'\n        if (getline(nL) =~ 'FoamFile')\n            setfiletype foam\n            \" if file type is set, leave the loop\n            break\n        endif\n    endfor\nendfunction\n\n\" That's it!\n\" Now, when to call it?\naugroup FOAMFTautocmds\nautocmd!\nautocmd BufRead * call SetFoamType()\naugroup End\n~~~\n\n\nTo check whether the script works or not; Just execute the ex-command `:set ft` while an OpenFOAM dictionary is loaded. If it works, the output should say *filetype=foam*.\n\n### Now we know the filetype, then what?\n\nWell, **VIM** knows *what* we are editing, but it doesn't know *where* we are editing it. In fact, it does know the exact path to the current file (try running the ex-command `:pwd`): VIM considers the startup-directory as your current directory; and to change it, guess what, we have to use the `:cd` (change directory!) command.\n\nIf you invoke VIM from the case directory, you'll have the advantage of file names auto-completion in command-line mode; that is, when you type `:e c<TAB>`, VIM automatically completes *constant* for you. But, if, for example, you invoke it from the system directory of a case, it won't know about the files in the other directories (*0*, *constant* ... etc).\n\n\nThere's also the super-useful command `:find` which finds the specified file in the path (could include multiple -independent- directories) and then edit it. The desired work-flow can be summarized as follows: While editing `blockMeshDict` in *system* directory of a case; type `:find t<TAB>`, which instantly expands to `:find transportProperties` (Note that this file is located under *constant* directory), then, hitting *ENTER* switches to that file to edit it.\n\n\n~~~vim\n\" Filename: customFoam.vim\n\nfunction! FOAMSetPathToCaseDir()\n    \" IF you care only for files in\n    \" system, 0, and constant, use\n    \" let caseDir = expand('%:p:h:h')\n    \" But, I'm a regexp lover, so,\n    \" Make Vim remember everything in the path until case name.\n    \" delete everything else!\n    let caseDir = expand('%:p:s?\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*?\\1?')\n    \" set path to include all subdirs of caseDir.\n    \" you can also use '=+' instead of '=' to add the caseDir to\n    \" the default path; but I like it this way.\n    exe 'set path='.caseDir.'/**'\n    \" I want to run blockMesh, solvers and other tools\n    \" Directly in VIM, so change dir to casedir\n    exe 'cd '.caseDir\nendfunction\n\n\" This is just incredible\n\naugroup FOAMautocmds\nautocmd!\nautocmd FileType foam* call FOAMSetPathToCaseDir()\naugroup End\n~~~\n\n\nLet's go through that script line-by-line, shall we?\n- `function! FOAMSetPathToCaseDir()` overwrites any function defined with this name (Remember, user-defined function names start with a capital letter). `endfunction` denotes the end of function block.\n\n- All lines preceded with ( `\"` ) are considered comments.\n\n- The line `let caseDir = expand('%:p:s?\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*?\\1?')` needs deeper explanation: \n  1. The standard function `let` defines Vim Variables (In this case, variables are local to the user-defined function).\n  2. *caseDir* is the name of our variable (a string). It is local to the function: To use a global variable inside a function, name it `g:var`, to make it available only in this script, use `s:var`, and, in fact, to use a local variable in a function, it should be called `l:var`, but this is tolerated.\n  3. The standard function `expand` manipulates filenames (shortcut *%*) and paths to them, with modifiers:\n    4. `:p` prints the whole absolute path to the file, eg. while editing *blockMeshDict*,\n       the ex-command `echo expand('%:p')` should display something like\n      `/home/path-to-case/system/blockMeshDict`.\n    5. `:h` removes the last entry in a path, eg. `echo expand('%:p:h')` would display\n      `/home/path-to-case/system`\n    6. `:s?pattern?string?` acts like the substitute command. *pattern* is a regular expression, and *string* accepts **back-references**; All the power one needs in one command.\n    7. So, the regexp `\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*` remembers everything from the start of filename to \"run\" (hopefully, your OpenFOAM cases directory) to the first directory (that's the case dir. at least for me). Case Name may contain alphabet characters, digits, dots and spaces (The last two are really bad options). The rest of the path is forgotten (eg. /system/blockMeshDict).\n\n\n\nThis way, we can find our path to the case no matter what case file we are editing!\n\n\n\n- In the line `exe 'set path='.caseDir.'/**'` , the command `exe` (short for `execute`) executes the following string as an ex-command. Concatenation in VIML is done with a dot,  and because our *caseDir* variable is a string, and we are still inside the same function, it can be concatenated with other strings. The /** part expands to all sub-directories, to the last one of them, no matter how many levels of directories the case have.\n\n- The path variable is set so the `:find` command can help us a bit.\n\n- I like to change the directory to the case dir. so I can run commands directly from within VIM without worrying about which files I'm editing, or the start-up directory. For that, we simply use the `:cd` ex-command (VIM's command).\n\n\n\nThe function is completed, now, we have to find a way to automate calling it: `auto-commands`. Simply, we group all of our autocmds in a group called `FOAMautocmds` (Good practice but optional) .\n\n\n\n- `autocmd!` overwrites previous autocmds of this group (often abbriviated as `au!` ).\n\n- We want to call the function when we open a file of type `foam*` (including `foam`, `foam_general` ... etc), so we write: `autocmd FileType foam* call FOAMSetPathToCaseDir()`\nThat's it, source the script in your `.vimrc` file and you are good to test it out:\n\n- From the shell (from /../constant/polyMesh in an arbitrary OpenFOAM case, where the mesh is present) run `vim boundary`\n- Now, in Vim, type `:fin tr<TAB>` (`fin` is a short form for `find`) then hit ENTER.\n- Check both the path and the working directory (using `:set path` and `:pwd` respectively).\n- You can issue `:!blockMesh` while editing the file to rebuild the mesh.\n\n\nThat's it for now, the next post will explain ways to get the most of VIM compilers to run `blockMesh` and OpenFOAM solvers on cases right from inside VIM and browse errors.\n","slug":"2018-08-24-vim-openfoam-power-part1","published":1,"updated":"2019-12-25T13:37:24.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5x000n3cqet7hfykja","content":"<p>Today, I’m starting new (short) post series suggesting tricks to customize the <strong>VIM</strong> text editor so it can be used to edit OpenFOAM cases more efficiently. Of course, making VIM work optimally with every single piece of software you have installed through scripting is a bit of “over-kill”; but having it configured properly is crucial.</p>\n<blockquote>\n<p>These series of posts are for those who are ready to write some lines of VIML code to add interesting functionality to VIM (OpenFOAM-wise).</p>\n</blockquote>\n<h2 id=\"VIM-Plugins-for-OpenFOAM\"><a href=\"#VIM-Plugins-for-OpenFOAM\" class=\"headerlink\" title=\"VIM Plugins for OpenFOAM\"></a>VIM Plugins for OpenFOAM</h2><p>We can easily customize our VIM installation using our own scripts, sourced in the <code>.vimrc</code> file. The versatility of VIM allows for sharing these scripts between users, we then call the scripts: <em>Plug-ins</em>.</p>\n<p>These plugins differ in both their goal and their implementation:</p>\n<ul>\n<li>General purpose plugins. Eg. for handling text formatting, VIM configuration.</li>\n<li>File-Type specific plugins. Eg. those which operate only on C source/header files.</li>\n<li>Syntax highlighting. Eg. highlight OpenFOAM keywords in a OpenFOAM dictionary.</li>\n<li>Compiler plugins. Eg. interpret a python script from VIM command line and jump to errors.</li>\n</ul>\n<p>As OpenFOAM users, we’ll naturally be interested in any C++ related plugins in addition to few OpenFOAM-specific ones.</p>\n<h3 id=\"Syntax-Highlighting-of-OPENFOAM-dictionaries-in-VIM\"><a href=\"#Syntax-Highlighting-of-OPENFOAM-dictionaries-in-VIM\" class=\"headerlink\" title=\"Syntax Highlighting of OPENFOAM dictionaries in VIM\"></a>Syntax Highlighting of OPENFOAM dictionaries in VIM</h3><p>It’s always good to have keyword-specific highlighting of a file; It helps you instantly catch misspelled keywords, it makes understanding the file easier; and with appropriate color themes, it makes you feel comfortable while editing the file.</p>\n<p>There is already a VIM plugin that takes care of OpenFOAM keywords highlighting (Vim-OpenFOAM-syntax). It’s true that the plugin does some weird stuff (eg. loading weird files into the buffer list) but, in general, it’s good for the job of highlighting OpenFOAM syntax. To install it on your system, follow the instructions at <a href=\"https://github.com/effi/vim-OpenFoam-syntax\" target=\"_blank\" rel=\"noopener\">Vim-OpenFoam-syntax</a> on github, or the fork for manual installation (not that scary) <a href=\"https://bitbucket.org/shor-ty/vimextensionopenfoam\" target=\"_blank\" rel=\"noopener\">Vim-Extension-OpenFOAM</a> on bitbucket.</p>\n<p>While programming, I usually use a couple of VIM plugins:</p>\n<ul>\n<li><em>c-support</em>: to turn VIM into a C/C++ IDE (code snippets … etc).</li>\n<li><em>taglist</em>: to browse source code efficiently</li>\n</ul>\n<h2 id=\"Your-own-VIM-scripts\"><a href=\"#Your-own-VIM-scripts\" class=\"headerlink\" title=\"Your own VIM scripts\"></a>Your own VIM scripts</h2><p>In this blog post, we’ll write a very small VIM script, called <code>customFoam.vim</code>,  which is capable of doing a couple of things:</p>\n<ul>\n<li>It needs to be aware of the current file’s FileType.</li>\n<li>When the file is of type <code>foam</code>, VIM should set a couple of things up:<ul>\n<li>Changing the path variable for the <code>:find</code> command so it includes our case’s directory.</li>\n<li>Changing VIM’s current directory to case directory.</li>\n</ul>\n</li>\n<li>At this moment, that’s all, but we’ll add some stuff in the upcoming blog posts.</li>\n</ul>\n<h3 id=\"First-steps-Determining-file-types\"><a href=\"#First-steps-Determining-file-types\" class=\"headerlink\" title=\"First steps: Determining file types\"></a>First steps: Determining file types</h3><p>There are two common ways to determine a file type for a file:</p>\n<ul>\n<li>Use the extension in its same; I call it the <code>lazy Windows way</code>: for example ,files that have names ending with <code>.html</code> are considered HTML files no matter what their content is.</li>\n<li>Take a look at the file’s content then decide; This is the Unix way, which we’ll be using here: It just means we’ll search the content of a file for the line that says <code>FoamFile</code>.</li>\n</ul>\n<p>We are not the first ones who try to detect <code>foam</code> file type in VIM; the <em>vim-OpenFoam-syntax</em> plugin already does that. Actually, it assigns different file types for different <code>foam</code> files. For example, it sets: <code>ft=&quot;foam256_thermodynamicProperties&quot;</code> for <code>thermodynamicProperties</code> dictionaries, but in general, its sets the file type to <code>foam256_general</code>.</p>\n<p>Thus, if you have the plugin installed, you already have the required means to detect <code>foam</code> file type. However, for the sake of leaning VIM, we’ll illustrate a very quick way to do it (but not that efficient!).</p>\n<p>All what we have to do is to write a small script -which contains only one function- searching the first few lines of a file for the keyword <code>FoamFile</code>.<br>This tells VIM that the file is a <code>OpenFOAM Dictionary File</code>:</p>\n<pre><code class=\"vim\">&quot; Filename: foamFT.vim\n\n&quot; No debug stuff\n&quot; Should check if the file type is already set\n&quot; But it&#39;s OK; just set it again\n\nfunction! SetFoamType()\n    &quot; loop through the first 10 lines\n    &quot; FoamFile is at line 8 usually\n    for nL in range(1,10)\n    &quot; match &#39;FoamFile&#39;\n        if (getline(nL) =~ &#39;FoamFile&#39;)\n            setfiletype foam\n            &quot; if file type is set, leave the loop\n            break\n        endif\n    endfor\nendfunction\n\n&quot; That&#39;s it!\n&quot; Now, when to call it?\naugroup FOAMFTautocmds\nautocmd!\nautocmd BufRead * call SetFoamType()\naugroup End</code></pre>\n<p>To check whether the script works or not; Just execute the ex-command <code>:set ft</code> while an OpenFOAM dictionary is loaded. If it works, the output should say <em>filetype=foam</em>.</p>\n<h3 id=\"Now-we-know-the-filetype-then-what\"><a href=\"#Now-we-know-the-filetype-then-what\" class=\"headerlink\" title=\"Now we know the filetype, then what?\"></a>Now we know the filetype, then what?</h3><p>Well, <strong>VIM</strong> knows <em>what</em> we are editing, but it doesn’t know <em>where</em> we are editing it. In fact, it does know the exact path to the current file (try running the ex-command <code>:pwd</code>): VIM considers the startup-directory as your current directory; and to change it, guess what, we have to use the <code>:cd</code> (change directory!) command.</p>\n<p>If you invoke VIM from the case directory, you’ll have the advantage of file names auto-completion in command-line mode; that is, when you type <code>:e c&lt;TAB&gt;</code>, VIM automatically completes <em>constant</em> for you. But, if, for example, you invoke it from the system directory of a case, it won’t know about the files in the other directories (<em>0</em>, <em>constant</em> … etc).</p>\n<p>There’s also the super-useful command <code>:find</code> which finds the specified file in the path (could include multiple -independent- directories) and then edit it. The desired work-flow can be summarized as follows: While editing <code>blockMeshDict</code> in <em>system</em> directory of a case; type <code>:find t&lt;TAB&gt;</code>, which instantly expands to <code>:find transportProperties</code> (Note that this file is located under <em>constant</em> directory), then, hitting <em>ENTER</em> switches to that file to edit it.</p>\n<pre><code class=\"vim\">&quot; Filename: customFoam.vim\n\nfunction! FOAMSetPathToCaseDir()\n    &quot; IF you care only for files in\n    &quot; system, 0, and constant, use\n    &quot; let caseDir = expand(&#39;%:p:h:h&#39;)\n    &quot; But, I&#39;m a regexp lover, so,\n    &quot; Make Vim remember everything in the path until case name.\n    &quot; delete everything else!\n    let caseDir = expand(&#39;%:p:s?\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*?\\1?&#39;)\n    &quot; set path to include all subdirs of caseDir.\n    &quot; you can also use &#39;=+&#39; instead of &#39;=&#39; to add the caseDir to\n    &quot; the default path; but I like it this way.\n    exe &#39;set path=&#39;.caseDir.&#39;/**&#39;\n    &quot; I want to run blockMesh, solvers and other tools\n    &quot; Directly in VIM, so change dir to casedir\n    exe &#39;cd &#39;.caseDir\nendfunction\n\n&quot; This is just incredible\n\naugroup FOAMautocmds\nautocmd!\nautocmd FileType foam* call FOAMSetPathToCaseDir()\naugroup End</code></pre>\n<p>Let’s go through that script line-by-line, shall we?</p>\n<ul>\n<li><p><code>function! FOAMSetPathToCaseDir()</code> overwrites any function defined with this name (Remember, user-defined function names start with a capital letter). <code>endfunction</code> denotes the end of function block.</p>\n</li>\n<li><p>All lines preceded with ( <code>&quot;</code> ) are considered comments.</p>\n</li>\n<li><p>The line <code>let caseDir = expand(&#39;%:p:s?\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*?\\1?&#39;)</code> needs deeper explanation: </p>\n<ol>\n<li>The standard function <code>let</code> defines Vim Variables (In this case, variables are local to the user-defined function).</li>\n<li><em>caseDir</em> is the name of our variable (a string). It is local to the function: To use a global variable inside a function, name it <code>g:var</code>, to make it available only in this script, use <code>s:var</code>, and, in fact, to use a local variable in a function, it should be called <code>l:var</code>, but this is tolerated.</li>\n<li>The standard function <code>expand</code> manipulates filenames (shortcut <em>%</em>) and paths to them, with modifiers:<ol start=\"4\">\n<li><code>:p</code> prints the whole absolute path to the file, eg. while editing <em>blockMeshDict</em>,<br>the ex-command <code>echo expand(&#39;%:p&#39;)</code> should display something like<br><code>/home/path-to-case/system/blockMeshDict</code>.</li>\n<li><code>:h</code> removes the last entry in a path, eg. <code>echo expand(&#39;%:p:h&#39;)</code> would display<br><code>/home/path-to-case/system</code></li>\n<li><code>:s?pattern?string?</code> acts like the substitute command. <em>pattern</em> is a regular expression, and <em>string</em> accepts <strong>back-references</strong>; All the power one needs in one command.</li>\n<li>So, the regexp <code>\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*</code> remembers everything from the start of filename to “run” (hopefully, your OpenFOAM cases directory) to the first directory (that’s the case dir. at least for me). Case Name may contain alphabet characters, digits, dots and spaces (The last two are really bad options). The rest of the path is forgotten (eg. /system/blockMeshDict).</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<p>This way, we can find our path to the case no matter what case file we are editing!</p>\n<ul>\n<li><p>In the line <code>exe &#39;set path=&#39;.caseDir.&#39;/**&#39;</code> , the command <code>exe</code> (short for <code>execute</code>) executes the following string as an ex-command. Concatenation in VIML is done with a dot,  and because our <em>caseDir</em> variable is a string, and we are still inside the same function, it can be concatenated with other strings. The /** part expands to all sub-directories, to the last one of them, no matter how many levels of directories the case have.</p>\n</li>\n<li><p>The path variable is set so the <code>:find</code> command can help us a bit.</p>\n</li>\n<li><p>I like to change the directory to the case dir. so I can run commands directly from within VIM without worrying about which files I’m editing, or the start-up directory. For that, we simply use the <code>:cd</code> ex-command (VIM’s command).</p>\n</li>\n</ul>\n<p>The function is completed, now, we have to find a way to automate calling it: <code>auto-commands</code>. Simply, we group all of our autocmds in a group called <code>FOAMautocmds</code> (Good practice but optional) .</p>\n<ul>\n<li><p><code>autocmd!</code> overwrites previous autocmds of this group (often abbriviated as <code>au!</code> ).</p>\n</li>\n<li><p>We want to call the function when we open a file of type <code>foam*</code> (including <code>foam</code>, <code>foam_general</code> … etc), so we write: <code>autocmd FileType foam* call FOAMSetPathToCaseDir()</code><br>That’s it, source the script in your <code>.vimrc</code> file and you are good to test it out:</p>\n</li>\n<li><p>From the shell (from /../constant/polyMesh in an arbitrary OpenFOAM case, where the mesh is present) run <code>vim boundary</code></p>\n</li>\n<li><p>Now, in Vim, type <code>:fin tr&lt;TAB&gt;</code> (<code>fin</code> is a short form for <code>find</code>) then hit ENTER.</p>\n</li>\n<li><p>Check both the path and the working directory (using <code>:set path</code> and <code>:pwd</code> respectively).</p>\n</li>\n<li><p>You can issue <code>:!blockMesh</code> while editing the file to rebuild the mesh.</p>\n</li>\n</ul>\n<p>That’s it for now, the next post will explain ways to get the most of VIM compilers to run <code>blockMesh</code> and OpenFOAM solvers on cases right from inside VIM and browse errors.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Today, I’m starting new (short) post series suggesting tricks to customize the <strong>VIM</strong> text editor so it can be used to edit OpenFOAM cases more efficiently. Of course, making VIM work optimally with every single piece of software you have installed through scripting is a bit of “over-kill”; but having it configured properly is crucial.</p>\n<blockquote>\n<p>These series of posts are for those who are ready to write some lines of VIML code to add interesting functionality to VIM (OpenFOAM-wise).</p>\n</blockquote>\n<h2 id=\"VIM-Plugins-for-OpenFOAM\"><a href=\"#VIM-Plugins-for-OpenFOAM\" class=\"headerlink\" title=\"VIM Plugins for OpenFOAM\"></a>VIM Plugins for OpenFOAM</h2><p>We can easily customize our VIM installation using our own scripts, sourced in the <code>.vimrc</code> file. The versatility of VIM allows for sharing these scripts between users, we then call the scripts: <em>Plug-ins</em>.</p>\n<p>These plugins differ in both their goal and their implementation:</p>\n<ul>\n<li>General purpose plugins. Eg. for handling text formatting, VIM configuration.</li>\n<li>File-Type specific plugins. Eg. those which operate only on C source/header files.</li>\n<li>Syntax highlighting. Eg. highlight OpenFOAM keywords in a OpenFOAM dictionary.</li>\n<li>Compiler plugins. Eg. interpret a python script from VIM command line and jump to errors.</li>\n</ul>\n<p>As OpenFOAM users, we’ll naturally be interested in any C++ related plugins in addition to few OpenFOAM-specific ones.</p>\n<h3 id=\"Syntax-Highlighting-of-OPENFOAM-dictionaries-in-VIM\"><a href=\"#Syntax-Highlighting-of-OPENFOAM-dictionaries-in-VIM\" class=\"headerlink\" title=\"Syntax Highlighting of OPENFOAM dictionaries in VIM\"></a>Syntax Highlighting of OPENFOAM dictionaries in VIM</h3><p>It’s always good to have keyword-specific highlighting of a file; It helps you instantly catch misspelled keywords, it makes understanding the file easier; and with appropriate color themes, it makes you feel comfortable while editing the file.</p>\n<p>There is already a VIM plugin that takes care of OpenFOAM keywords highlighting (Vim-OpenFOAM-syntax). It’s true that the plugin does some weird stuff (eg. loading weird files into the buffer list) but, in general, it’s good for the job of highlighting OpenFOAM syntax. To install it on your system, follow the instructions at <a href=\"https://github.com/effi/vim-OpenFoam-syntax\" target=\"_blank\" rel=\"noopener\">Vim-OpenFoam-syntax</a> on github, or the fork for manual installation (not that scary) <a href=\"https://bitbucket.org/shor-ty/vimextensionopenfoam\" target=\"_blank\" rel=\"noopener\">Vim-Extension-OpenFOAM</a> on bitbucket.</p>\n<p>While programming, I usually use a couple of VIM plugins:</p>\n<ul>\n<li><em>c-support</em>: to turn VIM into a C/C++ IDE (code snippets … etc).</li>\n<li><em>taglist</em>: to browse source code efficiently</li>\n</ul>\n<h2 id=\"Your-own-VIM-scripts\"><a href=\"#Your-own-VIM-scripts\" class=\"headerlink\" title=\"Your own VIM scripts\"></a>Your own VIM scripts</h2><p>In this blog post, we’ll write a very small VIM script, called <code>customFoam.vim</code>,  which is capable of doing a couple of things:</p>\n<ul>\n<li>It needs to be aware of the current file’s FileType.</li>\n<li>When the file is of type <code>foam</code>, VIM should set a couple of things up:<ul>\n<li>Changing the path variable for the <code>:find</code> command so it includes our case’s directory.</li>\n<li>Changing VIM’s current directory to case directory.</li>\n</ul>\n</li>\n<li>At this moment, that’s all, but we’ll add some stuff in the upcoming blog posts.</li>\n</ul>\n<h3 id=\"First-steps-Determining-file-types\"><a href=\"#First-steps-Determining-file-types\" class=\"headerlink\" title=\"First steps: Determining file types\"></a>First steps: Determining file types</h3><p>There are two common ways to determine a file type for a file:</p>\n<ul>\n<li>Use the extension in its same; I call it the <code>lazy Windows way</code>: for example ,files that have names ending with <code>.html</code> are considered HTML files no matter what their content is.</li>\n<li>Take a look at the file’s content then decide; This is the Unix way, which we’ll be using here: It just means we’ll search the content of a file for the line that says <code>FoamFile</code>.</li>\n</ul>\n<p>We are not the first ones who try to detect <code>foam</code> file type in VIM; the <em>vim-OpenFoam-syntax</em> plugin already does that. Actually, it assigns different file types for different <code>foam</code> files. For example, it sets: <code>ft=&quot;foam256_thermodynamicProperties&quot;</code> for <code>thermodynamicProperties</code> dictionaries, but in general, its sets the file type to <code>foam256_general</code>.</p>\n<p>Thus, if you have the plugin installed, you already have the required means to detect <code>foam</code> file type. However, for the sake of leaning VIM, we’ll illustrate a very quick way to do it (but not that efficient!).</p>\n<p>All what we have to do is to write a small script -which contains only one function- searching the first few lines of a file for the keyword <code>FoamFile</code>.<br>This tells VIM that the file is a <code>OpenFOAM Dictionary File</code>:</p>\n<pre><code class=\"vim\">&quot; Filename: foamFT.vim\n\n&quot; No debug stuff\n&quot; Should check if the file type is already set\n&quot; But it&#39;s OK; just set it again\n\nfunction! SetFoamType()\n    &quot; loop through the first 10 lines\n    &quot; FoamFile is at line 8 usually\n    for nL in range(1,10)\n    &quot; match &#39;FoamFile&#39;\n        if (getline(nL) =~ &#39;FoamFile&#39;)\n            setfiletype foam\n            &quot; if file type is set, leave the loop\n            break\n        endif\n    endfor\nendfunction\n\n&quot; That&#39;s it!\n&quot; Now, when to call it?\naugroup FOAMFTautocmds\nautocmd!\nautocmd BufRead * call SetFoamType()\naugroup End</code></pre>\n<p>To check whether the script works or not; Just execute the ex-command <code>:set ft</code> while an OpenFOAM dictionary is loaded. If it works, the output should say <em>filetype=foam</em>.</p>\n<h3 id=\"Now-we-know-the-filetype-then-what\"><a href=\"#Now-we-know-the-filetype-then-what\" class=\"headerlink\" title=\"Now we know the filetype, then what?\"></a>Now we know the filetype, then what?</h3><p>Well, <strong>VIM</strong> knows <em>what</em> we are editing, but it doesn’t know <em>where</em> we are editing it. In fact, it does know the exact path to the current file (try running the ex-command <code>:pwd</code>): VIM considers the startup-directory as your current directory; and to change it, guess what, we have to use the <code>:cd</code> (change directory!) command.</p>\n<p>If you invoke VIM from the case directory, you’ll have the advantage of file names auto-completion in command-line mode; that is, when you type <code>:e c&lt;TAB&gt;</code>, VIM automatically completes <em>constant</em> for you. But, if, for example, you invoke it from the system directory of a case, it won’t know about the files in the other directories (<em>0</em>, <em>constant</em> … etc).</p>\n<p>There’s also the super-useful command <code>:find</code> which finds the specified file in the path (could include multiple -independent- directories) and then edit it. The desired work-flow can be summarized as follows: While editing <code>blockMeshDict</code> in <em>system</em> directory of a case; type <code>:find t&lt;TAB&gt;</code>, which instantly expands to <code>:find transportProperties</code> (Note that this file is located under <em>constant</em> directory), then, hitting <em>ENTER</em> switches to that file to edit it.</p>\n<pre><code class=\"vim\">&quot; Filename: customFoam.vim\n\nfunction! FOAMSetPathToCaseDir()\n    &quot; IF you care only for files in\n    &quot; system, 0, and constant, use\n    &quot; let caseDir = expand(&#39;%:p:h:h&#39;)\n    &quot; But, I&#39;m a regexp lover, so,\n    &quot; Make Vim remember everything in the path until case name.\n    &quot; delete everything else!\n    let caseDir = expand(&#39;%:p:s?\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*?\\1?&#39;)\n    &quot; set path to include all subdirs of caseDir.\n    &quot; you can also use &#39;=+&#39; instead of &#39;=&#39; to add the caseDir to\n    &quot; the default path; but I like it this way.\n    exe &#39;set path=&#39;.caseDir.&#39;/**&#39;\n    &quot; I want to run blockMesh, solvers and other tools\n    &quot; Directly in VIM, so change dir to casedir\n    exe &#39;cd &#39;.caseDir\nendfunction\n\n&quot; This is just incredible\n\naugroup FOAMautocmds\nautocmd!\nautocmd FileType foam* call FOAMSetPathToCaseDir()\naugroup End</code></pre>\n<p>Let’s go through that script line-by-line, shall we?</p>\n<ul>\n<li><p><code>function! FOAMSetPathToCaseDir()</code> overwrites any function defined with this name (Remember, user-defined function names start with a capital letter). <code>endfunction</code> denotes the end of function block.</p>\n</li>\n<li><p>All lines preceded with ( <code>&quot;</code> ) are considered comments.</p>\n</li>\n<li><p>The line <code>let caseDir = expand(&#39;%:p:s?\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*?\\1?&#39;)</code> needs deeper explanation: </p>\n<ol>\n<li>The standard function <code>let</code> defines Vim Variables (In this case, variables are local to the user-defined function).</li>\n<li><em>caseDir</em> is the name of our variable (a string). It is local to the function: To use a global variable inside a function, name it <code>g:var</code>, to make it available only in this script, use <code>s:var</code>, and, in fact, to use a local variable in a function, it should be called <code>l:var</code>, but this is tolerated.</li>\n<li>The standard function <code>expand</code> manipulates filenames (shortcut <em>%</em>) and paths to them, with modifiers:<ol start=\"4\">\n<li><code>:p</code> prints the whole absolute path to the file, eg. while editing <em>blockMeshDict</em>,<br>the ex-command <code>echo expand(&#39;%:p&#39;)</code> should display something like<br><code>/home/path-to-case/system/blockMeshDict</code>.</li>\n<li><code>:h</code> removes the last entry in a path, eg. <code>echo expand(&#39;%:p:h&#39;)</code> would display<br><code>/home/path-to-case/system</code></li>\n<li><code>:s?pattern?string?</code> acts like the substitute command. <em>pattern</em> is a regular expression, and <em>string</em> accepts <strong>back-references</strong>; All the power one needs in one command.</li>\n<li>So, the regexp <code>\\(\\/.*run\\/[a-zA-Z1-9\\. ]*\\)\\/.*</code> remembers everything from the start of filename to “run” (hopefully, your OpenFOAM cases directory) to the first directory (that’s the case dir. at least for me). Case Name may contain alphabet characters, digits, dots and spaces (The last two are really bad options). The rest of the path is forgotten (eg. /system/blockMeshDict).</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<p>This way, we can find our path to the case no matter what case file we are editing!</p>\n<ul>\n<li><p>In the line <code>exe &#39;set path=&#39;.caseDir.&#39;/**&#39;</code> , the command <code>exe</code> (short for <code>execute</code>) executes the following string as an ex-command. Concatenation in VIML is done with a dot,  and because our <em>caseDir</em> variable is a string, and we are still inside the same function, it can be concatenated with other strings. The /** part expands to all sub-directories, to the last one of them, no matter how many levels of directories the case have.</p>\n</li>\n<li><p>The path variable is set so the <code>:find</code> command can help us a bit.</p>\n</li>\n<li><p>I like to change the directory to the case dir. so I can run commands directly from within VIM without worrying about which files I’m editing, or the start-up directory. For that, we simply use the <code>:cd</code> ex-command (VIM’s command).</p>\n</li>\n</ul>\n<p>The function is completed, now, we have to find a way to automate calling it: <code>auto-commands</code>. Simply, we group all of our autocmds in a group called <code>FOAMautocmds</code> (Good practice but optional) .</p>\n<ul>\n<li><p><code>autocmd!</code> overwrites previous autocmds of this group (often abbriviated as <code>au!</code> ).</p>\n</li>\n<li><p>We want to call the function when we open a file of type <code>foam*</code> (including <code>foam</code>, <code>foam_general</code> … etc), so we write: <code>autocmd FileType foam* call FOAMSetPathToCaseDir()</code><br>That’s it, source the script in your <code>.vimrc</code> file and you are good to test it out:</p>\n</li>\n<li><p>From the shell (from /../constant/polyMesh in an arbitrary OpenFOAM case, where the mesh is present) run <code>vim boundary</code></p>\n</li>\n<li><p>Now, in Vim, type <code>:fin tr&lt;TAB&gt;</code> (<code>fin</code> is a short form for <code>find</code>) then hit ENTER.</p>\n</li>\n<li><p>Check both the path and the working directory (using <code>:set path</code> and <code>:pwd</code> respectively).</p>\n</li>\n<li><p>You can issue <code>:!blockMesh</code> while editing the file to rebuild the mesh.</p>\n</li>\n</ul>\n<p>That’s it for now, the next post will explain ways to get the most of VIM compilers to run <code>blockMesh</code> and OpenFOAM solvers on cases right from inside VIM and browse errors.</p>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Dec 25 2019 14:37:24 GMT+0100 (Central European Standard Time)","title":"Customize VIM to work efficiently with OpenFOAM - Part 1","path":"productivity/customize-vim-to-work-efficiently-with-openfoam-part-1/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2018-08-26T23:00:00.000Z","pv":0,"totalPV":0,"categories":"productivity","tags":["OpenFOAM","Vim"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Customize VIM to work efficiently with OpenFOAM - Part 2","abstract":"Working in the right directory and easier file navigation aren't productive enough,  we need a way to run OpenFOAM commands right from inside VIM while editing files","header_image":"/assets/images/ionic2-banner.png","cover":"https://s2.ax1x.com/2019/09/18/n7E8Wd.png","date":"2018-08-27T23:00:00.000Z","_content":"\nWe've seen in [the previous part](/vim-openfoam-power-part1) some ways to improve our interaction with OpenFOAM case directories and files. In this new post, we want to implement something that facilitates running `blockMesh`, or the case solver, right from inside VIM; without going back to the shell. Of course, our implementation should catch errors in the quick fix list (if there are any),  then go to the concerned file, and put the cursor on the error line.\n\nFor this, we'll use two main VIM facilities: *VIM compilers* and *QuickFix* list.\nThe compilers are used to automatically run a shell command on a file; For example:\n\n- Running a `gcc` (or `make` if there is a *makeFile*) command on a `*.cpp` file would compile it to an executable, \n- Running a `pdflatex` (or better `latexmk`) command on a *Latex file* would compile a PDF version of the document.\n- Running a `blockMesh` command on a *blockMeshDict* would build the mesh and check for errors in `blockMesh`'s output.\n\nIn fact, we can run as many commands as we want on the file using VIM compilers. Think: Generate the mesh, check its validity, set fields and run appropriate solvers (In my opinion, this kind of work-flows beats GUIs to death).\n\nSo, let's get to work: We need to know how VIM's default compiler plugins are set, and the best way to learn is by looking at examples. On Unix systems, the default compilers should be in `/usr/share/vim/vim74/compiler` directory, you can use VIM's ex-command `:compile` to find out where  they are on your system.\n\n## Studying an example VIM compiler\n\nFirst of all, a VIM compiler plugin is nothing more than a short `VimL` script, configuring two main things: `errorformat` (scanf-style strings, separated by commas, showing the format of error lines) and `makeprg` (make program, the shell executable to run).\n\nAs an example, let's go through the *ant-compiler* line by line:\n\n~~~vim\n\" Vim Compiler File\n\" Compiler:\tant\n\" Maintainer:\tJohannes Zellner <johannes@zellner.org>\n\" Last Change:\tMi, 13 Apr 2005 22:50:07 CEST\n~~~\n\nThe header, just for information, then we have some checks to perform:\n\n~~~vim\nif exists(\"current_compiler\")\n    finish\nendif\nlet current_compiler = \"ant\"\n\nif exists(\":CompilerSet\") != 2\t\t\" older Vim always used :setlocal\n  command -nargs=* CompilerSet setlocal <args>\nendif\n~~~\n\nThe first if structure checks if the compiler is already set (if it's the case, vim will leave the script). If not, it\ndeclares `current_compiler` as *\"ant\"* (so, the next time the script executes, it will be finished in the first if structure). The second if statement sets compatibility stuff for older VIM versions.\n\nAll the `cpo`-related stuff are set to configure Vi-compatibility options, we don't need to learn about this topic, just don't touch those lines!\n\nThe line `CompilerSet makeprg=ant` sets the ant program as the make program (when you execute the ex-command `:make`, VIM runs `ant` in a shell, and watches for its output).\n\n`CompilerSet errorformat=\\ %#[%.%#]\\ %#%f:%l:%v:%*\\\\d:%*\\\\d:\\%t%[%^:]%#:%m` shows VIM how to find the error line and what to extract from it (explained in more details in the next section).\n\n~~~vim\nlet s:cpo_save = &cpo\nset cpo&vim\n\nCompilerSet makeprg=ant\n\" first  line:\n\"     ant with jikes +E, which assumes  the following\n\"     two property lines in your 'build.xml':\n\"\n\"         <property name = \"build.compiler\"       value = \"jikes\"/>\n\"         <property name = \"build.compiler.emacs\" value = \"true\"/>\n\"\n\" second line:\n\"     ant with javac\n\"\n\" note that this will work also for tasks like [wtkbuild]\n\"\nCompilerSet errorformat=\\ %#[%.%#]\\ %#%f:%l:%v:%*\\\\d:%*\\\\d:\\ %t%[%^:]%#:%m,\n    \\%A\\ %#[%.%#]\\ %f:%l:\\ %m,%-Z\\ %#[%.%#]\\ %p^,%C\\ %#[%.%#]\\ %#%m\n\n\" ,%-C%.%#\n\nlet &cpo = s:cpo_save\nunlet s:cpo_save\n~~~\n\n\n### Using errorformats to catch OpenFOAM Fatal Errors\n\nThese *errorformats* are similar to regular expressions. Assume a program outputting errors in the following format:\n\n`Error: something-is-wrong in /path/to/file at line 25`\n\nTo match this error line, we use a single scanf-style string, that may contain special items (these are the most important ones):\n- `%f` matches a file name (a string), eg. */path/to/file*\n- `%l` matches a line number (digits), eg. *25*\n- `%m` matches an error message, eg. *something-is-wrong*\n- `%*{conv}` converts stuff from regexp to scanf string, eg. %*[a-z] matches any number of lowercase alphabets.\n\nThus, the example line would be matched with `\\Error: %m in %f at line %l`\n\n## Building a compiler plugin for blockMesh\n\nThe goal of this section is to build a blockMesh-compiler for VIM which can be used to browse errors when the tool fails. For this, we need to create our custom-compilers directory `$HOME/.vim/compiler`.\n\nCopy the `ant.vim` compiler to that directory and rename it as `blockMesh.vim`, on Unix systems, one can say:\n\n~~~bash\ncp /usr/share/vim/vim74/compiler/ant.vim ~/.vim/compiler/blockMesh.vim\n~~~\n\nModify the header so it suits your preferences, and then start building the custom VIM compiler:\n- Hopefully, you are editing the file with VIM.\n- Change all occurrences of \"*ant*\" to \"*blockMesh*\" in the file `:%s/ant/blockMesh/g`\n- Time to set the \"errorformat\": We know that OpenFOAM displays errors in multiple\nlines (if you write \"hxe\" instead of \"hex\" in a *blockMeshDict*):\n\n~~~text\n--> FOAM FATAL IO ERROR:\nCellShape has unknown model on line 45 the word 'hxe'\nfile: /home/elwardi/OpenFOAM/elwardi-4.1/run/movingCone/system/blockMeshDict.blocks at line 45.\n~~~\n\nNote that this is NOT a general FOAM ERROR; some other IO errors specify a range of lines; others suggest solutions before stating the error-line.\n\nThe most important line is probably the one stating the filename, and the exact line to jump to (these will be stored in `%f` and `%l` respectively).However, there are some problems in the filename: notice the ending `.blocks` appended to it, in fact, things could be messier: `.ddtschemes.default`.\n\n\nHow many dots are there in the filename? The real problem is that the `path/to/case` always contains a dot character (frrom the OpenFOAM version, eg. user-4.1), so matching from the start of the path to the first dot character won't work!\n\nInstead, we do notice that versions are expressed in digits, and that case names usually contain no dots (hopefully); so, matching the path up to the first dot character preceding an alphabet character is a good idea:\n`CompilerSet errorformat=\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.`\n\n- `%f` matches the string \"file: \" at the start of line, then starts storing the filename up to the first dot that falls immediately before a lowercase alphabet character (hopefully, that's the keyword `.blocks`, or `.fvSchemes` ...). Then we'll have  some lowercase characters and spaces until we reach the last line before \"line\" string,  then `%l` catches the line number (in case there are two, it catches the last one!).\n\nNow, what to tell the user? Well, It's good to have a message at the status line saying \"*CellShape has unknown model ...*\", so, we should use a complex multi-line *errorformat*! But, still we'll have to deal with the problem of how many lines are there between the line that tells our message and the line that spells out the error line. \n\nThis is actually troublesome, so, I've decided to approach the situation differently: We leave our filename and error-line alone, and add another error that captures only the message (using a simple multi-line error-format).\n\n~~~vim\nCompilerSet errorformat=\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.\n                        \\%E-->\\ %*[A-Z:\\ ],%Z%m\n~~~\n\n- `%E` denotes the start of a multi-line error.\n- Then we find the line saying `Fatal IO Error` (starts with –> then there are some uppercase letters,semicolons, and spaces).\n- `%Z` denotes the end of multi-line error (which is only one line here!) then we capture everything in the second line as a `%m` (an error message).\n\nThe compiler plugin is now complete:\n\n~~~vim\n\" Vim Compiler File\n\" Compiler: blockMesh\n\" Fadeli Mohammed Elwardi <foamscience.github.io>\n\nif exists(\"current_compiler\")\nfinish\nendif\n\nlet current_compiler = \"blockMesh\"\n\nif exists(\":CompilerSet\") != 2\n\" older Vim always used :setlocal\ncommand -nargs=* CompilerSet setlocal <args>\nendif\n\nlet s:cpo_save = &cpo\nset cpo&vim\n\nCompilerSet makeprg=blockMesh\nCompilerSet errorformat=\n                 \\\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.,\n                 \\%E->\\ %*[A-Z:\\ ],%Z%m\n\nlet &cpo = s:cpo_save\nunlet s:cpo_save\n~~~\n\n\nAnd you should be ready to test it with a sample (erroneous) `blockMeshDict`:\n1. Make something of importance go wrong in a `blockMeshDict` (the last ; in a block is not that important).\n2. While editing `blockMeshDict`, run `:compile blockMesh` to set the correct compiler (We'll improve on this).\n3. Hopefully your working directory is set by our previous `customFoam` script, if it is the case, run the ex-command `:make` and check that beautiful (and useful) error message!\n4. To automatically jump to the error line, type `:cn` (short of cnext).\n\n> The error format can't handle \"from line 15 to line 18.\" lines, because no file path will be output in such lines!\n\n\nNow that VIM knows how to handle `blockMesh`, let's introduce it to the other FOAM applications (we'll be doing just solvers for illustration). Wait, should we repeat the work done previously tens of times? Absolutely not.\n\nThe goal of this blog post is to achieve this work-flow:\n1. When I read in a FOAM File, VIM changes its working dir. to case dir. (already implemented in `customFoam.vim`, see [this earlier post](/vim-openfoam-power-part1))\n2. VIM looks for the suitable OpenFOAM solver for the current case (mentioned in `controlDict`).\n3. VIM sets the right solver as the `makeprg` automatically.\n4. When I run `:make` (Or press a shortcut to it), VIM will filter the output to show me the errors if there are any.\n\nOne more thing, I want my own solvers to be involved, so, I won't generate a list of standard solvers and compare anything to its content. That's one lousy approach to take!\n\nInstead, I'm going to define two functions: The first one, in `customFoam.vim`, which searches and stores the solver name, and the second sets the option `makeprg` dynamically in a general compiler plugin called `foam.vim`.\n\n## Use FOAMGetApplication to get solver name\n\nFrom any file in the case dir., we can tell VIM what solver is to be used with the current case because it's mentioned in the `controlDict` file. Actually, we have two options here:\n- Use VIM to take a look at `controlDict`, and store a string representing the solver name.\n- Or, do it the FOAM way (use run functions: `getApplication`), which needs a working Installation of OpenFOAM (but that's Ok, you won't be reading this guide otherwise). This method is heavily used in `.Allrun` shell scripts.\n\nIn order to learn how VIM interacts with the system, we'll use the second option: We'll add a `FOAMGetApplication()` function to our `customFoam.vim`\n\n~~~vim\nfunction! FOAMGetApplication()\n    \" Source run functions and execute getApplication\n    let cmd=\". $WM_PROJECT_DIR/bin/tools/RunFunctions && getApplication\"\n    let foamApp=system(cmd)[:-2]\n    echomsg 'This case is set to be simulated with: '.foamApp\n    return foamApp\nendfunction\n~~~\n\n- `cmd` is a string, representing the shell command that sources run functions and then executes `getApplication` in the current case dir.\n- `foamApp` is the output of the previous command (solver name), the `[:-2]` part deletes the last two characters from the output of the command (by default, It will output `icoFoam @`, the last two characters are not needed).\n- `echomsg` writes messages to the status line, and keeps them in messages list (run `:messages`).\n\n## The general VIM compiler plugin for OpenFOAM\n\nCopy `blockMesh.vim` to `foam.vim`.\n- Don't forget `let current_compiler = \"foam\"`\n- Declare a script variable, storing the solver name\n`let s:foamApp = FOAMGetApplication()`\n- Instead of `CompilerSet`, define a new function setting the compiler to the solver name, then call it.\n\n~~~vim\nfunction! FOAMSetCompiler()\n    exe 'CompilerSet makeprg='.s:foamApp\nendfunction\ncall FOAMSetCompiler()\n~~~\n\n- For the file line in the error format, use\n`\\\\file:\\ %f\\.%*[a-zA-Z]%*[a-zA-Z\\ .]\\ line\\ %l%*[.a-zA-Z0-9\\ ]`\nSo we can cover stuff like \"from line 15 to line 20.\" and be more dynamic with the number of dots in the filename (handle things like `0/U.boundaryField.inlet`). Done!! We are ready to go!\n\n## Final tweaks: VIM's auto-commands\n\nWe only need to tell VIM to set the compiler to \"foam\" whenever a Foam File is opened; and to set the compiler to `blockMesh` if the entered buffer is named `blockMeshDict`.\n\n~~~vim\naugroup FOAMautocmds\nautocmd!\nautocmd FileType foam* call FOAMSetPathToCaseDir()\nautocmd FileType foam* compile foam\nautocmd BufEnter *blockMeshDict compile blockMesh\naugroup End\n~~~\n\n> *FileType* autocmds will *always* be executed before *BufEnter* ones, so `blockMeshDict` files will always have `blockMesh` as their compiler.\n\n\nThe complete configuration files can be downloaded from here: <a href=\"https://drive.google.com/uc?id=1Sf-6Pm8twy8dM6YIcWZ8lMFaem2S2F0O&export=download\" class=\"btn\">VIM Customization</a> \n","source":"_posts/2018-08-25-vim-openfoam-power-part2.md","raw":"---\ntitle: Customize VIM to work efficiently with OpenFOAM - Part 2\nabstract: \"Working in the right directory and easier file navigation aren't productive enough, \n\twe need a way to run OpenFOAM commands right from inside VIM while editing files\"\nheader_image: /assets/images/ionic2-banner.png\ncover: https://s2.ax1x.com/2019/09/18/n7E8Wd.png\ndate: 2018/08/28\ncategories:\n  - productivity\ntags:\n  - OpenFOAM\n  - Vim\n---\n\nWe've seen in [the previous part](/vim-openfoam-power-part1) some ways to improve our interaction with OpenFOAM case directories and files. In this new post, we want to implement something that facilitates running `blockMesh`, or the case solver, right from inside VIM; without going back to the shell. Of course, our implementation should catch errors in the quick fix list (if there are any),  then go to the concerned file, and put the cursor on the error line.\n\nFor this, we'll use two main VIM facilities: *VIM compilers* and *QuickFix* list.\nThe compilers are used to automatically run a shell command on a file; For example:\n\n- Running a `gcc` (or `make` if there is a *makeFile*) command on a `*.cpp` file would compile it to an executable, \n- Running a `pdflatex` (or better `latexmk`) command on a *Latex file* would compile a PDF version of the document.\n- Running a `blockMesh` command on a *blockMeshDict* would build the mesh and check for errors in `blockMesh`'s output.\n\nIn fact, we can run as many commands as we want on the file using VIM compilers. Think: Generate the mesh, check its validity, set fields and run appropriate solvers (In my opinion, this kind of work-flows beats GUIs to death).\n\nSo, let's get to work: We need to know how VIM's default compiler plugins are set, and the best way to learn is by looking at examples. On Unix systems, the default compilers should be in `/usr/share/vim/vim74/compiler` directory, you can use VIM's ex-command `:compile` to find out where  they are on your system.\n\n## Studying an example VIM compiler\n\nFirst of all, a VIM compiler plugin is nothing more than a short `VimL` script, configuring two main things: `errorformat` (scanf-style strings, separated by commas, showing the format of error lines) and `makeprg` (make program, the shell executable to run).\n\nAs an example, let's go through the *ant-compiler* line by line:\n\n~~~vim\n\" Vim Compiler File\n\" Compiler:\tant\n\" Maintainer:\tJohannes Zellner <johannes@zellner.org>\n\" Last Change:\tMi, 13 Apr 2005 22:50:07 CEST\n~~~\n\nThe header, just for information, then we have some checks to perform:\n\n~~~vim\nif exists(\"current_compiler\")\n    finish\nendif\nlet current_compiler = \"ant\"\n\nif exists(\":CompilerSet\") != 2\t\t\" older Vim always used :setlocal\n  command -nargs=* CompilerSet setlocal <args>\nendif\n~~~\n\nThe first if structure checks if the compiler is already set (if it's the case, vim will leave the script). If not, it\ndeclares `current_compiler` as *\"ant\"* (so, the next time the script executes, it will be finished in the first if structure). The second if statement sets compatibility stuff for older VIM versions.\n\nAll the `cpo`-related stuff are set to configure Vi-compatibility options, we don't need to learn about this topic, just don't touch those lines!\n\nThe line `CompilerSet makeprg=ant` sets the ant program as the make program (when you execute the ex-command `:make`, VIM runs `ant` in a shell, and watches for its output).\n\n`CompilerSet errorformat=\\ %#[%.%#]\\ %#%f:%l:%v:%*\\\\d:%*\\\\d:\\%t%[%^:]%#:%m` shows VIM how to find the error line and what to extract from it (explained in more details in the next section).\n\n~~~vim\nlet s:cpo_save = &cpo\nset cpo&vim\n\nCompilerSet makeprg=ant\n\" first  line:\n\"     ant with jikes +E, which assumes  the following\n\"     two property lines in your 'build.xml':\n\"\n\"         <property name = \"build.compiler\"       value = \"jikes\"/>\n\"         <property name = \"build.compiler.emacs\" value = \"true\"/>\n\"\n\" second line:\n\"     ant with javac\n\"\n\" note that this will work also for tasks like [wtkbuild]\n\"\nCompilerSet errorformat=\\ %#[%.%#]\\ %#%f:%l:%v:%*\\\\d:%*\\\\d:\\ %t%[%^:]%#:%m,\n    \\%A\\ %#[%.%#]\\ %f:%l:\\ %m,%-Z\\ %#[%.%#]\\ %p^,%C\\ %#[%.%#]\\ %#%m\n\n\" ,%-C%.%#\n\nlet &cpo = s:cpo_save\nunlet s:cpo_save\n~~~\n\n\n### Using errorformats to catch OpenFOAM Fatal Errors\n\nThese *errorformats* are similar to regular expressions. Assume a program outputting errors in the following format:\n\n`Error: something-is-wrong in /path/to/file at line 25`\n\nTo match this error line, we use a single scanf-style string, that may contain special items (these are the most important ones):\n- `%f` matches a file name (a string), eg. */path/to/file*\n- `%l` matches a line number (digits), eg. *25*\n- `%m` matches an error message, eg. *something-is-wrong*\n- `%*{conv}` converts stuff from regexp to scanf string, eg. %*[a-z] matches any number of lowercase alphabets.\n\nThus, the example line would be matched with `\\Error: %m in %f at line %l`\n\n## Building a compiler plugin for blockMesh\n\nThe goal of this section is to build a blockMesh-compiler for VIM which can be used to browse errors when the tool fails. For this, we need to create our custom-compilers directory `$HOME/.vim/compiler`.\n\nCopy the `ant.vim` compiler to that directory and rename it as `blockMesh.vim`, on Unix systems, one can say:\n\n~~~bash\ncp /usr/share/vim/vim74/compiler/ant.vim ~/.vim/compiler/blockMesh.vim\n~~~\n\nModify the header so it suits your preferences, and then start building the custom VIM compiler:\n- Hopefully, you are editing the file with VIM.\n- Change all occurrences of \"*ant*\" to \"*blockMesh*\" in the file `:%s/ant/blockMesh/g`\n- Time to set the \"errorformat\": We know that OpenFOAM displays errors in multiple\nlines (if you write \"hxe\" instead of \"hex\" in a *blockMeshDict*):\n\n~~~text\n--> FOAM FATAL IO ERROR:\nCellShape has unknown model on line 45 the word 'hxe'\nfile: /home/elwardi/OpenFOAM/elwardi-4.1/run/movingCone/system/blockMeshDict.blocks at line 45.\n~~~\n\nNote that this is NOT a general FOAM ERROR; some other IO errors specify a range of lines; others suggest solutions before stating the error-line.\n\nThe most important line is probably the one stating the filename, and the exact line to jump to (these will be stored in `%f` and `%l` respectively).However, there are some problems in the filename: notice the ending `.blocks` appended to it, in fact, things could be messier: `.ddtschemes.default`.\n\n\nHow many dots are there in the filename? The real problem is that the `path/to/case` always contains a dot character (frrom the OpenFOAM version, eg. user-4.1), so matching from the start of the path to the first dot character won't work!\n\nInstead, we do notice that versions are expressed in digits, and that case names usually contain no dots (hopefully); so, matching the path up to the first dot character preceding an alphabet character is a good idea:\n`CompilerSet errorformat=\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.`\n\n- `%f` matches the string \"file: \" at the start of line, then starts storing the filename up to the first dot that falls immediately before a lowercase alphabet character (hopefully, that's the keyword `.blocks`, or `.fvSchemes` ...). Then we'll have  some lowercase characters and spaces until we reach the last line before \"line\" string,  then `%l` catches the line number (in case there are two, it catches the last one!).\n\nNow, what to tell the user? Well, It's good to have a message at the status line saying \"*CellShape has unknown model ...*\", so, we should use a complex multi-line *errorformat*! But, still we'll have to deal with the problem of how many lines are there between the line that tells our message and the line that spells out the error line. \n\nThis is actually troublesome, so, I've decided to approach the situation differently: We leave our filename and error-line alone, and add another error that captures only the message (using a simple multi-line error-format).\n\n~~~vim\nCompilerSet errorformat=\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.\n                        \\%E-->\\ %*[A-Z:\\ ],%Z%m\n~~~\n\n- `%E` denotes the start of a multi-line error.\n- Then we find the line saying `Fatal IO Error` (starts with –> then there are some uppercase letters,semicolons, and spaces).\n- `%Z` denotes the end of multi-line error (which is only one line here!) then we capture everything in the second line as a `%m` (an error message).\n\nThe compiler plugin is now complete:\n\n~~~vim\n\" Vim Compiler File\n\" Compiler: blockMesh\n\" Fadeli Mohammed Elwardi <foamscience.github.io>\n\nif exists(\"current_compiler\")\nfinish\nendif\n\nlet current_compiler = \"blockMesh\"\n\nif exists(\":CompilerSet\") != 2\n\" older Vim always used :setlocal\ncommand -nargs=* CompilerSet setlocal <args>\nendif\n\nlet s:cpo_save = &cpo\nset cpo&vim\n\nCompilerSet makeprg=blockMesh\nCompilerSet errorformat=\n                 \\\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.,\n                 \\%E->\\ %*[A-Z:\\ ],%Z%m\n\nlet &cpo = s:cpo_save\nunlet s:cpo_save\n~~~\n\n\nAnd you should be ready to test it with a sample (erroneous) `blockMeshDict`:\n1. Make something of importance go wrong in a `blockMeshDict` (the last ; in a block is not that important).\n2. While editing `blockMeshDict`, run `:compile blockMesh` to set the correct compiler (We'll improve on this).\n3. Hopefully your working directory is set by our previous `customFoam` script, if it is the case, run the ex-command `:make` and check that beautiful (and useful) error message!\n4. To automatically jump to the error line, type `:cn` (short of cnext).\n\n> The error format can't handle \"from line 15 to line 18.\" lines, because no file path will be output in such lines!\n\n\nNow that VIM knows how to handle `blockMesh`, let's introduce it to the other FOAM applications (we'll be doing just solvers for illustration). Wait, should we repeat the work done previously tens of times? Absolutely not.\n\nThe goal of this blog post is to achieve this work-flow:\n1. When I read in a FOAM File, VIM changes its working dir. to case dir. (already implemented in `customFoam.vim`, see [this earlier post](/vim-openfoam-power-part1))\n2. VIM looks for the suitable OpenFOAM solver for the current case (mentioned in `controlDict`).\n3. VIM sets the right solver as the `makeprg` automatically.\n4. When I run `:make` (Or press a shortcut to it), VIM will filter the output to show me the errors if there are any.\n\nOne more thing, I want my own solvers to be involved, so, I won't generate a list of standard solvers and compare anything to its content. That's one lousy approach to take!\n\nInstead, I'm going to define two functions: The first one, in `customFoam.vim`, which searches and stores the solver name, and the second sets the option `makeprg` dynamically in a general compiler plugin called `foam.vim`.\n\n## Use FOAMGetApplication to get solver name\n\nFrom any file in the case dir., we can tell VIM what solver is to be used with the current case because it's mentioned in the `controlDict` file. Actually, we have two options here:\n- Use VIM to take a look at `controlDict`, and store a string representing the solver name.\n- Or, do it the FOAM way (use run functions: `getApplication`), which needs a working Installation of OpenFOAM (but that's Ok, you won't be reading this guide otherwise). This method is heavily used in `.Allrun` shell scripts.\n\nIn order to learn how VIM interacts with the system, we'll use the second option: We'll add a `FOAMGetApplication()` function to our `customFoam.vim`\n\n~~~vim\nfunction! FOAMGetApplication()\n    \" Source run functions and execute getApplication\n    let cmd=\". $WM_PROJECT_DIR/bin/tools/RunFunctions && getApplication\"\n    let foamApp=system(cmd)[:-2]\n    echomsg 'This case is set to be simulated with: '.foamApp\n    return foamApp\nendfunction\n~~~\n\n- `cmd` is a string, representing the shell command that sources run functions and then executes `getApplication` in the current case dir.\n- `foamApp` is the output of the previous command (solver name), the `[:-2]` part deletes the last two characters from the output of the command (by default, It will output `icoFoam @`, the last two characters are not needed).\n- `echomsg` writes messages to the status line, and keeps them in messages list (run `:messages`).\n\n## The general VIM compiler plugin for OpenFOAM\n\nCopy `blockMesh.vim` to `foam.vim`.\n- Don't forget `let current_compiler = \"foam\"`\n- Declare a script variable, storing the solver name\n`let s:foamApp = FOAMGetApplication()`\n- Instead of `CompilerSet`, define a new function setting the compiler to the solver name, then call it.\n\n~~~vim\nfunction! FOAMSetCompiler()\n    exe 'CompilerSet makeprg='.s:foamApp\nendfunction\ncall FOAMSetCompiler()\n~~~\n\n- For the file line in the error format, use\n`\\\\file:\\ %f\\.%*[a-zA-Z]%*[a-zA-Z\\ .]\\ line\\ %l%*[.a-zA-Z0-9\\ ]`\nSo we can cover stuff like \"from line 15 to line 20.\" and be more dynamic with the number of dots in the filename (handle things like `0/U.boundaryField.inlet`). Done!! We are ready to go!\n\n## Final tweaks: VIM's auto-commands\n\nWe only need to tell VIM to set the compiler to \"foam\" whenever a Foam File is opened; and to set the compiler to `blockMesh` if the entered buffer is named `blockMeshDict`.\n\n~~~vim\naugroup FOAMautocmds\nautocmd!\nautocmd FileType foam* call FOAMSetPathToCaseDir()\nautocmd FileType foam* compile foam\nautocmd BufEnter *blockMeshDict compile blockMesh\naugroup End\n~~~\n\n> *FileType* autocmds will *always* be executed before *BufEnter* ones, so `blockMeshDict` files will always have `blockMesh` as their compiler.\n\n\nThe complete configuration files can be downloaded from here: <a href=\"https://drive.google.com/uc?id=1Sf-6Pm8twy8dM6YIcWZ8lMFaem2S2F0O&export=download\" class=\"btn\">VIM Customization</a> \n","slug":"2018-08-25-vim-openfoam-power-part2","published":1,"updated":"2019-12-25T13:19:53.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy5z000r3cqezaak2jh9","content":"<p>We’ve seen in <a href=\"/vim-openfoam-power-part1\">the previous part</a> some ways to improve our interaction with OpenFOAM case directories and files. In this new post, we want to implement something that facilitates running <code>blockMesh</code>, or the case solver, right from inside VIM; without going back to the shell. Of course, our implementation should catch errors in the quick fix list (if there are any),  then go to the concerned file, and put the cursor on the error line.</p>\n<p>For this, we’ll use two main VIM facilities: <em>VIM compilers</em> and <em>QuickFix</em> list.<br>The compilers are used to automatically run a shell command on a file; For example:</p>\n<ul>\n<li>Running a <code>gcc</code> (or <code>make</code> if there is a <em>makeFile</em>) command on a <code>*.cpp</code> file would compile it to an executable, </li>\n<li>Running a <code>pdflatex</code> (or better <code>latexmk</code>) command on a <em>Latex file</em> would compile a PDF version of the document.</li>\n<li>Running a <code>blockMesh</code> command on a <em>blockMeshDict</em> would build the mesh and check for errors in <code>blockMesh</code>‘s output.</li>\n</ul>\n<p>In fact, we can run as many commands as we want on the file using VIM compilers. Think: Generate the mesh, check its validity, set fields and run appropriate solvers (In my opinion, this kind of work-flows beats GUIs to death).</p>\n<p>So, let’s get to work: We need to know how VIM’s default compiler plugins are set, and the best way to learn is by looking at examples. On Unix systems, the default compilers should be in <code>/usr/share/vim/vim74/compiler</code> directory, you can use VIM’s ex-command <code>:compile</code> to find out where  they are on your system.</p>\n<h2 id=\"Studying-an-example-VIM-compiler\"><a href=\"#Studying-an-example-VIM-compiler\" class=\"headerlink\" title=\"Studying an example VIM compiler\"></a>Studying an example VIM compiler</h2><p>First of all, a VIM compiler plugin is nothing more than a short <code>VimL</code> script, configuring two main things: <code>errorformat</code> (scanf-style strings, separated by commas, showing the format of error lines) and <code>makeprg</code> (make program, the shell executable to run).</p>\n<p>As an example, let’s go through the <em>ant-compiler</em> line by line:</p>\n<pre><code class=\"vim\">&quot; Vim Compiler File\n&quot; Compiler:    ant\n&quot; Maintainer:    Johannes Zellner &lt;johannes@zellner.org&gt;\n&quot; Last Change:    Mi, 13 Apr 2005 22:50:07 CEST</code></pre>\n<p>The header, just for information, then we have some checks to perform:</p>\n<pre><code class=\"vim\">if exists(&quot;current_compiler&quot;)\n    finish\nendif\nlet current_compiler = &quot;ant&quot;\n\nif exists(&quot;:CompilerSet&quot;) != 2        &quot; older Vim always used :setlocal\n  command -nargs=* CompilerSet setlocal &lt;args&gt;\nendif</code></pre>\n<p>The first if structure checks if the compiler is already set (if it’s the case, vim will leave the script). If not, it<br>declares <code>current_compiler</code> as *”ant”* (so, the next time the script executes, it will be finished in the first if structure). The second if statement sets compatibility stuff for older VIM versions.</p>\n<p>All the <code>cpo</code>-related stuff are set to configure Vi-compatibility options, we don’t need to learn about this topic, just don’t touch those lines!</p>\n<p>The line <code>CompilerSet makeprg=ant</code> sets the ant program as the make program (when you execute the ex-command <code>:make</code>, VIM runs <code>ant</code> in a shell, and watches for its output).</p>\n<p><code>CompilerSet errorformat=\\ %#[%.%#]\\ %#%f:%l:%v:%*\\\\d:%*\\\\d:\\%t%[%^:]%#:%m</code> shows VIM how to find the error line and what to extract from it (explained in more details in the next section).</p>\n<pre><code class=\"vim\">let s:cpo_save = &amp;cpo\nset cpo&amp;vim\n\nCompilerSet makeprg=ant\n&quot; first  line:\n&quot;     ant with jikes +E, which assumes  the following\n&quot;     two property lines in your &#39;build.xml&#39;:\n&quot;\n&quot;         &lt;property name = &quot;build.compiler&quot;       value = &quot;jikes&quot;/&gt;\n&quot;         &lt;property name = &quot;build.compiler.emacs&quot; value = &quot;true&quot;/&gt;\n&quot;\n&quot; second line:\n&quot;     ant with javac\n&quot;\n&quot; note that this will work also for tasks like [wtkbuild]\n&quot;\nCompilerSet errorformat=\\ %#[%.%#]\\ %#%f:%l:%v:%*\\\\d:%*\\\\d:\\ %t%[%^:]%#:%m,\n    \\%A\\ %#[%.%#]\\ %f:%l:\\ %m,%-Z\\ %#[%.%#]\\ %p^,%C\\ %#[%.%#]\\ %#%m\n\n&quot; ,%-C%.%#\n\nlet &amp;cpo = s:cpo_save\nunlet s:cpo_save</code></pre>\n<h3 id=\"Using-errorformats-to-catch-OpenFOAM-Fatal-Errors\"><a href=\"#Using-errorformats-to-catch-OpenFOAM-Fatal-Errors\" class=\"headerlink\" title=\"Using errorformats to catch OpenFOAM Fatal Errors\"></a>Using errorformats to catch OpenFOAM Fatal Errors</h3><p>These <em>errorformats</em> are similar to regular expressions. Assume a program outputting errors in the following format:</p>\n<p><code>Error: something-is-wrong in /path/to/file at line 25</code></p>\n<p>To match this error line, we use a single scanf-style string, that may contain special items (these are the most important ones):</p>\n<ul>\n<li><code>%f</code> matches a file name (a string), eg. <em>/path/to/file</em></li>\n<li><code>%l</code> matches a line number (digits), eg. <em>25</em></li>\n<li><code>%m</code> matches an error message, eg. <em>something-is-wrong</em></li>\n<li><code>%*{conv}</code> converts stuff from regexp to scanf string, eg. %*[a-z] matches any number of lowercase alphabets.</li>\n</ul>\n<p>Thus, the example line would be matched with <code>\\Error: %m in %f at line %l</code></p>\n<h2 id=\"Building-a-compiler-plugin-for-blockMesh\"><a href=\"#Building-a-compiler-plugin-for-blockMesh\" class=\"headerlink\" title=\"Building a compiler plugin for blockMesh\"></a>Building a compiler plugin for blockMesh</h2><p>The goal of this section is to build a blockMesh-compiler for VIM which can be used to browse errors when the tool fails. For this, we need to create our custom-compilers directory <code>$HOME/.vim/compiler</code>.</p>\n<p>Copy the <code>ant.vim</code> compiler to that directory and rename it as <code>blockMesh.vim</code>, on Unix systems, one can say:</p>\n<pre><code class=\"bash\">cp /usr/share/vim/vim74/compiler/ant.vim ~/.vim/compiler/blockMesh.vim</code></pre>\n<p>Modify the header so it suits your preferences, and then start building the custom VIM compiler:</p>\n<ul>\n<li>Hopefully, you are editing the file with VIM.</li>\n<li>Change all occurrences of “<em>ant</em>“ to “<em>blockMesh</em>“ in the file <code>:%s/ant/blockMesh/g</code></li>\n<li>Time to set the “errorformat”: We know that OpenFOAM displays errors in multiple<br>lines (if you write “hxe” instead of “hex” in a <em>blockMeshDict</em>):</li>\n</ul>\n<pre><code class=\"text\">--&gt; FOAM FATAL IO ERROR:\nCellShape has unknown model on line 45 the word &#39;hxe&#39;\nfile: /home/elwardi/OpenFOAM/elwardi-4.1/run/movingCone/system/blockMeshDict.blocks at line 45.</code></pre>\n<p>Note that this is NOT a general FOAM ERROR; some other IO errors specify a range of lines; others suggest solutions before stating the error-line.</p>\n<p>The most important line is probably the one stating the filename, and the exact line to jump to (these will be stored in <code>%f</code> and <code>%l</code> respectively).However, there are some problems in the filename: notice the ending <code>.blocks</code> appended to it, in fact, things could be messier: <code>.ddtschemes.default</code>.</p>\n<p>How many dots are there in the filename? The real problem is that the <code>path/to/case</code> always contains a dot character (frrom the OpenFOAM version, eg. user-4.1), so matching from the start of the path to the first dot character won’t work!</p>\n<p>Instead, we do notice that versions are expressed in digits, and that case names usually contain no dots (hopefully); so, matching the path up to the first dot character preceding an alphabet character is a good idea:<br><code>CompilerSet errorformat=\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.</code></p>\n<ul>\n<li><code>%f</code> matches the string “file: “ at the start of line, then starts storing the filename up to the first dot that falls immediately before a lowercase alphabet character (hopefully, that’s the keyword <code>.blocks</code>, or <code>.fvSchemes</code> …). Then we’ll have  some lowercase characters and spaces until we reach the last line before “line” string,  then <code>%l</code> catches the line number (in case there are two, it catches the last one!).</li>\n</ul>\n<p>Now, what to tell the user? Well, It’s good to have a message at the status line saying “<em>CellShape has unknown model …</em>“, so, we should use a complex multi-line <em>errorformat</em>! But, still we’ll have to deal with the problem of how many lines are there between the line that tells our message and the line that spells out the error line. </p>\n<p>This is actually troublesome, so, I’ve decided to approach the situation differently: We leave our filename and error-line alone, and add another error that captures only the message (using a simple multi-line error-format).</p>\n<pre><code class=\"vim\">CompilerSet errorformat=\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.\n                        \\%E--&gt;\\ %*[A-Z:\\ ],%Z%m</code></pre>\n<ul>\n<li><code>%E</code> denotes the start of a multi-line error.</li>\n<li>Then we find the line saying <code>Fatal IO Error</code> (starts with –&gt; then there are some uppercase letters,semicolons, and spaces).</li>\n<li><code>%Z</code> denotes the end of multi-line error (which is only one line here!) then we capture everything in the second line as a <code>%m</code> (an error message).</li>\n</ul>\n<p>The compiler plugin is now complete:</p>\n<pre><code class=\"vim\">&quot; Vim Compiler File\n&quot; Compiler: blockMesh\n&quot; Fadeli Mohammed Elwardi &lt;foamscience.github.io&gt;\n\nif exists(&quot;current_compiler&quot;)\nfinish\nendif\n\nlet current_compiler = &quot;blockMesh&quot;\n\nif exists(&quot;:CompilerSet&quot;) != 2\n&quot; older Vim always used :setlocal\ncommand -nargs=* CompilerSet setlocal &lt;args&gt;\nendif\n\nlet s:cpo_save = &amp;cpo\nset cpo&amp;vim\n\nCompilerSet makeprg=blockMesh\nCompilerSet errorformat=\n                 \\\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.,\n                 \\%E-&gt;\\ %*[A-Z:\\ ],%Z%m\n\nlet &amp;cpo = s:cpo_save\nunlet s:cpo_save</code></pre>\n<p>And you should be ready to test it with a sample (erroneous) <code>blockMeshDict</code>:</p>\n<ol>\n<li>Make something of importance go wrong in a <code>blockMeshDict</code> (the last ; in a block is not that important).</li>\n<li>While editing <code>blockMeshDict</code>, run <code>:compile blockMesh</code> to set the correct compiler (We’ll improve on this).</li>\n<li>Hopefully your working directory is set by our previous <code>customFoam</code> script, if it is the case, run the ex-command <code>:make</code> and check that beautiful (and useful) error message!</li>\n<li>To automatically jump to the error line, type <code>:cn</code> (short of cnext).</li>\n</ol>\n<blockquote>\n<p>The error format can’t handle “from line 15 to line 18.” lines, because no file path will be output in such lines!</p>\n</blockquote>\n<p>Now that VIM knows how to handle <code>blockMesh</code>, let’s introduce it to the other FOAM applications (we’ll be doing just solvers for illustration). Wait, should we repeat the work done previously tens of times? Absolutely not.</p>\n<p>The goal of this blog post is to achieve this work-flow:</p>\n<ol>\n<li>When I read in a FOAM File, VIM changes its working dir. to case dir. (already implemented in <code>customFoam.vim</code>, see <a href=\"/vim-openfoam-power-part1\">this earlier post</a>)</li>\n<li>VIM looks for the suitable OpenFOAM solver for the current case (mentioned in <code>controlDict</code>).</li>\n<li>VIM sets the right solver as the <code>makeprg</code> automatically.</li>\n<li>When I run <code>:make</code> (Or press a shortcut to it), VIM will filter the output to show me the errors if there are any.</li>\n</ol>\n<p>One more thing, I want my own solvers to be involved, so, I won’t generate a list of standard solvers and compare anything to its content. That’s one lousy approach to take!</p>\n<p>Instead, I’m going to define two functions: The first one, in <code>customFoam.vim</code>, which searches and stores the solver name, and the second sets the option <code>makeprg</code> dynamically in a general compiler plugin called <code>foam.vim</code>.</p>\n<h2 id=\"Use-FOAMGetApplication-to-get-solver-name\"><a href=\"#Use-FOAMGetApplication-to-get-solver-name\" class=\"headerlink\" title=\"Use FOAMGetApplication to get solver name\"></a>Use FOAMGetApplication to get solver name</h2><p>From any file in the case dir., we can tell VIM what solver is to be used with the current case because it’s mentioned in the <code>controlDict</code> file. Actually, we have two options here:</p>\n<ul>\n<li>Use VIM to take a look at <code>controlDict</code>, and store a string representing the solver name.</li>\n<li>Or, do it the FOAM way (use run functions: <code>getApplication</code>), which needs a working Installation of OpenFOAM (but that’s Ok, you won’t be reading this guide otherwise). This method is heavily used in <code>.Allrun</code> shell scripts.</li>\n</ul>\n<p>In order to learn how VIM interacts with the system, we’ll use the second option: We’ll add a <code>FOAMGetApplication()</code> function to our <code>customFoam.vim</code></p>\n<pre><code class=\"vim\">function! FOAMGetApplication()\n    &quot; Source run functions and execute getApplication\n    let cmd=&quot;. $WM_PROJECT_DIR/bin/tools/RunFunctions &amp;&amp; getApplication&quot;\n    let foamApp=system(cmd)[:-2]\n    echomsg &#39;This case is set to be simulated with: &#39;.foamApp\n    return foamApp\nendfunction</code></pre>\n<ul>\n<li><code>cmd</code> is a string, representing the shell command that sources run functions and then executes <code>getApplication</code> in the current case dir.</li>\n<li><code>foamApp</code> is the output of the previous command (solver name), the <code>[:-2]</code> part deletes the last two characters from the output of the command (by default, It will output <code>icoFoam @</code>, the last two characters are not needed).</li>\n<li><code>echomsg</code> writes messages to the status line, and keeps them in messages list (run <code>:messages</code>).</li>\n</ul>\n<h2 id=\"The-general-VIM-compiler-plugin-for-OpenFOAM\"><a href=\"#The-general-VIM-compiler-plugin-for-OpenFOAM\" class=\"headerlink\" title=\"The general VIM compiler plugin for OpenFOAM\"></a>The general VIM compiler plugin for OpenFOAM</h2><p>Copy <code>blockMesh.vim</code> to <code>foam.vim</code>.</p>\n<ul>\n<li>Don’t forget <code>let current_compiler = &quot;foam&quot;</code></li>\n<li>Declare a script variable, storing the solver name<br><code>let s:foamApp = FOAMGetApplication()</code></li>\n<li>Instead of <code>CompilerSet</code>, define a new function setting the compiler to the solver name, then call it.</li>\n</ul>\n<pre><code class=\"vim\">function! FOAMSetCompiler()\n    exe &#39;CompilerSet makeprg=&#39;.s:foamApp\nendfunction\ncall FOAMSetCompiler()</code></pre>\n<ul>\n<li>For the file line in the error format, use<br><code>\\\\file:\\ %f\\.%*[a-zA-Z]%*[a-zA-Z\\ .]\\ line\\ %l%*[.a-zA-Z0-9\\ ]</code><br>So we can cover stuff like “from line 15 to line 20.” and be more dynamic with the number of dots in the filename (handle things like <code>0/U.boundaryField.inlet</code>). Done!! We are ready to go!</li>\n</ul>\n<h2 id=\"Final-tweaks-VIM’s-auto-commands\"><a href=\"#Final-tweaks-VIM’s-auto-commands\" class=\"headerlink\" title=\"Final tweaks: VIM’s auto-commands\"></a>Final tweaks: VIM’s auto-commands</h2><p>We only need to tell VIM to set the compiler to “foam” whenever a Foam File is opened; and to set the compiler to <code>blockMesh</code> if the entered buffer is named <code>blockMeshDict</code>.</p>\n<pre><code class=\"vim\">augroup FOAMautocmds\nautocmd!\nautocmd FileType foam* call FOAMSetPathToCaseDir()\nautocmd FileType foam* compile foam\nautocmd BufEnter *blockMeshDict compile blockMesh\naugroup End</code></pre>\n<blockquote>\n<p><em>FileType</em> autocmds will <em>always</em> be executed before <em>BufEnter</em> ones, so <code>blockMeshDict</code> files will always have <code>blockMesh</code> as their compiler.</p>\n</blockquote>\n<p>The complete configuration files can be downloaded from here: <a href=\"https://drive.google.com/uc?id=1Sf-6Pm8twy8dM6YIcWZ8lMFaem2S2F0O&export=download\" class=\"btn\" target=\"_blank\" rel=\"noopener\">VIM Customization</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>We’ve seen in <a href=\"/vim-openfoam-power-part1\">the previous part</a> some ways to improve our interaction with OpenFOAM case directories and files. In this new post, we want to implement something that facilitates running <code>blockMesh</code>, or the case solver, right from inside VIM; without going back to the shell. Of course, our implementation should catch errors in the quick fix list (if there are any),  then go to the concerned file, and put the cursor on the error line.</p>\n<p>For this, we’ll use two main VIM facilities: <em>VIM compilers</em> and <em>QuickFix</em> list.<br>The compilers are used to automatically run a shell command on a file; For example:</p>\n<ul>\n<li>Running a <code>gcc</code> (or <code>make</code> if there is a <em>makeFile</em>) command on a <code>*.cpp</code> file would compile it to an executable, </li>\n<li>Running a <code>pdflatex</code> (or better <code>latexmk</code>) command on a <em>Latex file</em> would compile a PDF version of the document.</li>\n<li>Running a <code>blockMesh</code> command on a <em>blockMeshDict</em> would build the mesh and check for errors in <code>blockMesh</code>‘s output.</li>\n</ul>\n<p>In fact, we can run as many commands as we want on the file using VIM compilers. Think: Generate the mesh, check its validity, set fields and run appropriate solvers (In my opinion, this kind of work-flows beats GUIs to death).</p>\n<p>So, let’s get to work: We need to know how VIM’s default compiler plugins are set, and the best way to learn is by looking at examples. On Unix systems, the default compilers should be in <code>/usr/share/vim/vim74/compiler</code> directory, you can use VIM’s ex-command <code>:compile</code> to find out where  they are on your system.</p>\n<h2 id=\"Studying-an-example-VIM-compiler\"><a href=\"#Studying-an-example-VIM-compiler\" class=\"headerlink\" title=\"Studying an example VIM compiler\"></a>Studying an example VIM compiler</h2><p>First of all, a VIM compiler plugin is nothing more than a short <code>VimL</code> script, configuring two main things: <code>errorformat</code> (scanf-style strings, separated by commas, showing the format of error lines) and <code>makeprg</code> (make program, the shell executable to run).</p>\n<p>As an example, let’s go through the <em>ant-compiler</em> line by line:</p>\n<pre><code class=\"vim\">&quot; Vim Compiler File\n&quot; Compiler:    ant\n&quot; Maintainer:    Johannes Zellner &lt;johannes@zellner.org&gt;\n&quot; Last Change:    Mi, 13 Apr 2005 22:50:07 CEST</code></pre>\n<p>The header, just for information, then we have some checks to perform:</p>\n<pre><code class=\"vim\">if exists(&quot;current_compiler&quot;)\n    finish\nendif\nlet current_compiler = &quot;ant&quot;\n\nif exists(&quot;:CompilerSet&quot;) != 2        &quot; older Vim always used :setlocal\n  command -nargs=* CompilerSet setlocal &lt;args&gt;\nendif</code></pre>\n<p>The first if structure checks if the compiler is already set (if it’s the case, vim will leave the script). If not, it<br>declares <code>current_compiler</code> as *”ant”* (so, the next time the script executes, it will be finished in the first if structure). The second if statement sets compatibility stuff for older VIM versions.</p>\n<p>All the <code>cpo</code>-related stuff are set to configure Vi-compatibility options, we don’t need to learn about this topic, just don’t touch those lines!</p>\n<p>The line <code>CompilerSet makeprg=ant</code> sets the ant program as the make program (when you execute the ex-command <code>:make</code>, VIM runs <code>ant</code> in a shell, and watches for its output).</p>\n<p><code>CompilerSet errorformat=\\ %#[%.%#]\\ %#%f:%l:%v:%*\\\\d:%*\\\\d:\\%t%[%^:]%#:%m</code> shows VIM how to find the error line and what to extract from it (explained in more details in the next section).</p>\n<pre><code class=\"vim\">let s:cpo_save = &amp;cpo\nset cpo&amp;vim\n\nCompilerSet makeprg=ant\n&quot; first  line:\n&quot;     ant with jikes +E, which assumes  the following\n&quot;     two property lines in your &#39;build.xml&#39;:\n&quot;\n&quot;         &lt;property name = &quot;build.compiler&quot;       value = &quot;jikes&quot;/&gt;\n&quot;         &lt;property name = &quot;build.compiler.emacs&quot; value = &quot;true&quot;/&gt;\n&quot;\n&quot; second line:\n&quot;     ant with javac\n&quot;\n&quot; note that this will work also for tasks like [wtkbuild]\n&quot;\nCompilerSet errorformat=\\ %#[%.%#]\\ %#%f:%l:%v:%*\\\\d:%*\\\\d:\\ %t%[%^:]%#:%m,\n    \\%A\\ %#[%.%#]\\ %f:%l:\\ %m,%-Z\\ %#[%.%#]\\ %p^,%C\\ %#[%.%#]\\ %#%m\n\n&quot; ,%-C%.%#\n\nlet &amp;cpo = s:cpo_save\nunlet s:cpo_save</code></pre>\n<h3 id=\"Using-errorformats-to-catch-OpenFOAM-Fatal-Errors\"><a href=\"#Using-errorformats-to-catch-OpenFOAM-Fatal-Errors\" class=\"headerlink\" title=\"Using errorformats to catch OpenFOAM Fatal Errors\"></a>Using errorformats to catch OpenFOAM Fatal Errors</h3><p>These <em>errorformats</em> are similar to regular expressions. Assume a program outputting errors in the following format:</p>\n<p><code>Error: something-is-wrong in /path/to/file at line 25</code></p>\n<p>To match this error line, we use a single scanf-style string, that may contain special items (these are the most important ones):</p>\n<ul>\n<li><code>%f</code> matches a file name (a string), eg. <em>/path/to/file</em></li>\n<li><code>%l</code> matches a line number (digits), eg. <em>25</em></li>\n<li><code>%m</code> matches an error message, eg. <em>something-is-wrong</em></li>\n<li><code>%*{conv}</code> converts stuff from regexp to scanf string, eg. %*[a-z] matches any number of lowercase alphabets.</li>\n</ul>\n<p>Thus, the example line would be matched with <code>\\Error: %m in %f at line %l</code></p>\n<h2 id=\"Building-a-compiler-plugin-for-blockMesh\"><a href=\"#Building-a-compiler-plugin-for-blockMesh\" class=\"headerlink\" title=\"Building a compiler plugin for blockMesh\"></a>Building a compiler plugin for blockMesh</h2><p>The goal of this section is to build a blockMesh-compiler for VIM which can be used to browse errors when the tool fails. For this, we need to create our custom-compilers directory <code>$HOME/.vim/compiler</code>.</p>\n<p>Copy the <code>ant.vim</code> compiler to that directory and rename it as <code>blockMesh.vim</code>, on Unix systems, one can say:</p>\n<pre><code class=\"bash\">cp /usr/share/vim/vim74/compiler/ant.vim ~/.vim/compiler/blockMesh.vim</code></pre>\n<p>Modify the header so it suits your preferences, and then start building the custom VIM compiler:</p>\n<ul>\n<li>Hopefully, you are editing the file with VIM.</li>\n<li>Change all occurrences of “<em>ant</em>“ to “<em>blockMesh</em>“ in the file <code>:%s/ant/blockMesh/g</code></li>\n<li>Time to set the “errorformat”: We know that OpenFOAM displays errors in multiple<br>lines (if you write “hxe” instead of “hex” in a <em>blockMeshDict</em>):</li>\n</ul>\n<pre><code class=\"text\">--&gt; FOAM FATAL IO ERROR:\nCellShape has unknown model on line 45 the word &#39;hxe&#39;\nfile: /home/elwardi/OpenFOAM/elwardi-4.1/run/movingCone/system/blockMeshDict.blocks at line 45.</code></pre>\n<p>Note that this is NOT a general FOAM ERROR; some other IO errors specify a range of lines; others suggest solutions before stating the error-line.</p>\n<p>The most important line is probably the one stating the filename, and the exact line to jump to (these will be stored in <code>%f</code> and <code>%l</code> respectively).However, there are some problems in the filename: notice the ending <code>.blocks</code> appended to it, in fact, things could be messier: <code>.ddtschemes.default</code>.</p>\n<p>How many dots are there in the filename? The real problem is that the <code>path/to/case</code> always contains a dot character (frrom the OpenFOAM version, eg. user-4.1), so matching from the start of the path to the first dot character won’t work!</p>\n<p>Instead, we do notice that versions are expressed in digits, and that case names usually contain no dots (hopefully); so, matching the path up to the first dot character preceding an alphabet character is a good idea:<br><code>CompilerSet errorformat=\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.</code></p>\n<ul>\n<li><code>%f</code> matches the string “file: “ at the start of line, then starts storing the filename up to the first dot that falls immediately before a lowercase alphabet character (hopefully, that’s the keyword <code>.blocks</code>, or <code>.fvSchemes</code> …). Then we’ll have  some lowercase characters and spaces until we reach the last line before “line” string,  then <code>%l</code> catches the line number (in case there are two, it catches the last one!).</li>\n</ul>\n<p>Now, what to tell the user? Well, It’s good to have a message at the status line saying “<em>CellShape has unknown model …</em>“, so, we should use a complex multi-line <em>errorformat</em>! But, still we’ll have to deal with the problem of how many lines are there between the line that tells our message and the line that spells out the error line. </p>\n<p>This is actually troublesome, so, I’ve decided to approach the situation differently: We leave our filename and error-line alone, and add another error that captures only the message (using a simple multi-line error-format).</p>\n<pre><code class=\"vim\">CompilerSet errorformat=\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.\n                        \\%E--&gt;\\ %*[A-Z:\\ ],%Z%m</code></pre>\n<ul>\n<li><code>%E</code> denotes the start of a multi-line error.</li>\n<li>Then we find the line saying <code>Fatal IO Error</code> (starts with –&gt; then there are some uppercase letters,semicolons, and spaces).</li>\n<li><code>%Z</code> denotes the end of multi-line error (which is only one line here!) then we capture everything in the second line as a <code>%m</code> (an error message).</li>\n</ul>\n<p>The compiler plugin is now complete:</p>\n<pre><code class=\"vim\">&quot; Vim Compiler File\n&quot; Compiler: blockMesh\n&quot; Fadeli Mohammed Elwardi &lt;foamscience.github.io&gt;\n\nif exists(&quot;current_compiler&quot;)\nfinish\nendif\n\nlet current_compiler = &quot;blockMesh&quot;\n\nif exists(&quot;:CompilerSet&quot;) != 2\n&quot; older Vim always used :setlocal\ncommand -nargs=* CompilerSet setlocal &lt;args&gt;\nendif\n\nlet s:cpo_save = &amp;cpo\nset cpo&amp;vim\n\nCompilerSet makeprg=blockMesh\nCompilerSet errorformat=\n                 \\\\file:\\ %f\\.%[a-z]%*[a-z\\ ]\\ line\\ %l\\.,\n                 \\%E-&gt;\\ %*[A-Z:\\ ],%Z%m\n\nlet &amp;cpo = s:cpo_save\nunlet s:cpo_save</code></pre>\n<p>And you should be ready to test it with a sample (erroneous) <code>blockMeshDict</code>:</p>\n<ol>\n<li>Make something of importance go wrong in a <code>blockMeshDict</code> (the last ; in a block is not that important).</li>\n<li>While editing <code>blockMeshDict</code>, run <code>:compile blockMesh</code> to set the correct compiler (We’ll improve on this).</li>\n<li>Hopefully your working directory is set by our previous <code>customFoam</code> script, if it is the case, run the ex-command <code>:make</code> and check that beautiful (and useful) error message!</li>\n<li>To automatically jump to the error line, type <code>:cn</code> (short of cnext).</li>\n</ol>\n<blockquote>\n<p>The error format can’t handle “from line 15 to line 18.” lines, because no file path will be output in such lines!</p>\n</blockquote>\n<p>Now that VIM knows how to handle <code>blockMesh</code>, let’s introduce it to the other FOAM applications (we’ll be doing just solvers for illustration). Wait, should we repeat the work done previously tens of times? Absolutely not.</p>\n<p>The goal of this blog post is to achieve this work-flow:</p>\n<ol>\n<li>When I read in a FOAM File, VIM changes its working dir. to case dir. (already implemented in <code>customFoam.vim</code>, see <a href=\"/vim-openfoam-power-part1\">this earlier post</a>)</li>\n<li>VIM looks for the suitable OpenFOAM solver for the current case (mentioned in <code>controlDict</code>).</li>\n<li>VIM sets the right solver as the <code>makeprg</code> automatically.</li>\n<li>When I run <code>:make</code> (Or press a shortcut to it), VIM will filter the output to show me the errors if there are any.</li>\n</ol>\n<p>One more thing, I want my own solvers to be involved, so, I won’t generate a list of standard solvers and compare anything to its content. That’s one lousy approach to take!</p>\n<p>Instead, I’m going to define two functions: The first one, in <code>customFoam.vim</code>, which searches and stores the solver name, and the second sets the option <code>makeprg</code> dynamically in a general compiler plugin called <code>foam.vim</code>.</p>\n<h2 id=\"Use-FOAMGetApplication-to-get-solver-name\"><a href=\"#Use-FOAMGetApplication-to-get-solver-name\" class=\"headerlink\" title=\"Use FOAMGetApplication to get solver name\"></a>Use FOAMGetApplication to get solver name</h2><p>From any file in the case dir., we can tell VIM what solver is to be used with the current case because it’s mentioned in the <code>controlDict</code> file. Actually, we have two options here:</p>\n<ul>\n<li>Use VIM to take a look at <code>controlDict</code>, and store a string representing the solver name.</li>\n<li>Or, do it the FOAM way (use run functions: <code>getApplication</code>), which needs a working Installation of OpenFOAM (but that’s Ok, you won’t be reading this guide otherwise). This method is heavily used in <code>.Allrun</code> shell scripts.</li>\n</ul>\n<p>In order to learn how VIM interacts with the system, we’ll use the second option: We’ll add a <code>FOAMGetApplication()</code> function to our <code>customFoam.vim</code></p>\n<pre><code class=\"vim\">function! FOAMGetApplication()\n    &quot; Source run functions and execute getApplication\n    let cmd=&quot;. $WM_PROJECT_DIR/bin/tools/RunFunctions &amp;&amp; getApplication&quot;\n    let foamApp=system(cmd)[:-2]\n    echomsg &#39;This case is set to be simulated with: &#39;.foamApp\n    return foamApp\nendfunction</code></pre>\n<ul>\n<li><code>cmd</code> is a string, representing the shell command that sources run functions and then executes <code>getApplication</code> in the current case dir.</li>\n<li><code>foamApp</code> is the output of the previous command (solver name), the <code>[:-2]</code> part deletes the last two characters from the output of the command (by default, It will output <code>icoFoam @</code>, the last two characters are not needed).</li>\n<li><code>echomsg</code> writes messages to the status line, and keeps them in messages list (run <code>:messages</code>).</li>\n</ul>\n<h2 id=\"The-general-VIM-compiler-plugin-for-OpenFOAM\"><a href=\"#The-general-VIM-compiler-plugin-for-OpenFOAM\" class=\"headerlink\" title=\"The general VIM compiler plugin for OpenFOAM\"></a>The general VIM compiler plugin for OpenFOAM</h2><p>Copy <code>blockMesh.vim</code> to <code>foam.vim</code>.</p>\n<ul>\n<li>Don’t forget <code>let current_compiler = &quot;foam&quot;</code></li>\n<li>Declare a script variable, storing the solver name<br><code>let s:foamApp = FOAMGetApplication()</code></li>\n<li>Instead of <code>CompilerSet</code>, define a new function setting the compiler to the solver name, then call it.</li>\n</ul>\n<pre><code class=\"vim\">function! FOAMSetCompiler()\n    exe &#39;CompilerSet makeprg=&#39;.s:foamApp\nendfunction\ncall FOAMSetCompiler()</code></pre>\n<ul>\n<li>For the file line in the error format, use<br><code>\\\\file:\\ %f\\.%*[a-zA-Z]%*[a-zA-Z\\ .]\\ line\\ %l%*[.a-zA-Z0-9\\ ]</code><br>So we can cover stuff like “from line 15 to line 20.” and be more dynamic with the number of dots in the filename (handle things like <code>0/U.boundaryField.inlet</code>). Done!! We are ready to go!</li>\n</ul>\n<h2 id=\"Final-tweaks-VIM’s-auto-commands\"><a href=\"#Final-tweaks-VIM’s-auto-commands\" class=\"headerlink\" title=\"Final tweaks: VIM’s auto-commands\"></a>Final tweaks: VIM’s auto-commands</h2><p>We only need to tell VIM to set the compiler to “foam” whenever a Foam File is opened; and to set the compiler to <code>blockMesh</code> if the entered buffer is named <code>blockMeshDict</code>.</p>\n<pre><code class=\"vim\">augroup FOAMautocmds\nautocmd!\nautocmd FileType foam* call FOAMSetPathToCaseDir()\nautocmd FileType foam* compile foam\nautocmd BufEnter *blockMeshDict compile blockMesh\naugroup End</code></pre>\n<blockquote>\n<p><em>FileType</em> autocmds will <em>always</em> be executed before <em>BufEnter</em> ones, so <code>blockMeshDict</code> files will always have <code>blockMesh</code> as their compiler.</p>\n</blockquote>\n<p>The complete configuration files can be downloaded from here: <a href=\"https://drive.google.com/uc?id=1Sf-6Pm8twy8dM6YIcWZ8lMFaem2S2F0O&export=download\" class=\"btn\" target=\"_blank\" rel=\"noopener\">VIM Customization</a> </p>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Dec 25 2019 14:19:53 GMT+0100 (Central European Standard Time)","title":"Customize VIM to work efficiently with OpenFOAM - Part 2","path":"productivity/customize-vim-to-work-efficiently-with-openfoam-part-2/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2018-08-27T23:00:00.000Z","pv":0,"totalPV":0,"categories":"productivity","tags":["OpenFOAM","Vim"],"internalLinks":["vim-openfoam-power-part1","vim-openfoam-power-part1"],"keywords":[],"keywordsLength":0}},{"title":"Lumen passport实现多个用户体系下的oauth验证","date":"2019-01-10T00:40:41.000Z","abstract":"手把手教你在Lumen的Passport实现多个用户体系下使用多个Oauth验证","header_image":"/assets/images/lumen-banner.png","cover":"https://s2.ax1x.com/2019/09/18/noNZf1.png","_content":"\n这个教程是基于, lumen里面已经安装好了lumen-passport的插件, 如果还没有的话可以先到[lumen使用laravel passport教程](/2019/01/10/2019-01-10-lumen-passport-usage/)先安装.\n\n## 改写Laravel Passport里面的`UserRepository`\n\n> 文件路径 `vendor\\laravel\\passport\\src\\Bridge\\UserRepository.php`\n\n- 首先需要改写`userRepositroy`里面的`getUserEntityByUserCredentials`方法\n\n- 复制`userRepositroy`里面的`getUserEntityByUserCredentials`方法, 改名为`getEntityByUserCredentials`\n\n- 在新建的方法里面找到一下代码\n\n```php\n$provider = config('auth.guards.api.provider');\n```\n\n改成一下样子\n\n```php\n$provider = config('auth.guards.'.$provider.'.provider');\n```\n\n- 然后在新的方法`getEntityByUserCredentials`的参数里面添加新的参数`$provider`\n\n```php\npublic function getEntityByUserCredentials($username, $password, $grantType, \n  ClientEntityInterface $clientEntity, $provider) {\n      //...\n}\n```\n\n## 修改oauth2-server里面的PasswordGrand\n\n> 文件路径 `vendor\\league\\oauth2-server\\src\\Grant\\PasswordGrant.php`\n\n- 修改`validateUser`方法里面的这一串代码:\n\n```php\n$user = $this->userRepository->getEntityByUserCredentials(\n    $username,\n    $password,\n    $this->getIdentifier(),\n    $client,\n    $provider // 新加的provider字段\n);\n```\n\n- 在同一个方法里面加入新参数的获取\n\n```php\n $provider = $this->getRequestParameter('provider', $request);\n\n if (is_null($provider)) {\n throw OAuthServerException::invalidRequest('provider');\n }\n```\n\n## 在auth.php配置里面加入新的guard\n\n首先需要加入新的guard配置\n\n```php\n'guards' => [\n    // 原有的api guard\n    'api' => [\n        'driver' => 'passport',\n        'provider' => 'users',\n    ],\n    // 新加的admin-api guard\n    'admin-api' => [\n        'driver' => 'passport',\n        'provider' => 'admins',\n    ],\n],\n```\n\n添加新`admin-api` guard的provider\n\n```php\n'providers' => [\n    'users' => [\n        'driver' => 'eloquent',\n        'model' => \\App\\Models\\General\\MemberLogin::class\n    ],\n    // 新加的admins provider对应不用的用户模型\n    'admins' => [\n        'driver' => 'eloquent',\n        'model' => \\App\\Models\\Backend\\Manager::class\n    ]\n],\n```\n\n## 路由middleware使用\n\n区别在于middleware, 上文加入的新`admin-api`guard, 在新的路由里面就可以使用`auth:admin-api`的权限验证中间件理实现权限控制了!\n\n```php\n/*\n|--------------------------------------------------------------------------\n| Admin API版本 v1 路由\n|--------------------------------------------------------------------------.\n|\n| prefix admin/api/api版本号\n| namespace Api\\api版本号\n|\n*/\n$app->group(['prefix' => 'admin/api/v1', 'namespace' => 'AdminApi\\V1'], function ($app) {\n\n    // ================ 不受登录权限控制的接口路由 ================ //\n    //测试\n    $app->get('test', 'ExampleController@test');\n\n    // ================ 受登录权限控制的接口路由 ================ //\n    $app->group(['middleware' => 'auth:admin-api'], function ($app) {\n        //测试\n        $app->get('test2', function(){\n            return 'oauth test';\n        });\n        //测试\n        $app->get('test3', 'ExampleController@test');\n    });\n\n});\n```\n\n## 注意事项\n\n使用了多个guard的时候, 在使用laravel默认的`$request->user()`, 这个方法默认是使用`api`guard的, 可以在`auth.php`配置里面看到默认guard的配置.\n\n```php\n/*\n|--------------------------------------------------------------------------\n| Authentication Defaults\n|--------------------------------------------------------------------------\n|\n| This option controls the default authentication \"guard\" and password\n| reset options for your application. You may change these defaults\n| as required, but they're a perfect start for most applications.\n|\n*/\n\n'defaults' => [\n    'guard' => env('AUTH_GUARD', 'api'),\n    'passwords' => 'users',\n],\n```\n\n所以在使用新的`admin-api` guard的时候在使用`$request->user()`时需要加入对应的guard. 例子:\n\n```php\nnamespace App\\Http\\Controllers\\AdminApi\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass ExampleController extends Controller\n{\n    public function test(Request $request)\n    {\n        $request->user('admin-api')->toArray(); // 获取到admin-api下的用户信息\n    }\n}\n```\n\n","source":"_posts/2019-01-10-lumen-multi-oauth.md","raw":"---\ntitle: Lumen passport实现多个用户体系下的oauth验证\ndate: 2019-01-10 01:40:41\nabstract: 手把手教你在Lumen的Passport实现多个用户体系下使用多个Oauth验证\nheader_image: /assets/images/lumen-banner.png\ncategories:\n  - Laravel\ntags:\n  - Lumen\n  - Laravel Passport\ncover: https://s2.ax1x.com/2019/09/18/noNZf1.png\n---\n\n这个教程是基于, lumen里面已经安装好了lumen-passport的插件, 如果还没有的话可以先到[lumen使用laravel passport教程](/2019/01/10/2019-01-10-lumen-passport-usage/)先安装.\n\n## 改写Laravel Passport里面的`UserRepository`\n\n> 文件路径 `vendor\\laravel\\passport\\src\\Bridge\\UserRepository.php`\n\n- 首先需要改写`userRepositroy`里面的`getUserEntityByUserCredentials`方法\n\n- 复制`userRepositroy`里面的`getUserEntityByUserCredentials`方法, 改名为`getEntityByUserCredentials`\n\n- 在新建的方法里面找到一下代码\n\n```php\n$provider = config('auth.guards.api.provider');\n```\n\n改成一下样子\n\n```php\n$provider = config('auth.guards.'.$provider.'.provider');\n```\n\n- 然后在新的方法`getEntityByUserCredentials`的参数里面添加新的参数`$provider`\n\n```php\npublic function getEntityByUserCredentials($username, $password, $grantType, \n  ClientEntityInterface $clientEntity, $provider) {\n      //...\n}\n```\n\n## 修改oauth2-server里面的PasswordGrand\n\n> 文件路径 `vendor\\league\\oauth2-server\\src\\Grant\\PasswordGrant.php`\n\n- 修改`validateUser`方法里面的这一串代码:\n\n```php\n$user = $this->userRepository->getEntityByUserCredentials(\n    $username,\n    $password,\n    $this->getIdentifier(),\n    $client,\n    $provider // 新加的provider字段\n);\n```\n\n- 在同一个方法里面加入新参数的获取\n\n```php\n $provider = $this->getRequestParameter('provider', $request);\n\n if (is_null($provider)) {\n throw OAuthServerException::invalidRequest('provider');\n }\n```\n\n## 在auth.php配置里面加入新的guard\n\n首先需要加入新的guard配置\n\n```php\n'guards' => [\n    // 原有的api guard\n    'api' => [\n        'driver' => 'passport',\n        'provider' => 'users',\n    ],\n    // 新加的admin-api guard\n    'admin-api' => [\n        'driver' => 'passport',\n        'provider' => 'admins',\n    ],\n],\n```\n\n添加新`admin-api` guard的provider\n\n```php\n'providers' => [\n    'users' => [\n        'driver' => 'eloquent',\n        'model' => \\App\\Models\\General\\MemberLogin::class\n    ],\n    // 新加的admins provider对应不用的用户模型\n    'admins' => [\n        'driver' => 'eloquent',\n        'model' => \\App\\Models\\Backend\\Manager::class\n    ]\n],\n```\n\n## 路由middleware使用\n\n区别在于middleware, 上文加入的新`admin-api`guard, 在新的路由里面就可以使用`auth:admin-api`的权限验证中间件理实现权限控制了!\n\n```php\n/*\n|--------------------------------------------------------------------------\n| Admin API版本 v1 路由\n|--------------------------------------------------------------------------.\n|\n| prefix admin/api/api版本号\n| namespace Api\\api版本号\n|\n*/\n$app->group(['prefix' => 'admin/api/v1', 'namespace' => 'AdminApi\\V1'], function ($app) {\n\n    // ================ 不受登录权限控制的接口路由 ================ //\n    //测试\n    $app->get('test', 'ExampleController@test');\n\n    // ================ 受登录权限控制的接口路由 ================ //\n    $app->group(['middleware' => 'auth:admin-api'], function ($app) {\n        //测试\n        $app->get('test2', function(){\n            return 'oauth test';\n        });\n        //测试\n        $app->get('test3', 'ExampleController@test');\n    });\n\n});\n```\n\n## 注意事项\n\n使用了多个guard的时候, 在使用laravel默认的`$request->user()`, 这个方法默认是使用`api`guard的, 可以在`auth.php`配置里面看到默认guard的配置.\n\n```php\n/*\n|--------------------------------------------------------------------------\n| Authentication Defaults\n|--------------------------------------------------------------------------\n|\n| This option controls the default authentication \"guard\" and password\n| reset options for your application. You may change these defaults\n| as required, but they're a perfect start for most applications.\n|\n*/\n\n'defaults' => [\n    'guard' => env('AUTH_GUARD', 'api'),\n    'passwords' => 'users',\n],\n```\n\n所以在使用新的`admin-api` guard的时候在使用`$request->user()`时需要加入对应的guard. 例子:\n\n```php\nnamespace App\\Http\\Controllers\\AdminApi\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass ExampleController extends Controller\n{\n    public function test(Request $request)\n    {\n        $request->user('admin-api')->toArray(); // 获取到admin-api下的用户信息\n    }\n}\n```\n\n","slug":"2019-01-10-lumen-multi-oauth","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy61000v3cqeewwpn9q4","content":"<p>这个教程是基于, lumen里面已经安装好了lumen-passport的插件, 如果还没有的话可以先到<a href=\"/2019/01/10/2019-01-10-lumen-passport-usage/\">lumen使用laravel passport教程</a>先安装.</p>\n<h2 id=\"改写Laravel-Passport里面的UserRepository\"><a href=\"#改写Laravel-Passport里面的UserRepository\" class=\"headerlink\" title=\"改写Laravel Passport里面的UserRepository\"></a>改写Laravel Passport里面的<code>UserRepository</code></h2><blockquote>\n<p>文件路径 <code>vendor\\laravel\\passport\\src\\Bridge\\UserRepository.php</code></p>\n</blockquote>\n<ul>\n<li><p>首先需要改写<code>userRepositroy</code>里面的<code>getUserEntityByUserCredentials</code>方法</p>\n</li>\n<li><p>复制<code>userRepositroy</code>里面的<code>getUserEntityByUserCredentials</code>方法, 改名为<code>getEntityByUserCredentials</code></p>\n</li>\n<li><p>在新建的方法里面找到一下代码</p>\n</li>\n</ul>\n<pre><code class=\"php\">$provider = config(&#39;auth.guards.api.provider&#39;);</code></pre>\n<p>改成一下样子</p>\n<pre><code class=\"php\">$provider = config(&#39;auth.guards.&#39;.$provider.&#39;.provider&#39;);</code></pre>\n<ul>\n<li>然后在新的方法<code>getEntityByUserCredentials</code>的参数里面添加新的参数<code>$provider</code></li>\n</ul>\n<pre><code class=\"php\">public function getEntityByUserCredentials($username, $password, $grantType, \n  ClientEntityInterface $clientEntity, $provider) {\n      //...\n}</code></pre>\n<h2 id=\"修改oauth2-server里面的PasswordGrand\"><a href=\"#修改oauth2-server里面的PasswordGrand\" class=\"headerlink\" title=\"修改oauth2-server里面的PasswordGrand\"></a>修改oauth2-server里面的PasswordGrand</h2><blockquote>\n<p>文件路径 <code>vendor\\league\\oauth2-server\\src\\Grant\\PasswordGrant.php</code></p>\n</blockquote>\n<ul>\n<li>修改<code>validateUser</code>方法里面的这一串代码:</li>\n</ul>\n<pre><code class=\"php\">$user = $this-&gt;userRepository-&gt;getEntityByUserCredentials(\n    $username,\n    $password,\n    $this-&gt;getIdentifier(),\n    $client,\n    $provider // 新加的provider字段\n);</code></pre>\n<ul>\n<li>在同一个方法里面加入新参数的获取</li>\n</ul>\n<pre><code class=\"php\"> $provider = $this-&gt;getRequestParameter(&#39;provider&#39;, $request);\n\n if (is_null($provider)) {\n throw OAuthServerException::invalidRequest(&#39;provider&#39;);\n }</code></pre>\n<h2 id=\"在auth-php配置里面加入新的guard\"><a href=\"#在auth-php配置里面加入新的guard\" class=\"headerlink\" title=\"在auth.php配置里面加入新的guard\"></a>在auth.php配置里面加入新的guard</h2><p>首先需要加入新的guard配置</p>\n<pre><code class=\"php\">&#39;guards&#39; =&gt; [\n    // 原有的api guard\n    &#39;api&#39; =&gt; [\n        &#39;driver&#39; =&gt; &#39;passport&#39;,\n        &#39;provider&#39; =&gt; &#39;users&#39;,\n    ],\n    // 新加的admin-api guard\n    &#39;admin-api&#39; =&gt; [\n        &#39;driver&#39; =&gt; &#39;passport&#39;,\n        &#39;provider&#39; =&gt; &#39;admins&#39;,\n    ],\n],</code></pre>\n<p>添加新<code>admin-api</code> guard的provider</p>\n<pre><code class=\"php\">&#39;providers&#39; =&gt; [\n    &#39;users&#39; =&gt; [\n        &#39;driver&#39; =&gt; &#39;eloquent&#39;,\n        &#39;model&#39; =&gt; \\App\\Models\\General\\MemberLogin::class\n    ],\n    // 新加的admins provider对应不用的用户模型\n    &#39;admins&#39; =&gt; [\n        &#39;driver&#39; =&gt; &#39;eloquent&#39;,\n        &#39;model&#39; =&gt; \\App\\Models\\Backend\\Manager::class\n    ]\n],</code></pre>\n<h2 id=\"路由middleware使用\"><a href=\"#路由middleware使用\" class=\"headerlink\" title=\"路由middleware使用\"></a>路由middleware使用</h2><p>区别在于middleware, 上文加入的新<code>admin-api</code>guard, 在新的路由里面就可以使用<code>auth:admin-api</code>的权限验证中间件理实现权限控制了!</p>\n<pre><code class=\"php\">/*\n|--------------------------------------------------------------------------\n| Admin API版本 v1 路由\n|--------------------------------------------------------------------------.\n|\n| prefix admin/api/api版本号\n| namespace Api\\api版本号\n|\n*/\n$app-&gt;group([&#39;prefix&#39; =&gt; &#39;admin/api/v1&#39;, &#39;namespace&#39; =&gt; &#39;AdminApi\\V1&#39;], function ($app) {\n\n    // ================ 不受登录权限控制的接口路由 ================ //\n    //测试\n    $app-&gt;get(&#39;test&#39;, &#39;ExampleController@test&#39;);\n\n    // ================ 受登录权限控制的接口路由 ================ //\n    $app-&gt;group([&#39;middleware&#39; =&gt; &#39;auth:admin-api&#39;], function ($app) {\n        //测试\n        $app-&gt;get(&#39;test2&#39;, function(){\n            return &#39;oauth test&#39;;\n        });\n        //测试\n        $app-&gt;get(&#39;test3&#39;, &#39;ExampleController@test&#39;);\n    });\n\n});</code></pre>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>使用了多个guard的时候, 在使用laravel默认的<code>$request-&gt;user()</code>, 这个方法默认是使用<code>api</code>guard的, 可以在<code>auth.php</code>配置里面看到默认guard的配置.</p>\n<pre><code class=\"php\">/*\n|--------------------------------------------------------------------------\n| Authentication Defaults\n|--------------------------------------------------------------------------\n|\n| This option controls the default authentication &quot;guard&quot; and password\n| reset options for your application. You may change these defaults\n| as required, but they&#39;re a perfect start for most applications.\n|\n*/\n\n&#39;defaults&#39; =&gt; [\n    &#39;guard&#39; =&gt; env(&#39;AUTH_GUARD&#39;, &#39;api&#39;),\n    &#39;passwords&#39; =&gt; &#39;users&#39;,\n],</code></pre>\n<p>所以在使用新的<code>admin-api</code> guard的时候在使用<code>$request-&gt;user()</code>时需要加入对应的guard. 例子:</p>\n<pre><code class=\"php\">namespace App\\Http\\Controllers\\AdminApi\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass ExampleController extends Controller\n{\n    public function test(Request $request)\n    {\n        $request-&gt;user(&#39;admin-api&#39;)-&gt;toArray(); // 获取到admin-api下的用户信息\n    }\n}</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>这个教程是基于, lumen里面已经安装好了lumen-passport的插件, 如果还没有的话可以先到<a href=\"/2019/01/10/2019-01-10-lumen-passport-usage/\">lumen使用laravel passport教程</a>先安装.</p>\n<h2 id=\"改写Laravel-Passport里面的UserRepository\"><a href=\"#改写Laravel-Passport里面的UserRepository\" class=\"headerlink\" title=\"改写Laravel Passport里面的UserRepository\"></a>改写Laravel Passport里面的<code>UserRepository</code></h2><blockquote>\n<p>文件路径 <code>vendor\\laravel\\passport\\src\\Bridge\\UserRepository.php</code></p>\n</blockquote>\n<ul>\n<li><p>首先需要改写<code>userRepositroy</code>里面的<code>getUserEntityByUserCredentials</code>方法</p>\n</li>\n<li><p>复制<code>userRepositroy</code>里面的<code>getUserEntityByUserCredentials</code>方法, 改名为<code>getEntityByUserCredentials</code></p>\n</li>\n<li><p>在新建的方法里面找到一下代码</p>\n</li>\n</ul>\n<pre><code class=\"php\">$provider = config(&#39;auth.guards.api.provider&#39;);</code></pre>\n<p>改成一下样子</p>\n<pre><code class=\"php\">$provider = config(&#39;auth.guards.&#39;.$provider.&#39;.provider&#39;);</code></pre>\n<ul>\n<li>然后在新的方法<code>getEntityByUserCredentials</code>的参数里面添加新的参数<code>$provider</code></li>\n</ul>\n<pre><code class=\"php\">public function getEntityByUserCredentials($username, $password, $grantType, \n  ClientEntityInterface $clientEntity, $provider) {\n      //...\n}</code></pre>\n<h2 id=\"修改oauth2-server里面的PasswordGrand\"><a href=\"#修改oauth2-server里面的PasswordGrand\" class=\"headerlink\" title=\"修改oauth2-server里面的PasswordGrand\"></a>修改oauth2-server里面的PasswordGrand</h2><blockquote>\n<p>文件路径 <code>vendor\\league\\oauth2-server\\src\\Grant\\PasswordGrant.php</code></p>\n</blockquote>\n<ul>\n<li>修改<code>validateUser</code>方法里面的这一串代码:</li>\n</ul>\n<pre><code class=\"php\">$user = $this-&gt;userRepository-&gt;getEntityByUserCredentials(\n    $username,\n    $password,\n    $this-&gt;getIdentifier(),\n    $client,\n    $provider // 新加的provider字段\n);</code></pre>\n<ul>\n<li>在同一个方法里面加入新参数的获取</li>\n</ul>\n<pre><code class=\"php\"> $provider = $this-&gt;getRequestParameter(&#39;provider&#39;, $request);\n\n if (is_null($provider)) {\n throw OAuthServerException::invalidRequest(&#39;provider&#39;);\n }</code></pre>\n<h2 id=\"在auth-php配置里面加入新的guard\"><a href=\"#在auth-php配置里面加入新的guard\" class=\"headerlink\" title=\"在auth.php配置里面加入新的guard\"></a>在auth.php配置里面加入新的guard</h2><p>首先需要加入新的guard配置</p>\n<pre><code class=\"php\">&#39;guards&#39; =&gt; [\n    // 原有的api guard\n    &#39;api&#39; =&gt; [\n        &#39;driver&#39; =&gt; &#39;passport&#39;,\n        &#39;provider&#39; =&gt; &#39;users&#39;,\n    ],\n    // 新加的admin-api guard\n    &#39;admin-api&#39; =&gt; [\n        &#39;driver&#39; =&gt; &#39;passport&#39;,\n        &#39;provider&#39; =&gt; &#39;admins&#39;,\n    ],\n],</code></pre>\n<p>添加新<code>admin-api</code> guard的provider</p>\n<pre><code class=\"php\">&#39;providers&#39; =&gt; [\n    &#39;users&#39; =&gt; [\n        &#39;driver&#39; =&gt; &#39;eloquent&#39;,\n        &#39;model&#39; =&gt; \\App\\Models\\General\\MemberLogin::class\n    ],\n    // 新加的admins provider对应不用的用户模型\n    &#39;admins&#39; =&gt; [\n        &#39;driver&#39; =&gt; &#39;eloquent&#39;,\n        &#39;model&#39; =&gt; \\App\\Models\\Backend\\Manager::class\n    ]\n],</code></pre>\n<h2 id=\"路由middleware使用\"><a href=\"#路由middleware使用\" class=\"headerlink\" title=\"路由middleware使用\"></a>路由middleware使用</h2><p>区别在于middleware, 上文加入的新<code>admin-api</code>guard, 在新的路由里面就可以使用<code>auth:admin-api</code>的权限验证中间件理实现权限控制了!</p>\n<pre><code class=\"php\">/*\n|--------------------------------------------------------------------------\n| Admin API版本 v1 路由\n|--------------------------------------------------------------------------.\n|\n| prefix admin/api/api版本号\n| namespace Api\\api版本号\n|\n*/\n$app-&gt;group([&#39;prefix&#39; =&gt; &#39;admin/api/v1&#39;, &#39;namespace&#39; =&gt; &#39;AdminApi\\V1&#39;], function ($app) {\n\n    // ================ 不受登录权限控制的接口路由 ================ //\n    //测试\n    $app-&gt;get(&#39;test&#39;, &#39;ExampleController@test&#39;);\n\n    // ================ 受登录权限控制的接口路由 ================ //\n    $app-&gt;group([&#39;middleware&#39; =&gt; &#39;auth:admin-api&#39;], function ($app) {\n        //测试\n        $app-&gt;get(&#39;test2&#39;, function(){\n            return &#39;oauth test&#39;;\n        });\n        //测试\n        $app-&gt;get(&#39;test3&#39;, &#39;ExampleController@test&#39;);\n    });\n\n});</code></pre>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>使用了多个guard的时候, 在使用laravel默认的<code>$request-&gt;user()</code>, 这个方法默认是使用<code>api</code>guard的, 可以在<code>auth.php</code>配置里面看到默认guard的配置.</p>\n<pre><code class=\"php\">/*\n|--------------------------------------------------------------------------\n| Authentication Defaults\n|--------------------------------------------------------------------------\n|\n| This option controls the default authentication &quot;guard&quot; and password\n| reset options for your application. You may change these defaults\n| as required, but they&#39;re a perfect start for most applications.\n|\n*/\n\n&#39;defaults&#39; =&gt; [\n    &#39;guard&#39; =&gt; env(&#39;AUTH_GUARD&#39;, &#39;api&#39;),\n    &#39;passwords&#39; =&gt; &#39;users&#39;,\n],</code></pre>\n<p>所以在使用新的<code>admin-api</code> guard的时候在使用<code>$request-&gt;user()</code>时需要加入对应的guard. 例子:</p>\n<pre><code class=\"php\">namespace App\\Http\\Controllers\\AdminApi\\V1;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass ExampleController extends Controller\n{\n    public function test(Request $request)\n    {\n        $request-&gt;user(&#39;admin-api&#39;)-&gt;toArray(); // 获取到admin-api下的用户信息\n    }\n}</code></pre>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"Lumen passport实现多个用户体系下的oauth验证","path":"Laravel/lumen-passport实现多个用户体系下的oauth验证/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2019-01-10T00:40:41.000Z","pv":0,"totalPV":0,"categories":"Laravel","tags":["Laravel Passport","Lumen"],"internalLinks":["2019/01/10/2019-01-10-lumen-passport-usage/"],"keywords":[],"keywordsLength":0}},{"title":"Lumen 使用 laravel passport","date":"2019-01-10T00:51:23.000Z","cover":"https://s2.ax1x.com/2019/09/18/noNZf1.png","_content":"\nLumen是laravel的简洁版, 把laravel里面深重的依赖都去掉了, 所以直接安装laravel的passport是无法正常使用的. \n所以如果要在lumen上使用laravel的passport就需要安装另外一个插件.\n\n## 安装要求\n\n- PHP >= 5.6.3\n- Lumen >= 5.3\n\n## Composer安装lumen-passport插件\n\n首先安装 Lumen Passport\n\n```bash\n# 进入项目根目录\n$ cd lumen-app\n\n# 使用composer安装插件\n$ composer require dusterio/lumen-passport\n```\n\n## 修改 bootstrap (bootstrap/app.php)\n\n需要引入Laravel Passport的provider和Lumen的一些provider\n\n```php\n// 开启 Facades\n$app->withFacades();\n\n// 开启 Eloquent\n$app->withEloquent();\n\n// 开启 auth 中间件\n$app->routeMiddleware([\n    'auth' => App\\Http\\Middleware\\Authenticate::class,\n]);\n\n// 注册laravel passport的provider和lumen passport的provider\n$app->register(Laravel\\Passport\\PassportServiceProvider::class);\n$app->register(Dusterio\\LumenPassport\\PassportServiceProvider::class);\n```\n## 数据表移植和安装Laravel Passport\n\n```bash\n# 移植passport的数据表\nphp artisan migrate\n\n# 安装passport需要的配置\nphp artisan passport:install\n```\n\n## Lumen Passport自带的路由\n\n这个lumen-passport包已经引入了一下路由, 但是与web相关的路由因为lumen是没有web的路由的, 只有api的, 所以这个插件已经把web端的路由都去掉了.\n\nVerb | Path | NamedRoute | Controller | Action | Middleware\n--- | --- | --- | --- | --- | ---\nPOST   | /oauth/token                             |            | \\Laravel\\Passport\\Http\\Controllers\\AccessTokenController           | issueToken | -\nGET    | /oauth/tokens                            |            | \\Laravel\\Passport\\Http\\Controllers\\AuthorizedAccessTokenController | forUser    | auth\nDELETE | /oauth/tokens/{token_id}                 |            | \\Laravel\\Passport\\Http\\Controllers\\AuthorizedAccessTokenController | destroy    | auth\nPOST   | /oauth/token/refresh                     |            | \\Laravel\\Passport\\Http\\Controllers\\TransientTokenController        | refresh    | auth\nGET    | /oauth/clients                           |            | \\Laravel\\Passport\\Http\\Controllers\\ClientController                | forUser    | auth\nPOST   | /oauth/clients                           |            | \\Laravel\\Passport\\Http\\Controllers\\ClientController                | store      | auth\nPUT    | /oauth/clients/{client_id}               |            | \\Laravel\\Passport\\Http\\Controllers\\ClientController                | update     | auth\nDELETE | /oauth/clients/{client_id}               |            | \\Laravel\\Passport\\Http\\Controllers\\ClientController                | destroy    | auth\nGET    | /oauth/scopes                            |            | \\Laravel\\Passport\\Http\\Controllers\\ScopeController                 | all        | auth\nGET    | /oauth/personal-access-tokens            |            | \\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController   | forUser    | auth\nPOST   | /oauth/personal-access-tokens            |            | \\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController   | store      | auth\nDELETE | /oauth/personal-access-tokens/{token_id} |            | \\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController   | destroy    | auth\n\n## 配置\n\n修改 `config/auth.php` 里面的配置, 按照项目需要修改. 下面是一个简单的例子\n\n```php\nreturn [\n    'defaults' => [\n        'guard' => 'api',\n        'passwords' => 'users',\n    ],\n\n    'guards' => [\n        'api' => [\n            'driver' => 'passport',\n            'provider' => 'users',\n        ],\n    ],\n\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => \\App\\User::class\n        ]\n    ]\n];\n```\n\n需要在 `vendor\\laravel\\lumen-framework\\config\\auth.php` 复制到项目根目录下的`config`文件夹里面, 如果没有config文件夹, 需要手动添加一个.\n\n然后在`bootstrap/app.php`最前面加入配置应用, 因为lumen是不自动引入config里面的配置的.\n\n```php\n$app->configure('auth');\n```\n\n## 注册路由\n\n需要在`Provider\\AuthServiceProviders.php`里面的`boot`方法里面注册路由\n\n```php\n/**\n* Boot the authentication services for the application.\n*\n* @return void\n*/\npublic function boot()\n{\n    // Here you may define how you wish users to be authenticated for your Lumen\n    // application. The callback which receives the incoming request instance\n    // should return either a User instance or null. You're free to obtain\n    // the User instance via an API token or any other method necessary.\n\n    LumenPassport::routes($this->app); // 注册路由\n\n    LumenPassport::tokensExpireIn(Carbon::now()->addDays(7));\n\n    LumenPassport::refreshTokensExpireIn(Carbon::now()->addDays(30));\n}\n```\n\n简单路由注册\n\n```php\nDusterio\\LumenPassport\\LumenPassport::routes($this->app);\n```\n\n通用版本控制的路由\n\n```php\nDusterio\\LumenPassport\\LumenPassport::routes($this->app, ['prefix' => 'v1/oauth']);\n```\n\n## 用户模型\n\n需要在用户模型里面加入`HasApiTokens`的trait, 例子:\n\n```php\nclass User extends Model implements AuthenticatableContract, AuthorizableContract\n{\n    use HasApiTokens, Authenticatable, Authorizable;\n\n    /* rest of the model */\n}\n```\n\n## 其他\n\n其他的详细文档可以查看lumen-passport的插件[github](https://github.com/dusterio/lumen-passport)\n","source":"_posts/2019-01-10-lumen-passport-usage.md","raw":"---\ntitle: Lumen 使用 laravel passport\ndate: 2019-01-10 01:51:23\ncategories:\n  - Laravel\ntags:\n  - Lumen\n  - Laravel Passport\ncover: https://s2.ax1x.com/2019/09/18/noNZf1.png\n---\n\nLumen是laravel的简洁版, 把laravel里面深重的依赖都去掉了, 所以直接安装laravel的passport是无法正常使用的. \n所以如果要在lumen上使用laravel的passport就需要安装另外一个插件.\n\n## 安装要求\n\n- PHP >= 5.6.3\n- Lumen >= 5.3\n\n## Composer安装lumen-passport插件\n\n首先安装 Lumen Passport\n\n```bash\n# 进入项目根目录\n$ cd lumen-app\n\n# 使用composer安装插件\n$ composer require dusterio/lumen-passport\n```\n\n## 修改 bootstrap (bootstrap/app.php)\n\n需要引入Laravel Passport的provider和Lumen的一些provider\n\n```php\n// 开启 Facades\n$app->withFacades();\n\n// 开启 Eloquent\n$app->withEloquent();\n\n// 开启 auth 中间件\n$app->routeMiddleware([\n    'auth' => App\\Http\\Middleware\\Authenticate::class,\n]);\n\n// 注册laravel passport的provider和lumen passport的provider\n$app->register(Laravel\\Passport\\PassportServiceProvider::class);\n$app->register(Dusterio\\LumenPassport\\PassportServiceProvider::class);\n```\n## 数据表移植和安装Laravel Passport\n\n```bash\n# 移植passport的数据表\nphp artisan migrate\n\n# 安装passport需要的配置\nphp artisan passport:install\n```\n\n## Lumen Passport自带的路由\n\n这个lumen-passport包已经引入了一下路由, 但是与web相关的路由因为lumen是没有web的路由的, 只有api的, 所以这个插件已经把web端的路由都去掉了.\n\nVerb | Path | NamedRoute | Controller | Action | Middleware\n--- | --- | --- | --- | --- | ---\nPOST   | /oauth/token                             |            | \\Laravel\\Passport\\Http\\Controllers\\AccessTokenController           | issueToken | -\nGET    | /oauth/tokens                            |            | \\Laravel\\Passport\\Http\\Controllers\\AuthorizedAccessTokenController | forUser    | auth\nDELETE | /oauth/tokens/{token_id}                 |            | \\Laravel\\Passport\\Http\\Controllers\\AuthorizedAccessTokenController | destroy    | auth\nPOST   | /oauth/token/refresh                     |            | \\Laravel\\Passport\\Http\\Controllers\\TransientTokenController        | refresh    | auth\nGET    | /oauth/clients                           |            | \\Laravel\\Passport\\Http\\Controllers\\ClientController                | forUser    | auth\nPOST   | /oauth/clients                           |            | \\Laravel\\Passport\\Http\\Controllers\\ClientController                | store      | auth\nPUT    | /oauth/clients/{client_id}               |            | \\Laravel\\Passport\\Http\\Controllers\\ClientController                | update     | auth\nDELETE | /oauth/clients/{client_id}               |            | \\Laravel\\Passport\\Http\\Controllers\\ClientController                | destroy    | auth\nGET    | /oauth/scopes                            |            | \\Laravel\\Passport\\Http\\Controllers\\ScopeController                 | all        | auth\nGET    | /oauth/personal-access-tokens            |            | \\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController   | forUser    | auth\nPOST   | /oauth/personal-access-tokens            |            | \\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController   | store      | auth\nDELETE | /oauth/personal-access-tokens/{token_id} |            | \\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController   | destroy    | auth\n\n## 配置\n\n修改 `config/auth.php` 里面的配置, 按照项目需要修改. 下面是一个简单的例子\n\n```php\nreturn [\n    'defaults' => [\n        'guard' => 'api',\n        'passwords' => 'users',\n    ],\n\n    'guards' => [\n        'api' => [\n            'driver' => 'passport',\n            'provider' => 'users',\n        ],\n    ],\n\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => \\App\\User::class\n        ]\n    ]\n];\n```\n\n需要在 `vendor\\laravel\\lumen-framework\\config\\auth.php` 复制到项目根目录下的`config`文件夹里面, 如果没有config文件夹, 需要手动添加一个.\n\n然后在`bootstrap/app.php`最前面加入配置应用, 因为lumen是不自动引入config里面的配置的.\n\n```php\n$app->configure('auth');\n```\n\n## 注册路由\n\n需要在`Provider\\AuthServiceProviders.php`里面的`boot`方法里面注册路由\n\n```php\n/**\n* Boot the authentication services for the application.\n*\n* @return void\n*/\npublic function boot()\n{\n    // Here you may define how you wish users to be authenticated for your Lumen\n    // application. The callback which receives the incoming request instance\n    // should return either a User instance or null. You're free to obtain\n    // the User instance via an API token or any other method necessary.\n\n    LumenPassport::routes($this->app); // 注册路由\n\n    LumenPassport::tokensExpireIn(Carbon::now()->addDays(7));\n\n    LumenPassport::refreshTokensExpireIn(Carbon::now()->addDays(30));\n}\n```\n\n简单路由注册\n\n```php\nDusterio\\LumenPassport\\LumenPassport::routes($this->app);\n```\n\n通用版本控制的路由\n\n```php\nDusterio\\LumenPassport\\LumenPassport::routes($this->app, ['prefix' => 'v1/oauth']);\n```\n\n## 用户模型\n\n需要在用户模型里面加入`HasApiTokens`的trait, 例子:\n\n```php\nclass User extends Model implements AuthenticatableContract, AuthorizableContract\n{\n    use HasApiTokens, Authenticatable, Authorizable;\n\n    /* rest of the model */\n}\n```\n\n## 其他\n\n其他的详细文档可以查看lumen-passport的插件[github](https://github.com/dusterio/lumen-passport)\n","slug":"2019-01-10-lumen-passport-usage","published":1,"updated":"2019-12-24T20:39:48.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy63000y3cqe1ft8xzfw","content":"<p>Lumen是laravel的简洁版, 把laravel里面深重的依赖都去掉了, 所以直接安装laravel的passport是无法正常使用的.<br>所以如果要在lumen上使用laravel的passport就需要安装另外一个插件.</p>\n<h2 id=\"安装要求\"><a href=\"#安装要求\" class=\"headerlink\" title=\"安装要求\"></a>安装要求</h2><ul>\n<li>PHP &gt;= 5.6.3</li>\n<li>Lumen &gt;= 5.3</li>\n</ul>\n<h2 id=\"Composer安装lumen-passport插件\"><a href=\"#Composer安装lumen-passport插件\" class=\"headerlink\" title=\"Composer安装lumen-passport插件\"></a>Composer安装lumen-passport插件</h2><p>首先安装 Lumen Passport</p>\n<pre><code class=\"bash\"># 进入项目根目录\n$ cd lumen-app\n\n# 使用composer安装插件\n$ composer require dusterio/lumen-passport</code></pre>\n<h2 id=\"修改-bootstrap-bootstrap-app-php\"><a href=\"#修改-bootstrap-bootstrap-app-php\" class=\"headerlink\" title=\"修改 bootstrap (bootstrap/app.php)\"></a>修改 bootstrap (bootstrap/app.php)</h2><p>需要引入Laravel Passport的provider和Lumen的一些provider</p>\n<pre><code class=\"php\">// 开启 Facades\n$app-&gt;withFacades();\n\n// 开启 Eloquent\n$app-&gt;withEloquent();\n\n// 开启 auth 中间件\n$app-&gt;routeMiddleware([\n    &#39;auth&#39; =&gt; App\\Http\\Middleware\\Authenticate::class,\n]);\n\n// 注册laravel passport的provider和lumen passport的provider\n$app-&gt;register(Laravel\\Passport\\PassportServiceProvider::class);\n$app-&gt;register(Dusterio\\LumenPassport\\PassportServiceProvider::class);</code></pre>\n<h2 id=\"数据表移植和安装Laravel-Passport\"><a href=\"#数据表移植和安装Laravel-Passport\" class=\"headerlink\" title=\"数据表移植和安装Laravel Passport\"></a>数据表移植和安装Laravel Passport</h2><pre><code class=\"bash\"># 移植passport的数据表\nphp artisan migrate\n\n# 安装passport需要的配置\nphp artisan passport:install</code></pre>\n<h2 id=\"Lumen-Passport自带的路由\"><a href=\"#Lumen-Passport自带的路由\" class=\"headerlink\" title=\"Lumen Passport自带的路由\"></a>Lumen Passport自带的路由</h2><p>这个lumen-passport包已经引入了一下路由, 但是与web相关的路由因为lumen是没有web的路由的, 只有api的, 所以这个插件已经把web端的路由都去掉了.</p>\n<table>\n<thead>\n<tr>\n<th>Verb</th>\n<th>Path</th>\n<th>NamedRoute</th>\n<th>Controller</th>\n<th>Action</th>\n<th>Middleware</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>POST</td>\n<td>/oauth/token</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\AccessTokenController</td>\n<td>issueToken</td>\n<td>-</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/oauth/tokens</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\AuthorizedAccessTokenController</td>\n<td>forUser</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/oauth/tokens/{token_id}</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\AuthorizedAccessTokenController</td>\n<td>destroy</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/oauth/token/refresh</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\TransientTokenController</td>\n<td>refresh</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/oauth/clients</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ClientController</td>\n<td>forUser</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/oauth/clients</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ClientController</td>\n<td>store</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>/oauth/clients/{client_id}</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ClientController</td>\n<td>update</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/oauth/clients/{client_id}</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ClientController</td>\n<td>destroy</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/oauth/scopes</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ScopeController</td>\n<td>all</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/oauth/personal-access-tokens</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController</td>\n<td>forUser</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/oauth/personal-access-tokens</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController</td>\n<td>store</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/oauth/personal-access-tokens/{token_id}</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController</td>\n<td>destroy</td>\n<td>auth</td>\n</tr>\n</tbody></table>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改 <code>config/auth.php</code> 里面的配置, 按照项目需要修改. 下面是一个简单的例子</p>\n<pre><code class=\"php\">return [\n    &#39;defaults&#39; =&gt; [\n        &#39;guard&#39; =&gt; &#39;api&#39;,\n        &#39;passwords&#39; =&gt; &#39;users&#39;,\n    ],\n\n    &#39;guards&#39; =&gt; [\n        &#39;api&#39; =&gt; [\n            &#39;driver&#39; =&gt; &#39;passport&#39;,\n            &#39;provider&#39; =&gt; &#39;users&#39;,\n        ],\n    ],\n\n    &#39;providers&#39; =&gt; [\n        &#39;users&#39; =&gt; [\n            &#39;driver&#39; =&gt; &#39;eloquent&#39;,\n            &#39;model&#39; =&gt; \\App\\User::class\n        ]\n    ]\n];</code></pre>\n<p>需要在 <code>vendor\\laravel\\lumen-framework\\config\\auth.php</code> 复制到项目根目录下的<code>config</code>文件夹里面, 如果没有config文件夹, 需要手动添加一个.</p>\n<p>然后在<code>bootstrap/app.php</code>最前面加入配置应用, 因为lumen是不自动引入config里面的配置的.</p>\n<pre><code class=\"php\">$app-&gt;configure(&#39;auth&#39;);</code></pre>\n<h2 id=\"注册路由\"><a href=\"#注册路由\" class=\"headerlink\" title=\"注册路由\"></a>注册路由</h2><p>需要在<code>Provider\\AuthServiceProviders.php</code>里面的<code>boot</code>方法里面注册路由</p>\n<pre><code class=\"php\">/**\n* Boot the authentication services for the application.\n*\n* @return void\n*/\npublic function boot()\n{\n    // Here you may define how you wish users to be authenticated for your Lumen\n    // application. The callback which receives the incoming request instance\n    // should return either a User instance or null. You&#39;re free to obtain\n    // the User instance via an API token or any other method necessary.\n\n    LumenPassport::routes($this-&gt;app); // 注册路由\n\n    LumenPassport::tokensExpireIn(Carbon::now()-&gt;addDays(7));\n\n    LumenPassport::refreshTokensExpireIn(Carbon::now()-&gt;addDays(30));\n}</code></pre>\n<p>简单路由注册</p>\n<pre><code class=\"php\">Dusterio\\LumenPassport\\LumenPassport::routes($this-&gt;app);</code></pre>\n<p>通用版本控制的路由</p>\n<pre><code class=\"php\">Dusterio\\LumenPassport\\LumenPassport::routes($this-&gt;app, [&#39;prefix&#39; =&gt; &#39;v1/oauth&#39;]);</code></pre>\n<h2 id=\"用户模型\"><a href=\"#用户模型\" class=\"headerlink\" title=\"用户模型\"></a>用户模型</h2><p>需要在用户模型里面加入<code>HasApiTokens</code>的trait, 例子:</p>\n<pre><code class=\"php\">class User extends Model implements AuthenticatableContract, AuthorizableContract\n{\n    use HasApiTokens, Authenticatable, Authorizable;\n\n    /* rest of the model */\n}</code></pre>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>其他的详细文档可以查看lumen-passport的插件<a href=\"https://github.com/dusterio/lumen-passport\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Lumen是laravel的简洁版, 把laravel里面深重的依赖都去掉了, 所以直接安装laravel的passport是无法正常使用的.<br>所以如果要在lumen上使用laravel的passport就需要安装另外一个插件.</p>\n<h2 id=\"安装要求\"><a href=\"#安装要求\" class=\"headerlink\" title=\"安装要求\"></a>安装要求</h2><ul>\n<li>PHP &gt;= 5.6.3</li>\n<li>Lumen &gt;= 5.3</li>\n</ul>\n<h2 id=\"Composer安装lumen-passport插件\"><a href=\"#Composer安装lumen-passport插件\" class=\"headerlink\" title=\"Composer安装lumen-passport插件\"></a>Composer安装lumen-passport插件</h2><p>首先安装 Lumen Passport</p>\n<pre><code class=\"bash\"># 进入项目根目录\n$ cd lumen-app\n\n# 使用composer安装插件\n$ composer require dusterio/lumen-passport</code></pre>\n<h2 id=\"修改-bootstrap-bootstrap-app-php\"><a href=\"#修改-bootstrap-bootstrap-app-php\" class=\"headerlink\" title=\"修改 bootstrap (bootstrap/app.php)\"></a>修改 bootstrap (bootstrap/app.php)</h2><p>需要引入Laravel Passport的provider和Lumen的一些provider</p>\n<pre><code class=\"php\">// 开启 Facades\n$app-&gt;withFacades();\n\n// 开启 Eloquent\n$app-&gt;withEloquent();\n\n// 开启 auth 中间件\n$app-&gt;routeMiddleware([\n    &#39;auth&#39; =&gt; App\\Http\\Middleware\\Authenticate::class,\n]);\n\n// 注册laravel passport的provider和lumen passport的provider\n$app-&gt;register(Laravel\\Passport\\PassportServiceProvider::class);\n$app-&gt;register(Dusterio\\LumenPassport\\PassportServiceProvider::class);</code></pre>\n<h2 id=\"数据表移植和安装Laravel-Passport\"><a href=\"#数据表移植和安装Laravel-Passport\" class=\"headerlink\" title=\"数据表移植和安装Laravel Passport\"></a>数据表移植和安装Laravel Passport</h2><pre><code class=\"bash\"># 移植passport的数据表\nphp artisan migrate\n\n# 安装passport需要的配置\nphp artisan passport:install</code></pre>\n<h2 id=\"Lumen-Passport自带的路由\"><a href=\"#Lumen-Passport自带的路由\" class=\"headerlink\" title=\"Lumen Passport自带的路由\"></a>Lumen Passport自带的路由</h2><p>这个lumen-passport包已经引入了一下路由, 但是与web相关的路由因为lumen是没有web的路由的, 只有api的, 所以这个插件已经把web端的路由都去掉了.</p>\n<table>\n<thead>\n<tr>\n<th>Verb</th>\n<th>Path</th>\n<th>NamedRoute</th>\n<th>Controller</th>\n<th>Action</th>\n<th>Middleware</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>POST</td>\n<td>/oauth/token</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\AccessTokenController</td>\n<td>issueToken</td>\n<td>-</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/oauth/tokens</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\AuthorizedAccessTokenController</td>\n<td>forUser</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/oauth/tokens/{token_id}</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\AuthorizedAccessTokenController</td>\n<td>destroy</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/oauth/token/refresh</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\TransientTokenController</td>\n<td>refresh</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/oauth/clients</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ClientController</td>\n<td>forUser</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/oauth/clients</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ClientController</td>\n<td>store</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>/oauth/clients/{client_id}</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ClientController</td>\n<td>update</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/oauth/clients/{client_id}</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ClientController</td>\n<td>destroy</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/oauth/scopes</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\ScopeController</td>\n<td>all</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/oauth/personal-access-tokens</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController</td>\n<td>forUser</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/oauth/personal-access-tokens</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController</td>\n<td>store</td>\n<td>auth</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/oauth/personal-access-tokens/{token_id}</td>\n<td></td>\n<td>\\Laravel\\Passport\\Http\\Controllers\\PersonalAccessTokenController</td>\n<td>destroy</td>\n<td>auth</td>\n</tr>\n</tbody></table>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>修改 <code>config/auth.php</code> 里面的配置, 按照项目需要修改. 下面是一个简单的例子</p>\n<pre><code class=\"php\">return [\n    &#39;defaults&#39; =&gt; [\n        &#39;guard&#39; =&gt; &#39;api&#39;,\n        &#39;passwords&#39; =&gt; &#39;users&#39;,\n    ],\n\n    &#39;guards&#39; =&gt; [\n        &#39;api&#39; =&gt; [\n            &#39;driver&#39; =&gt; &#39;passport&#39;,\n            &#39;provider&#39; =&gt; &#39;users&#39;,\n        ],\n    ],\n\n    &#39;providers&#39; =&gt; [\n        &#39;users&#39; =&gt; [\n            &#39;driver&#39; =&gt; &#39;eloquent&#39;,\n            &#39;model&#39; =&gt; \\App\\User::class\n        ]\n    ]\n];</code></pre>\n<p>需要在 <code>vendor\\laravel\\lumen-framework\\config\\auth.php</code> 复制到项目根目录下的<code>config</code>文件夹里面, 如果没有config文件夹, 需要手动添加一个.</p>\n<p>然后在<code>bootstrap/app.php</code>最前面加入配置应用, 因为lumen是不自动引入config里面的配置的.</p>\n<pre><code class=\"php\">$app-&gt;configure(&#39;auth&#39;);</code></pre>\n<h2 id=\"注册路由\"><a href=\"#注册路由\" class=\"headerlink\" title=\"注册路由\"></a>注册路由</h2><p>需要在<code>Provider\\AuthServiceProviders.php</code>里面的<code>boot</code>方法里面注册路由</p>\n<pre><code class=\"php\">/**\n* Boot the authentication services for the application.\n*\n* @return void\n*/\npublic function boot()\n{\n    // Here you may define how you wish users to be authenticated for your Lumen\n    // application. The callback which receives the incoming request instance\n    // should return either a User instance or null. You&#39;re free to obtain\n    // the User instance via an API token or any other method necessary.\n\n    LumenPassport::routes($this-&gt;app); // 注册路由\n\n    LumenPassport::tokensExpireIn(Carbon::now()-&gt;addDays(7));\n\n    LumenPassport::refreshTokensExpireIn(Carbon::now()-&gt;addDays(30));\n}</code></pre>\n<p>简单路由注册</p>\n<pre><code class=\"php\">Dusterio\\LumenPassport\\LumenPassport::routes($this-&gt;app);</code></pre>\n<p>通用版本控制的路由</p>\n<pre><code class=\"php\">Dusterio\\LumenPassport\\LumenPassport::routes($this-&gt;app, [&#39;prefix&#39; =&gt; &#39;v1/oauth&#39;]);</code></pre>\n<h2 id=\"用户模型\"><a href=\"#用户模型\" class=\"headerlink\" title=\"用户模型\"></a>用户模型</h2><p>需要在用户模型里面加入<code>HasApiTokens</code>的trait, 例子:</p>\n<pre><code class=\"php\">class User extends Model implements AuthenticatableContract, AuthorizableContract\n{\n    use HasApiTokens, Authenticatable, Authorizable;\n\n    /* rest of the model */\n}</code></pre>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>其他的详细文档可以查看lumen-passport的插件<a href=\"https://github.com/dusterio/lumen-passport\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Dec 24 2019 21:39:48 GMT+0100 (Central European Standard Time)","title":"Lumen 使用 laravel passport","path":"Laravel/lumen-使用-laravel-passport/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2019-01-10T00:51:23.000Z","pv":0,"totalPV":0,"categories":"Laravel","tags":["Laravel Passport","Lumen"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"The forAll Macro in OpenFOAM","abstract":"Macros in C++ code are hated by most developers, but OpenFOAM engineers don't care!     You can learn how to efficiently use this one and only one: forAll","header_image":"/assets/images/ionic2-banner.png","cover":"/assets/images/ionic2-banner.png","date":"2019-08-28T23:00:00.000Z","_content":"\nBecause of the frequent use of range-like loops in OpenFOAM (In official code base, forks, and any independent work for that matter), the nice developers provided a \"shortcut\" to loop through all elements of a list; any list. This post tries to take a way the popular misuse of this shortcut: Believe it or not, people abuse the `forAll` macro in every which way.\n\n\n\n\n## The `forAll` macro and its \"friends\"\n\nFirst of all, we all know that `forAll` is not part of C++, so it is a user-defined macro. Assuming a recent fork/version of OpenFOAM is sourced, the definition of this macro and similar ones can be found by running the following shell commands:\n\n```bash\ncd $FOAM_SRC/$WM_PROJECT\ngrep -r . -e \"define.*forAll\"\n```\n\nThe previous command reveals that there are at least four (4, `foam-extend` has some more)  defined macros to loop through \"collections\":\n\n1. The good old `forAll` and its reversed-looping version `forAllReverse`.\n2. A `forAllIter` macro specialized in iterating over a Container using an \"iterator\" and a const-version of it.\n\nYep, browsing source code is extremely useful (These macros are defined in `UList.h`).\n\nPeople need to understand that `forAll(list, i)` is \"just\" a shortcut to `for (int i=0; i<(list).size(); i++)`.\nAlthough `i` is actually a `Foam::label` in standard OF versions. Strictly speaking; the macro just \"works\" on any container that has a `size()` member method (Think of it as a vector of a known size - at construction time). Such containers will probably (publicly) inherit from the `UList`  (The most lightweight-efficient base class I know of).\n\nLet's examine a very simple example of constructing a `scalarList` (a `List<scalar>`, publicly inheriting from `UList<scalar>`).\n\n```cpp\n#include \"fvCFD.H\"\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\nint main(int argc, char *argv[])\n{   \n    // Create a list of some scalars\n    scalarList someScalars(10, 0);\n\n    // Perfectly fine use of forAll\n    forAll(someScalars, sc)\n    {\n        someScalars[sc] = doSomeCalculations(sc);\n    };\n\n    Info<< \"End\\n\" << endl;\n    return 0;\n}\n```\n\nBut this may be misleading; what if someone uses the macro to loop over a \"different\" type of containers, say a `dictionary`? Is `forAll` suitable for such tasks?\n\n\nThe answer is in the previous example actually: Common use of `forAll` requires the list object to \n- Have a `size()` method and\n- Be _efficiently_ indexable with some method/operator (`operator[]` in this case), otherwise, there is no benefit in looping through some collection if you can't access its elements!!\n\nSo, if `dictionary` objects verify these requirements; we're golden.\n\nIn fact, The `DictionaryBase` Template class publicly inherits from the (Link) List Type it is templated on. It's easy to follow the inheritance diagram of the most commonly used class [dictionary](https://cpp.openfoam.org/v7/classFoam_1_1dictionary.html) to see that there is no `size()` method defined anywhere. Also, how would one refer to an entry as `dictionary[i]` ??\n\nIt should be obvious now that `forAll` is not the right macro to use in this case. That's where the second family of macros kicks in: Instead of using a (possibly more efficient) predefined-size containers, some situations require the use of \"more dynamic\" ones which only hold \"pointers\" to their begin/end positions. An iterator is then used to go back and forth between these positions.\n\nA nice usage of this macro can be found at line 175 of [solution.C](https://cpp.openfoam.org/v7/solution_8C_source.html) file so newer versions of OpenFOAM would understand older specification of `fvSolution.solver`.\n\nThe **const-iter** version of `forAllIter` is also used to read entries of a `dictionary` into a `HashTable` ... you can find an example at line 146 of [HashPtrTableIO.C](https://cpp.openfoam.org/v7/HashPtrTableIO_8C_source.html).\n\n## A word on `UList` in OpenFOAM\n\nAs far as I can tell, this class is just \"well written\" - \"well thought through\". Its purpose is  to provide an efficient base class for \"Sub-Lists\". A quick look on [the list of classes](https://cpp.openfoam.org/v7/classFoam_1_1UList.html#details)  that directly inherit from it shows how important `UList` is.\n\nBy the way, the class also holds a random access iterator; so it can be used with `forAllIter`:  We use an object (usually called `iter`) to \"point\" to a list item each time we iterate. The list item itself is accessed by dereferencing the pointer (`*iter`).\n\nI'm not aware of a way to get the \"index\" of an element in a List; It would be inefficient! So I never bothered to search for one. Another thing I should point out is that `std::distance` probably won't work without some serious Type Casting :). It's (was?) dangerous anyway, and I  don't know if a similar function is available for OpenFOAM iterators).\n\nIn fact, the use of `std::distance` takes away one the most important features of iterator-based loops: The ability to loop through a container where either `.begin()` or `.end()` is not reachable from the other (possibly by incrementing `iter`) as it results in \"undefined behavior\".\n\n> In recent OpenFOAM versions, `GeometricField` (`volScalarField`s ...) inherits from `UList`, so, one can typically loop through their elements  with both macros; although  template specializations specialize the sense of \"loop through their elements\": Some types  support looping through \"internalField\"; others make it so the loop hits everything.\n\n## A word on `dictionary` in OpenFOAM\n\nThis class a good example of a lot of things. \"An iterator-based container\" as I introduced it in  this post is just the tip of the iceberg. The reason I chose it for this post is that most OpenFOAM _users_ consider a dictionary to be a \"list\" which is not entirely true. The similarity of, for example, getting some IDs (0, 1, 2, 3 ... ) for mesh patches from the `boundary` files doesn't mean a dictionary is indexable (I'm talking about \"old-fashion\" indexing here).\n\n\n\n","source":"_posts/2019-08-29-forall-openfoam-cpp.md","raw":"---\ntitle: The forAll Macro in OpenFOAM\nabstract: \"Macros in C++ code are hated by most developers, but OpenFOAM engineers don't care!    \n \tYou can learn how to efficiently use this one and only one: forAll\"\nheader_image: /assets/images/ionic2-banner.png\ncover: /assets/images/ionic2-banner.png\ndate: 2019/08/29\ncategories:\n  - coding\ntags:\n  - OpenFOAM\n  - Programming\n  - Cpp\n---\n\nBecause of the frequent use of range-like loops in OpenFOAM (In official code base, forks, and any independent work for that matter), the nice developers provided a \"shortcut\" to loop through all elements of a list; any list. This post tries to take a way the popular misuse of this shortcut: Believe it or not, people abuse the `forAll` macro in every which way.\n\n\n\n\n## The `forAll` macro and its \"friends\"\n\nFirst of all, we all know that `forAll` is not part of C++, so it is a user-defined macro. Assuming a recent fork/version of OpenFOAM is sourced, the definition of this macro and similar ones can be found by running the following shell commands:\n\n```bash\ncd $FOAM_SRC/$WM_PROJECT\ngrep -r . -e \"define.*forAll\"\n```\n\nThe previous command reveals that there are at least four (4, `foam-extend` has some more)  defined macros to loop through \"collections\":\n\n1. The good old `forAll` and its reversed-looping version `forAllReverse`.\n2. A `forAllIter` macro specialized in iterating over a Container using an \"iterator\" and a const-version of it.\n\nYep, browsing source code is extremely useful (These macros are defined in `UList.h`).\n\nPeople need to understand that `forAll(list, i)` is \"just\" a shortcut to `for (int i=0; i<(list).size(); i++)`.\nAlthough `i` is actually a `Foam::label` in standard OF versions. Strictly speaking; the macro just \"works\" on any container that has a `size()` member method (Think of it as a vector of a known size - at construction time). Such containers will probably (publicly) inherit from the `UList`  (The most lightweight-efficient base class I know of).\n\nLet's examine a very simple example of constructing a `scalarList` (a `List<scalar>`, publicly inheriting from `UList<scalar>`).\n\n```cpp\n#include \"fvCFD.H\"\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\nint main(int argc, char *argv[])\n{   \n    // Create a list of some scalars\n    scalarList someScalars(10, 0);\n\n    // Perfectly fine use of forAll\n    forAll(someScalars, sc)\n    {\n        someScalars[sc] = doSomeCalculations(sc);\n    };\n\n    Info<< \"End\\n\" << endl;\n    return 0;\n}\n```\n\nBut this may be misleading; what if someone uses the macro to loop over a \"different\" type of containers, say a `dictionary`? Is `forAll` suitable for such tasks?\n\n\nThe answer is in the previous example actually: Common use of `forAll` requires the list object to \n- Have a `size()` method and\n- Be _efficiently_ indexable with some method/operator (`operator[]` in this case), otherwise, there is no benefit in looping through some collection if you can't access its elements!!\n\nSo, if `dictionary` objects verify these requirements; we're golden.\n\nIn fact, The `DictionaryBase` Template class publicly inherits from the (Link) List Type it is templated on. It's easy to follow the inheritance diagram of the most commonly used class [dictionary](https://cpp.openfoam.org/v7/classFoam_1_1dictionary.html) to see that there is no `size()` method defined anywhere. Also, how would one refer to an entry as `dictionary[i]` ??\n\nIt should be obvious now that `forAll` is not the right macro to use in this case. That's where the second family of macros kicks in: Instead of using a (possibly more efficient) predefined-size containers, some situations require the use of \"more dynamic\" ones which only hold \"pointers\" to their begin/end positions. An iterator is then used to go back and forth between these positions.\n\nA nice usage of this macro can be found at line 175 of [solution.C](https://cpp.openfoam.org/v7/solution_8C_source.html) file so newer versions of OpenFOAM would understand older specification of `fvSolution.solver`.\n\nThe **const-iter** version of `forAllIter` is also used to read entries of a `dictionary` into a `HashTable` ... you can find an example at line 146 of [HashPtrTableIO.C](https://cpp.openfoam.org/v7/HashPtrTableIO_8C_source.html).\n\n## A word on `UList` in OpenFOAM\n\nAs far as I can tell, this class is just \"well written\" - \"well thought through\". Its purpose is  to provide an efficient base class for \"Sub-Lists\". A quick look on [the list of classes](https://cpp.openfoam.org/v7/classFoam_1_1UList.html#details)  that directly inherit from it shows how important `UList` is.\n\nBy the way, the class also holds a random access iterator; so it can be used with `forAllIter`:  We use an object (usually called `iter`) to \"point\" to a list item each time we iterate. The list item itself is accessed by dereferencing the pointer (`*iter`).\n\nI'm not aware of a way to get the \"index\" of an element in a List; It would be inefficient! So I never bothered to search for one. Another thing I should point out is that `std::distance` probably won't work without some serious Type Casting :). It's (was?) dangerous anyway, and I  don't know if a similar function is available for OpenFOAM iterators).\n\nIn fact, the use of `std::distance` takes away one the most important features of iterator-based loops: The ability to loop through a container where either `.begin()` or `.end()` is not reachable from the other (possibly by incrementing `iter`) as it results in \"undefined behavior\".\n\n> In recent OpenFOAM versions, `GeometricField` (`volScalarField`s ...) inherits from `UList`, so, one can typically loop through their elements  with both macros; although  template specializations specialize the sense of \"loop through their elements\": Some types  support looping through \"internalField\"; others make it so the loop hits everything.\n\n## A word on `dictionary` in OpenFOAM\n\nThis class a good example of a lot of things. \"An iterator-based container\" as I introduced it in  this post is just the tip of the iceberg. The reason I chose it for this post is that most OpenFOAM _users_ consider a dictionary to be a \"list\" which is not entirely true. The similarity of, for example, getting some IDs (0, 1, 2, 3 ... ) for mesh patches from the `boundary` files doesn't mean a dictionary is indexable (I'm talking about \"old-fashion\" indexing here).\n\n\n\n","slug":"2019-08-29-forall-openfoam-cpp","published":1,"updated":"2019-12-25T13:00:59.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy6700113cqeilao2u3r","content":"<p>Because of the frequent use of range-like loops in OpenFOAM (In official code base, forks, and any independent work for that matter), the nice developers provided a “shortcut” to loop through all elements of a list; any list. This post tries to take a way the popular misuse of this shortcut: Believe it or not, people abuse the <code>forAll</code> macro in every which way.</p>\n<h2 id=\"The-forAll-macro-and-its-“friends”\"><a href=\"#The-forAll-macro-and-its-“friends”\" class=\"headerlink\" title=\"The forAll macro and its “friends”\"></a>The <code>forAll</code> macro and its “friends”</h2><p>First of all, we all know that <code>forAll</code> is not part of C++, so it is a user-defined macro. Assuming a recent fork/version of OpenFOAM is sourced, the definition of this macro and similar ones can be found by running the following shell commands:</p>\n<pre><code class=\"bash\">cd $FOAM_SRC/$WM_PROJECT\ngrep -r . -e &quot;define.*forAll&quot;</code></pre>\n<p>The previous command reveals that there are at least four (4, <code>foam-extend</code> has some more)  defined macros to loop through “collections”:</p>\n<ol>\n<li>The good old <code>forAll</code> and its reversed-looping version <code>forAllReverse</code>.</li>\n<li>A <code>forAllIter</code> macro specialized in iterating over a Container using an “iterator” and a const-version of it.</li>\n</ol>\n<p>Yep, browsing source code is extremely useful (These macros are defined in <code>UList.h</code>).</p>\n<p>People need to understand that <code>forAll(list, i)</code> is “just” a shortcut to <code>for (int i=0; i&lt;(list).size(); i++)</code>.<br>Although <code>i</code> is actually a <code>Foam::label</code> in standard OF versions. Strictly speaking; the macro just “works” on any container that has a <code>size()</code> member method (Think of it as a vector of a known size - at construction time). Such containers will probably (publicly) inherit from the <code>UList</code>  (The most lightweight-efficient base class I know of).</p>\n<p>Let’s examine a very simple example of constructing a <code>scalarList</code> (a <code>List&lt;scalar&gt;</code>, publicly inheriting from <code>UList&lt;scalar&gt;</code>).</p>\n<pre><code class=\"cpp\">#include &quot;fvCFD.H&quot;\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\nint main(int argc, char *argv[])\n{   \n    // Create a list of some scalars\n    scalarList someScalars(10, 0);\n\n    // Perfectly fine use of forAll\n    forAll(someScalars, sc)\n    {\n        someScalars[sc] = doSomeCalculations(sc);\n    };\n\n    Info&lt;&lt; &quot;End\\n&quot; &lt;&lt; endl;\n    return 0;\n}</code></pre>\n<p>But this may be misleading; what if someone uses the macro to loop over a “different” type of containers, say a <code>dictionary</code>? Is <code>forAll</code> suitable for such tasks?</p>\n<p>The answer is in the previous example actually: Common use of <code>forAll</code> requires the list object to </p>\n<ul>\n<li>Have a <code>size()</code> method and</li>\n<li>Be <em>efficiently</em> indexable with some method/operator (<code>operator[]</code> in this case), otherwise, there is no benefit in looping through some collection if you can’t access its elements!!</li>\n</ul>\n<p>So, if <code>dictionary</code> objects verify these requirements; we’re golden.</p>\n<p>In fact, The <code>DictionaryBase</code> Template class publicly inherits from the (Link) List Type it is templated on. It’s easy to follow the inheritance diagram of the most commonly used class <a href=\"https://cpp.openfoam.org/v7/classFoam_1_1dictionary.html\" target=\"_blank\" rel=\"noopener\">dictionary</a> to see that there is no <code>size()</code> method defined anywhere. Also, how would one refer to an entry as <code>dictionary[i]</code> ??</p>\n<p>It should be obvious now that <code>forAll</code> is not the right macro to use in this case. That’s where the second family of macros kicks in: Instead of using a (possibly more efficient) predefined-size containers, some situations require the use of “more dynamic” ones which only hold “pointers” to their begin/end positions. An iterator is then used to go back and forth between these positions.</p>\n<p>A nice usage of this macro can be found at line 175 of <a href=\"https://cpp.openfoam.org/v7/solution_8C_source.html\" target=\"_blank\" rel=\"noopener\">solution.C</a> file so newer versions of OpenFOAM would understand older specification of <code>fvSolution.solver</code>.</p>\n<p>The <strong>const-iter</strong> version of <code>forAllIter</code> is also used to read entries of a <code>dictionary</code> into a <code>HashTable</code> … you can find an example at line 146 of <a href=\"https://cpp.openfoam.org/v7/HashPtrTableIO_8C_source.html\" target=\"_blank\" rel=\"noopener\">HashPtrTableIO.C</a>.</p>\n<h2 id=\"A-word-on-UList-in-OpenFOAM\"><a href=\"#A-word-on-UList-in-OpenFOAM\" class=\"headerlink\" title=\"A word on UList in OpenFOAM\"></a>A word on <code>UList</code> in OpenFOAM</h2><p>As far as I can tell, this class is just “well written” - “well thought through”. Its purpose is  to provide an efficient base class for “Sub-Lists”. A quick look on <a href=\"https://cpp.openfoam.org/v7/classFoam_1_1UList.html#details\" target=\"_blank\" rel=\"noopener\">the list of classes</a>  that directly inherit from it shows how important <code>UList</code> is.</p>\n<p>By the way, the class also holds a random access iterator; so it can be used with <code>forAllIter</code>:  We use an object (usually called <code>iter</code>) to “point” to a list item each time we iterate. The list item itself is accessed by dereferencing the pointer (<code>*iter</code>).</p>\n<p>I’m not aware of a way to get the “index” of an element in a List; It would be inefficient! So I never bothered to search for one. Another thing I should point out is that <code>std::distance</code> probably won’t work without some serious Type Casting :). It’s (was?) dangerous anyway, and I  don’t know if a similar function is available for OpenFOAM iterators).</p>\n<p>In fact, the use of <code>std::distance</code> takes away one the most important features of iterator-based loops: The ability to loop through a container where either <code>.begin()</code> or <code>.end()</code> is not reachable from the other (possibly by incrementing <code>iter</code>) as it results in “undefined behavior”.</p>\n<blockquote>\n<p>In recent OpenFOAM versions, <code>GeometricField</code> (<code>volScalarField</code>s …) inherits from <code>UList</code>, so, one can typically loop through their elements  with both macros; although  template specializations specialize the sense of “loop through their elements”: Some types  support looping through “internalField”; others make it so the loop hits everything.</p>\n</blockquote>\n<h2 id=\"A-word-on-dictionary-in-OpenFOAM\"><a href=\"#A-word-on-dictionary-in-OpenFOAM\" class=\"headerlink\" title=\"A word on dictionary in OpenFOAM\"></a>A word on <code>dictionary</code> in OpenFOAM</h2><p>This class a good example of a lot of things. “An iterator-based container” as I introduced it in  this post is just the tip of the iceberg. The reason I chose it for this post is that most OpenFOAM <em>users</em> consider a dictionary to be a “list” which is not entirely true. The similarity of, for example, getting some IDs (0, 1, 2, 3 … ) for mesh patches from the <code>boundary</code> files doesn’t mean a dictionary is indexable (I’m talking about “old-fashion” indexing here).</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Because of the frequent use of range-like loops in OpenFOAM (In official code base, forks, and any independent work for that matter), the nice developers provided a “shortcut” to loop through all elements of a list; any list. This post tries to take a way the popular misuse of this shortcut: Believe it or not, people abuse the <code>forAll</code> macro in every which way.</p>\n<h2 id=\"The-forAll-macro-and-its-“friends”\"><a href=\"#The-forAll-macro-and-its-“friends”\" class=\"headerlink\" title=\"The forAll macro and its “friends”\"></a>The <code>forAll</code> macro and its “friends”</h2><p>First of all, we all know that <code>forAll</code> is not part of C++, so it is a user-defined macro. Assuming a recent fork/version of OpenFOAM is sourced, the definition of this macro and similar ones can be found by running the following shell commands:</p>\n<pre><code class=\"bash\">cd $FOAM_SRC/$WM_PROJECT\ngrep -r . -e &quot;define.*forAll&quot;</code></pre>\n<p>The previous command reveals that there are at least four (4, <code>foam-extend</code> has some more)  defined macros to loop through “collections”:</p>\n<ol>\n<li>The good old <code>forAll</code> and its reversed-looping version <code>forAllReverse</code>.</li>\n<li>A <code>forAllIter</code> macro specialized in iterating over a Container using an “iterator” and a const-version of it.</li>\n</ol>\n<p>Yep, browsing source code is extremely useful (These macros are defined in <code>UList.h</code>).</p>\n<p>People need to understand that <code>forAll(list, i)</code> is “just” a shortcut to <code>for (int i=0; i&lt;(list).size(); i++)</code>.<br>Although <code>i</code> is actually a <code>Foam::label</code> in standard OF versions. Strictly speaking; the macro just “works” on any container that has a <code>size()</code> member method (Think of it as a vector of a known size - at construction time). Such containers will probably (publicly) inherit from the <code>UList</code>  (The most lightweight-efficient base class I know of).</p>\n<p>Let’s examine a very simple example of constructing a <code>scalarList</code> (a <code>List&lt;scalar&gt;</code>, publicly inheriting from <code>UList&lt;scalar&gt;</code>).</p>\n<pre><code class=\"cpp\">#include &quot;fvCFD.H&quot;\n\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\nint main(int argc, char *argv[])\n{   \n    // Create a list of some scalars\n    scalarList someScalars(10, 0);\n\n    // Perfectly fine use of forAll\n    forAll(someScalars, sc)\n    {\n        someScalars[sc] = doSomeCalculations(sc);\n    };\n\n    Info&lt;&lt; &quot;End\\n&quot; &lt;&lt; endl;\n    return 0;\n}</code></pre>\n<p>But this may be misleading; what if someone uses the macro to loop over a “different” type of containers, say a <code>dictionary</code>? Is <code>forAll</code> suitable for such tasks?</p>\n<p>The answer is in the previous example actually: Common use of <code>forAll</code> requires the list object to </p>\n<ul>\n<li>Have a <code>size()</code> method and</li>\n<li>Be <em>efficiently</em> indexable with some method/operator (<code>operator[]</code> in this case), otherwise, there is no benefit in looping through some collection if you can’t access its elements!!</li>\n</ul>\n<p>So, if <code>dictionary</code> objects verify these requirements; we’re golden.</p>\n<p>In fact, The <code>DictionaryBase</code> Template class publicly inherits from the (Link) List Type it is templated on. It’s easy to follow the inheritance diagram of the most commonly used class <a href=\"https://cpp.openfoam.org/v7/classFoam_1_1dictionary.html\" target=\"_blank\" rel=\"noopener\">dictionary</a> to see that there is no <code>size()</code> method defined anywhere. Also, how would one refer to an entry as <code>dictionary[i]</code> ??</p>\n<p>It should be obvious now that <code>forAll</code> is not the right macro to use in this case. That’s where the second family of macros kicks in: Instead of using a (possibly more efficient) predefined-size containers, some situations require the use of “more dynamic” ones which only hold “pointers” to their begin/end positions. An iterator is then used to go back and forth between these positions.</p>\n<p>A nice usage of this macro can be found at line 175 of <a href=\"https://cpp.openfoam.org/v7/solution_8C_source.html\" target=\"_blank\" rel=\"noopener\">solution.C</a> file so newer versions of OpenFOAM would understand older specification of <code>fvSolution.solver</code>.</p>\n<p>The <strong>const-iter</strong> version of <code>forAllIter</code> is also used to read entries of a <code>dictionary</code> into a <code>HashTable</code> … you can find an example at line 146 of <a href=\"https://cpp.openfoam.org/v7/HashPtrTableIO_8C_source.html\" target=\"_blank\" rel=\"noopener\">HashPtrTableIO.C</a>.</p>\n<h2 id=\"A-word-on-UList-in-OpenFOAM\"><a href=\"#A-word-on-UList-in-OpenFOAM\" class=\"headerlink\" title=\"A word on UList in OpenFOAM\"></a>A word on <code>UList</code> in OpenFOAM</h2><p>As far as I can tell, this class is just “well written” - “well thought through”. Its purpose is  to provide an efficient base class for “Sub-Lists”. A quick look on <a href=\"https://cpp.openfoam.org/v7/classFoam_1_1UList.html#details\" target=\"_blank\" rel=\"noopener\">the list of classes</a>  that directly inherit from it shows how important <code>UList</code> is.</p>\n<p>By the way, the class also holds a random access iterator; so it can be used with <code>forAllIter</code>:  We use an object (usually called <code>iter</code>) to “point” to a list item each time we iterate. The list item itself is accessed by dereferencing the pointer (<code>*iter</code>).</p>\n<p>I’m not aware of a way to get the “index” of an element in a List; It would be inefficient! So I never bothered to search for one. Another thing I should point out is that <code>std::distance</code> probably won’t work without some serious Type Casting :). It’s (was?) dangerous anyway, and I  don’t know if a similar function is available for OpenFOAM iterators).</p>\n<p>In fact, the use of <code>std::distance</code> takes away one the most important features of iterator-based loops: The ability to loop through a container where either <code>.begin()</code> or <code>.end()</code> is not reachable from the other (possibly by incrementing <code>iter</code>) as it results in “undefined behavior”.</p>\n<blockquote>\n<p>In recent OpenFOAM versions, <code>GeometricField</code> (<code>volScalarField</code>s …) inherits from <code>UList</code>, so, one can typically loop through their elements  with both macros; although  template specializations specialize the sense of “loop through their elements”: Some types  support looping through “internalField”; others make it so the loop hits everything.</p>\n</blockquote>\n<h2 id=\"A-word-on-dictionary-in-OpenFOAM\"><a href=\"#A-word-on-dictionary-in-OpenFOAM\" class=\"headerlink\" title=\"A word on dictionary in OpenFOAM\"></a>A word on <code>dictionary</code> in OpenFOAM</h2><p>This class a good example of a lot of things. “An iterator-based container” as I introduced it in  this post is just the tip of the iceberg. The reason I chose it for this post is that most OpenFOAM <em>users</em> consider a dictionary to be a “list” which is not entirely true. The similarity of, for example, getting some IDs (0, 1, 2, 3 … ) for mesh patches from the <code>boundary</code> files doesn’t mean a dictionary is indexable (I’m talking about “old-fashion” indexing here).</p>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Dec 25 2019 14:00:59 GMT+0100 (Central European Standard Time)","title":"The forAll Macro in OpenFOAM","path":"coding/the-forall-macro-in-openfoam/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2019-08-28T23:00:00.000Z","pv":0,"totalPV":0,"categories":"coding","tags":["OpenFOAM","Programming","Cpp"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Object Registration in OpenFOAM","abstract":"This article introduces you to how amazing OpenFOAM is in keeping track of directly and indirectly managed variables in a solver using its objectRegistry and regIOobject classes.","header_image":"/assets/images/ionic2-banner.png","cover":"/assets/images/ionic2-banner.png","date":"2019-09-11T23:00:00.000Z","_content":"\nBeing aware of all the important variables during the simulation is a nice feature to have in any CFD software. I've even seen some software developers \"brag\" about how many \"variables\" their simulators efficiently manage at run time.  Today, we'll discover how OpenFOAM solvers **keep track** of model data used across libraries.\n\n## Know the difference between Object Registration and Run-Time Selection Table\n\n> By \"Object registration\" I don't mean \"Model registration\" (The mechanism allowing for reporting possible models if the user input is unexpected, eg. if using a non-existent Boundary Condition Type). I refer instead to the mechanism allowing the program to retrieve references to all sorts of \"data\" objects (volScalarFields ... etc) that are under the solver's direct or indirect control. Read this section to make sense of the difference.\n\nTraditional C++ programming will probably employ \"Factory-like\" design to create new objects: A virtual base class will have a `static create()` (or a `static New()` in the case of OpenFOAM classes) to create a pointer (of some kind) to the newly created model.\n\nThis traditional technique is used when the programmer wants to give users the ability to \"**select**\" a model from a set of pre-defined ones (Child classes of the base class). \n\nIt's common in OpenFOAM to give the virtual base class (usually belonging to the `Foam` namespace) a static `New()` method returning an `autoPtr` to the newly created instance of the model class (`autoPtr` is used so that the created object couldn't be referred to by more than _one_ pointer). Of course, \"templates\" may complicate things a bit more, but nothing we can't live with.\n\nThis `New()` method would typically read the model's name from a dictionary, check if such model is \"registered\" to the RunTime selection Table, then construct an object of the appropriate type. This process is referred to as \"selection of a model\".\n\n> Note that if another library wants to provide a child for such base class, it has to statically link the base class's library (at compile time). That is to say, if a library `transportModels.so` has a `phase` base class which already has some child classes (say `incompressiblePhase` and `gasPhase`) and you want to add a phase object for your specific solver, you can build a new library `myPhaseModels.so` which must statically link `transportModels.so` so it can be compiled. It's that simple, you just create your new `compositionalPhase` class (inheriting from `phase`) and it will show up in the selection table when you load the library (in `controlDict` of your case).\n\nOlder C++ code would contain overloaded versions of `New()` (each returning a different type) but OpenFOAM uses templates and a collection of Macros to construct a `RunTimeSelectionTable` which `New` uses to check for existence and select the model.\n\nBut that's not the goal of this post. Let's instead dive into the registration of model data. For example, consider the case of a library trying to access a field that is created and managed by another library! To illustrate, say we have some library `transportModels.so` whose basic `transportModel` class has a member `volScalarField rho`. Suppose we're working on another library and we need a (maybe `const`) reference to this field without actually statically linking `transportModels.so` (Say, this would result in a **cyclic dependency** between the two libraries). How would one get a reference to such field?\n\nThat's exactly the situation we need object registration for.\n\n## OpenFOAM objectRegistry and regIOobject\n\nOpenFOAM solvers keep a \"hierarchical database\", logging objects at different levels:\n- The master registry is always the Time object (`runTime`).\n- The second-level in the database logs mesh regions and the global `controlDict`.\n- The lower levels  register \"sub-objects\" (eg. Each mesh region would have its own `fvSchemes`, `fvSolution`, mesh data, the fields associated to the mesh region - created in `createFields.H` ... etc) \n\nNote that each object in the database \"can be\" a database of registered objects allowing for the hierarchical structure; and by \"mesh regions\" I mean different mesh objects (for example, a mesh for fluids and another for solid regions in fluid-solid interaction simulations).\n\n> If two \"Time instances\" are used in a solver, we would have two independent databases; and it makes complete sense!\n\nFor illustration, standard solvers databases would look like this:\n\n```bash\n* runTime         # objectRegistry\n |--> controlDict # regIOobject (can't have sub-entries attached to it)\n |--> mesh1       # objectRegistry (a database)\n    |--> points, owner, neighbour, cellZones ...\n    |--> fvSchemes, fvSolution\n    |--> U, p\n |--> mesh2\n    |--> points, owner, neighbour, cellZones ...\n    |--> fvSchemes, fvSolution\n    |--> U, p\n```\n\n\n> This Hierarchy is kept in memory, but the same class handles how it's written to disk.\n\nThe database class is called `objectRegistry` (so it's a database and an entry in a database at the same time), and in order for objects to auto-register to a database, they must inherit from `regIOobject` class.\n\nThe inheritance from `regIOobject` promotes the object into an auto-registered object and it requires to implement the pure virtual member function `writeData()` (not `write()`) so that when the database issues the order of writing to disk to all its child entries, the child will be able to write itself properly :\n\n```cpp\nvirtual bool writeData(Ostream&) const;\n```\n\nAn example of a simple, non-standard class which inherits from `regIOobject` is the basic `well` class in my [Reservoir Simulation toolkit](https://github.com/FoamScience/OpenRSR/blob/master/libs/wellModels/wells/well/well.H). A well can then be written to disk as a regular dictionary.\n\n## Cross library interaction in OpenFOAM\n\nNow that we all have a good understanding of the hierarchical registration in OpenFOAM, let's dive into how to use such mechanism for our benefit.\n\nIn practice, when writing OpenFOAM libraries, it's common to pass a mesh reference to the base model's constructor (You can do very little without a reference to the mesh, really). Thus, the mesh is the number-one database to log our objects to: Which database to use is decided at the object's construction time (by calling `regIOobject`'s  constructor with the right third parameter). \n\nIn standard solvers, the mesh is created by passing an `IOobject` to the constructor of the parent class `polyMesh` which passes it to `objectRegistry`'s  constructor:\n\n```cpp\n// fvMesh is an objectRegistry\nFoam::fvMesh mesh\n(\n    Foam::IOobject\n    (\n        Foam::fvMesh::defaultRegion,\n        runTime.timeName(),\n        runTime,    // That's the database we branch into\n        Foam::IOobject::MUST_READ\n    )\n);\n```\n\n> And you can verify that the `Time` class is not registered to anything.\n\n\nNow, say we registered a `volScalarField` with the name of \"fName\" to the previous mesh object  (See `createFields.H` file of any standard solver for examples). How can we refer to it in a Boundary Condition Type we're adding?\n\nWell, that's easy, we just use `fvMesh`'s interface:\n\n```cpp\n// Const-ref to the field named fName\nconst volScalarField& fN = mesh.lookupObject(\"fName\");\n// Ref to the field named fName\nvolScalarField& fN = mesh.lookupObjectRef(\"fName\");\n```\n\nWell, for a more sophisticated way, we may give the user the option of selecting the field's name:\n```cpp\n// Read the name if provided\nword theName = someDict.lookupOrDefault<word>(\"fieldName\",\"fName\");\n// Const-ref to the field named fName\nconst volScalarField& fN = mesh.lookupObject(theName);\n```\n\nThis particular trick may complicate things for beginners with all the \"**didn't find a field in the database**\" Fatal Errors, but it's a decent way to program things in OpenFOAM. Anyway, I hope this article clarified at least what the third argument to `IOobject`'s constructor is meant to do :smile:\n\nIf you have any suggestions or comments on this matter, don't hesitate, fire at me bellow.\n\n","source":"_posts/2019-09-12-openfoam-object-registry.md","raw":"---\ntitle: Object Registration in OpenFOAM\nabstract: \"This article introduces you to how amazing OpenFOAM is in\n   keeping track of directly and indirectly managed variables in a solver\n   using its objectRegistry and regIOobject classes.\"\nheader_image: /assets/images/ionic2-banner.png\ncover: /assets/images/ionic2-banner.png\ndate: 2019/09/12\ncategories:\n  - coding\ntags:\n  - OpenFOAM\n  - Programming\n  - Cpp\n---\n\nBeing aware of all the important variables during the simulation is a nice feature to have in any CFD software. I've even seen some software developers \"brag\" about how many \"variables\" their simulators efficiently manage at run time.  Today, we'll discover how OpenFOAM solvers **keep track** of model data used across libraries.\n\n## Know the difference between Object Registration and Run-Time Selection Table\n\n> By \"Object registration\" I don't mean \"Model registration\" (The mechanism allowing for reporting possible models if the user input is unexpected, eg. if using a non-existent Boundary Condition Type). I refer instead to the mechanism allowing the program to retrieve references to all sorts of \"data\" objects (volScalarFields ... etc) that are under the solver's direct or indirect control. Read this section to make sense of the difference.\n\nTraditional C++ programming will probably employ \"Factory-like\" design to create new objects: A virtual base class will have a `static create()` (or a `static New()` in the case of OpenFOAM classes) to create a pointer (of some kind) to the newly created model.\n\nThis traditional technique is used when the programmer wants to give users the ability to \"**select**\" a model from a set of pre-defined ones (Child classes of the base class). \n\nIt's common in OpenFOAM to give the virtual base class (usually belonging to the `Foam` namespace) a static `New()` method returning an `autoPtr` to the newly created instance of the model class (`autoPtr` is used so that the created object couldn't be referred to by more than _one_ pointer). Of course, \"templates\" may complicate things a bit more, but nothing we can't live with.\n\nThis `New()` method would typically read the model's name from a dictionary, check if such model is \"registered\" to the RunTime selection Table, then construct an object of the appropriate type. This process is referred to as \"selection of a model\".\n\n> Note that if another library wants to provide a child for such base class, it has to statically link the base class's library (at compile time). That is to say, if a library `transportModels.so` has a `phase` base class which already has some child classes (say `incompressiblePhase` and `gasPhase`) and you want to add a phase object for your specific solver, you can build a new library `myPhaseModels.so` which must statically link `transportModels.so` so it can be compiled. It's that simple, you just create your new `compositionalPhase` class (inheriting from `phase`) and it will show up in the selection table when you load the library (in `controlDict` of your case).\n\nOlder C++ code would contain overloaded versions of `New()` (each returning a different type) but OpenFOAM uses templates and a collection of Macros to construct a `RunTimeSelectionTable` which `New` uses to check for existence and select the model.\n\nBut that's not the goal of this post. Let's instead dive into the registration of model data. For example, consider the case of a library trying to access a field that is created and managed by another library! To illustrate, say we have some library `transportModels.so` whose basic `transportModel` class has a member `volScalarField rho`. Suppose we're working on another library and we need a (maybe `const`) reference to this field without actually statically linking `transportModels.so` (Say, this would result in a **cyclic dependency** between the two libraries). How would one get a reference to such field?\n\nThat's exactly the situation we need object registration for.\n\n## OpenFOAM objectRegistry and regIOobject\n\nOpenFOAM solvers keep a \"hierarchical database\", logging objects at different levels:\n- The master registry is always the Time object (`runTime`).\n- The second-level in the database logs mesh regions and the global `controlDict`.\n- The lower levels  register \"sub-objects\" (eg. Each mesh region would have its own `fvSchemes`, `fvSolution`, mesh data, the fields associated to the mesh region - created in `createFields.H` ... etc) \n\nNote that each object in the database \"can be\" a database of registered objects allowing for the hierarchical structure; and by \"mesh regions\" I mean different mesh objects (for example, a mesh for fluids and another for solid regions in fluid-solid interaction simulations).\n\n> If two \"Time instances\" are used in a solver, we would have two independent databases; and it makes complete sense!\n\nFor illustration, standard solvers databases would look like this:\n\n```bash\n* runTime         # objectRegistry\n |--> controlDict # regIOobject (can't have sub-entries attached to it)\n |--> mesh1       # objectRegistry (a database)\n    |--> points, owner, neighbour, cellZones ...\n    |--> fvSchemes, fvSolution\n    |--> U, p\n |--> mesh2\n    |--> points, owner, neighbour, cellZones ...\n    |--> fvSchemes, fvSolution\n    |--> U, p\n```\n\n\n> This Hierarchy is kept in memory, but the same class handles how it's written to disk.\n\nThe database class is called `objectRegistry` (so it's a database and an entry in a database at the same time), and in order for objects to auto-register to a database, they must inherit from `regIOobject` class.\n\nThe inheritance from `regIOobject` promotes the object into an auto-registered object and it requires to implement the pure virtual member function `writeData()` (not `write()`) so that when the database issues the order of writing to disk to all its child entries, the child will be able to write itself properly :\n\n```cpp\nvirtual bool writeData(Ostream&) const;\n```\n\nAn example of a simple, non-standard class which inherits from `regIOobject` is the basic `well` class in my [Reservoir Simulation toolkit](https://github.com/FoamScience/OpenRSR/blob/master/libs/wellModels/wells/well/well.H). A well can then be written to disk as a regular dictionary.\n\n## Cross library interaction in OpenFOAM\n\nNow that we all have a good understanding of the hierarchical registration in OpenFOAM, let's dive into how to use such mechanism for our benefit.\n\nIn practice, when writing OpenFOAM libraries, it's common to pass a mesh reference to the base model's constructor (You can do very little without a reference to the mesh, really). Thus, the mesh is the number-one database to log our objects to: Which database to use is decided at the object's construction time (by calling `regIOobject`'s  constructor with the right third parameter). \n\nIn standard solvers, the mesh is created by passing an `IOobject` to the constructor of the parent class `polyMesh` which passes it to `objectRegistry`'s  constructor:\n\n```cpp\n// fvMesh is an objectRegistry\nFoam::fvMesh mesh\n(\n    Foam::IOobject\n    (\n        Foam::fvMesh::defaultRegion,\n        runTime.timeName(),\n        runTime,    // That's the database we branch into\n        Foam::IOobject::MUST_READ\n    )\n);\n```\n\n> And you can verify that the `Time` class is not registered to anything.\n\n\nNow, say we registered a `volScalarField` with the name of \"fName\" to the previous mesh object  (See `createFields.H` file of any standard solver for examples). How can we refer to it in a Boundary Condition Type we're adding?\n\nWell, that's easy, we just use `fvMesh`'s interface:\n\n```cpp\n// Const-ref to the field named fName\nconst volScalarField& fN = mesh.lookupObject(\"fName\");\n// Ref to the field named fName\nvolScalarField& fN = mesh.lookupObjectRef(\"fName\");\n```\n\nWell, for a more sophisticated way, we may give the user the option of selecting the field's name:\n```cpp\n// Read the name if provided\nword theName = someDict.lookupOrDefault<word>(\"fieldName\",\"fName\");\n// Const-ref to the field named fName\nconst volScalarField& fN = mesh.lookupObject(theName);\n```\n\nThis particular trick may complicate things for beginners with all the \"**didn't find a field in the database**\" Fatal Errors, but it's a decent way to program things in OpenFOAM. Anyway, I hope this article clarified at least what the third argument to `IOobject`'s constructor is meant to do :smile:\n\nIf you have any suggestions or comments on this matter, don't hesitate, fire at me bellow.\n\n","slug":"2019-09-12-openfoam-object-registry","published":1,"updated":"2019-12-25T12:54:02.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4lcjy6c00143cqe9omyrhqw","content":"<p>Being aware of all the important variables during the simulation is a nice feature to have in any CFD software. I’ve even seen some software developers “brag” about how many “variables” their simulators efficiently manage at run time.  Today, we’ll discover how OpenFOAM solvers <strong>keep track</strong> of model data used across libraries.</p>\n<h2 id=\"Know-the-difference-between-Object-Registration-and-Run-Time-Selection-Table\"><a href=\"#Know-the-difference-between-Object-Registration-and-Run-Time-Selection-Table\" class=\"headerlink\" title=\"Know the difference between Object Registration and Run-Time Selection Table\"></a>Know the difference between Object Registration and Run-Time Selection Table</h2><blockquote>\n<p>By “Object registration” I don’t mean “Model registration” (The mechanism allowing for reporting possible models if the user input is unexpected, eg. if using a non-existent Boundary Condition Type). I refer instead to the mechanism allowing the program to retrieve references to all sorts of “data” objects (volScalarFields … etc) that are under the solver’s direct or indirect control. Read this section to make sense of the difference.</p>\n</blockquote>\n<p>Traditional C++ programming will probably employ “Factory-like” design to create new objects: A virtual base class will have a <code>static create()</code> (or a <code>static New()</code> in the case of OpenFOAM classes) to create a pointer (of some kind) to the newly created model.</p>\n<p>This traditional technique is used when the programmer wants to give users the ability to “<strong>select</strong>“ a model from a set of pre-defined ones (Child classes of the base class). </p>\n<p>It’s common in OpenFOAM to give the virtual base class (usually belonging to the <code>Foam</code> namespace) a static <code>New()</code> method returning an <code>autoPtr</code> to the newly created instance of the model class (<code>autoPtr</code> is used so that the created object couldn’t be referred to by more than <em>one</em> pointer). Of course, “templates” may complicate things a bit more, but nothing we can’t live with.</p>\n<p>This <code>New()</code> method would typically read the model’s name from a dictionary, check if such model is “registered” to the RunTime selection Table, then construct an object of the appropriate type. This process is referred to as “selection of a model”.</p>\n<blockquote>\n<p>Note that if another library wants to provide a child for such base class, it has to statically link the base class’s library (at compile time). That is to say, if a library <code>transportModels.so</code> has a <code>phase</code> base class which already has some child classes (say <code>incompressiblePhase</code> and <code>gasPhase</code>) and you want to add a phase object for your specific solver, you can build a new library <code>myPhaseModels.so</code> which must statically link <code>transportModels.so</code> so it can be compiled. It’s that simple, you just create your new <code>compositionalPhase</code> class (inheriting from <code>phase</code>) and it will show up in the selection table when you load the library (in <code>controlDict</code> of your case).</p>\n</blockquote>\n<p>Older C++ code would contain overloaded versions of <code>New()</code> (each returning a different type) but OpenFOAM uses templates and a collection of Macros to construct a <code>RunTimeSelectionTable</code> which <code>New</code> uses to check for existence and select the model.</p>\n<p>But that’s not the goal of this post. Let’s instead dive into the registration of model data. For example, consider the case of a library trying to access a field that is created and managed by another library! To illustrate, say we have some library <code>transportModels.so</code> whose basic <code>transportModel</code> class has a member <code>volScalarField rho</code>. Suppose we’re working on another library and we need a (maybe <code>const</code>) reference to this field without actually statically linking <code>transportModels.so</code> (Say, this would result in a <strong>cyclic dependency</strong> between the two libraries). How would one get a reference to such field?</p>\n<p>That’s exactly the situation we need object registration for.</p>\n<h2 id=\"OpenFOAM-objectRegistry-and-regIOobject\"><a href=\"#OpenFOAM-objectRegistry-and-regIOobject\" class=\"headerlink\" title=\"OpenFOAM objectRegistry and regIOobject\"></a>OpenFOAM objectRegistry and regIOobject</h2><p>OpenFOAM solvers keep a “hierarchical database”, logging objects at different levels:</p>\n<ul>\n<li>The master registry is always the Time object (<code>runTime</code>).</li>\n<li>The second-level in the database logs mesh regions and the global <code>controlDict</code>.</li>\n<li>The lower levels  register “sub-objects” (eg. Each mesh region would have its own <code>fvSchemes</code>, <code>fvSolution</code>, mesh data, the fields associated to the mesh region - created in <code>createFields.H</code> … etc) </li>\n</ul>\n<p>Note that each object in the database “can be” a database of registered objects allowing for the hierarchical structure; and by “mesh regions” I mean different mesh objects (for example, a mesh for fluids and another for solid regions in fluid-solid interaction simulations).</p>\n<blockquote>\n<p>If two “Time instances” are used in a solver, we would have two independent databases; and it makes complete sense!</p>\n</blockquote>\n<p>For illustration, standard solvers databases would look like this:</p>\n<pre><code class=\"bash\">* runTime         # objectRegistry\n |--&gt; controlDict # regIOobject (can&#39;t have sub-entries attached to it)\n |--&gt; mesh1       # objectRegistry (a database)\n    |--&gt; points, owner, neighbour, cellZones ...\n    |--&gt; fvSchemes, fvSolution\n    |--&gt; U, p\n |--&gt; mesh2\n    |--&gt; points, owner, neighbour, cellZones ...\n    |--&gt; fvSchemes, fvSolution\n    |--&gt; U, p</code></pre>\n<blockquote>\n<p>This Hierarchy is kept in memory, but the same class handles how it’s written to disk.</p>\n</blockquote>\n<p>The database class is called <code>objectRegistry</code> (so it’s a database and an entry in a database at the same time), and in order for objects to auto-register to a database, they must inherit from <code>regIOobject</code> class.</p>\n<p>The inheritance from <code>regIOobject</code> promotes the object into an auto-registered object and it requires to implement the pure virtual member function <code>writeData()</code> (not <code>write()</code>) so that when the database issues the order of writing to disk to all its child entries, the child will be able to write itself properly :</p>\n<pre><code class=\"cpp\">virtual bool writeData(Ostream&amp;) const;</code></pre>\n<p>An example of a simple, non-standard class which inherits from <code>regIOobject</code> is the basic <code>well</code> class in my <a href=\"https://github.com/FoamScience/OpenRSR/blob/master/libs/wellModels/wells/well/well.H\" target=\"_blank\" rel=\"noopener\">Reservoir Simulation toolkit</a>. A well can then be written to disk as a regular dictionary.</p>\n<h2 id=\"Cross-library-interaction-in-OpenFOAM\"><a href=\"#Cross-library-interaction-in-OpenFOAM\" class=\"headerlink\" title=\"Cross library interaction in OpenFOAM\"></a>Cross library interaction in OpenFOAM</h2><p>Now that we all have a good understanding of the hierarchical registration in OpenFOAM, let’s dive into how to use such mechanism for our benefit.</p>\n<p>In practice, when writing OpenFOAM libraries, it’s common to pass a mesh reference to the base model’s constructor (You can do very little without a reference to the mesh, really). Thus, the mesh is the number-one database to log our objects to: Which database to use is decided at the object’s construction time (by calling <code>regIOobject</code>‘s  constructor with the right third parameter). </p>\n<p>In standard solvers, the mesh is created by passing an <code>IOobject</code> to the constructor of the parent class <code>polyMesh</code> which passes it to <code>objectRegistry</code>‘s  constructor:</p>\n<pre><code class=\"cpp\">// fvMesh is an objectRegistry\nFoam::fvMesh mesh\n(\n    Foam::IOobject\n    (\n        Foam::fvMesh::defaultRegion,\n        runTime.timeName(),\n        runTime,    // That&#39;s the database we branch into\n        Foam::IOobject::MUST_READ\n    )\n);</code></pre>\n<blockquote>\n<p>And you can verify that the <code>Time</code> class is not registered to anything.</p>\n</blockquote>\n<p>Now, say we registered a <code>volScalarField</code> with the name of “fName” to the previous mesh object  (See <code>createFields.H</code> file of any standard solver for examples). How can we refer to it in a Boundary Condition Type we’re adding?</p>\n<p>Well, that’s easy, we just use <code>fvMesh</code>‘s interface:</p>\n<pre><code class=\"cpp\">// Const-ref to the field named fName\nconst volScalarField&amp; fN = mesh.lookupObject(&quot;fName&quot;);\n// Ref to the field named fName\nvolScalarField&amp; fN = mesh.lookupObjectRef(&quot;fName&quot;);</code></pre>\n<p>Well, for a more sophisticated way, we may give the user the option of selecting the field’s name:</p>\n<pre><code class=\"cpp\">// Read the name if provided\nword theName = someDict.lookupOrDefault&lt;word&gt;(&quot;fieldName&quot;,&quot;fName&quot;);\n// Const-ref to the field named fName\nconst volScalarField&amp; fN = mesh.lookupObject(theName);</code></pre>\n<p>This particular trick may complicate things for beginners with all the “<strong>didn’t find a field in the database</strong>“ Fatal Errors, but it’s a decent way to program things in OpenFOAM. Anyway, I hope this article clarified at least what the third argument to <code>IOobject</code>‘s constructor is meant to do <span class=\"emoji\" style=\"background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8)\" data-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8\">&#x1f604;</span></p>\n<p>If you have any suggestions or comments on this matter, don’t hesitate, fire at me bellow.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Being aware of all the important variables during the simulation is a nice feature to have in any CFD software. I’ve even seen some software developers “brag” about how many “variables” their simulators efficiently manage at run time.  Today, we’ll discover how OpenFOAM solvers <strong>keep track</strong> of model data used across libraries.</p>\n<h2 id=\"Know-the-difference-between-Object-Registration-and-Run-Time-Selection-Table\"><a href=\"#Know-the-difference-between-Object-Registration-and-Run-Time-Selection-Table\" class=\"headerlink\" title=\"Know the difference between Object Registration and Run-Time Selection Table\"></a>Know the difference between Object Registration and Run-Time Selection Table</h2><blockquote>\n<p>By “Object registration” I don’t mean “Model registration” (The mechanism allowing for reporting possible models if the user input is unexpected, eg. if using a non-existent Boundary Condition Type). I refer instead to the mechanism allowing the program to retrieve references to all sorts of “data” objects (volScalarFields … etc) that are under the solver’s direct or indirect control. Read this section to make sense of the difference.</p>\n</blockquote>\n<p>Traditional C++ programming will probably employ “Factory-like” design to create new objects: A virtual base class will have a <code>static create()</code> (or a <code>static New()</code> in the case of OpenFOAM classes) to create a pointer (of some kind) to the newly created model.</p>\n<p>This traditional technique is used when the programmer wants to give users the ability to “<strong>select</strong>“ a model from a set of pre-defined ones (Child classes of the base class). </p>\n<p>It’s common in OpenFOAM to give the virtual base class (usually belonging to the <code>Foam</code> namespace) a static <code>New()</code> method returning an <code>autoPtr</code> to the newly created instance of the model class (<code>autoPtr</code> is used so that the created object couldn’t be referred to by more than <em>one</em> pointer). Of course, “templates” may complicate things a bit more, but nothing we can’t live with.</p>\n<p>This <code>New()</code> method would typically read the model’s name from a dictionary, check if such model is “registered” to the RunTime selection Table, then construct an object of the appropriate type. This process is referred to as “selection of a model”.</p>\n<blockquote>\n<p>Note that if another library wants to provide a child for such base class, it has to statically link the base class’s library (at compile time). That is to say, if a library <code>transportModels.so</code> has a <code>phase</code> base class which already has some child classes (say <code>incompressiblePhase</code> and <code>gasPhase</code>) and you want to add a phase object for your specific solver, you can build a new library <code>myPhaseModels.so</code> which must statically link <code>transportModels.so</code> so it can be compiled. It’s that simple, you just create your new <code>compositionalPhase</code> class (inheriting from <code>phase</code>) and it will show up in the selection table when you load the library (in <code>controlDict</code> of your case).</p>\n</blockquote>\n<p>Older C++ code would contain overloaded versions of <code>New()</code> (each returning a different type) but OpenFOAM uses templates and a collection of Macros to construct a <code>RunTimeSelectionTable</code> which <code>New</code> uses to check for existence and select the model.</p>\n<p>But that’s not the goal of this post. Let’s instead dive into the registration of model data. For example, consider the case of a library trying to access a field that is created and managed by another library! To illustrate, say we have some library <code>transportModels.so</code> whose basic <code>transportModel</code> class has a member <code>volScalarField rho</code>. Suppose we’re working on another library and we need a (maybe <code>const</code>) reference to this field without actually statically linking <code>transportModels.so</code> (Say, this would result in a <strong>cyclic dependency</strong> between the two libraries). How would one get a reference to such field?</p>\n<p>That’s exactly the situation we need object registration for.</p>\n<h2 id=\"OpenFOAM-objectRegistry-and-regIOobject\"><a href=\"#OpenFOAM-objectRegistry-and-regIOobject\" class=\"headerlink\" title=\"OpenFOAM objectRegistry and regIOobject\"></a>OpenFOAM objectRegistry and regIOobject</h2><p>OpenFOAM solvers keep a “hierarchical database”, logging objects at different levels:</p>\n<ul>\n<li>The master registry is always the Time object (<code>runTime</code>).</li>\n<li>The second-level in the database logs mesh regions and the global <code>controlDict</code>.</li>\n<li>The lower levels  register “sub-objects” (eg. Each mesh region would have its own <code>fvSchemes</code>, <code>fvSolution</code>, mesh data, the fields associated to the mesh region - created in <code>createFields.H</code> … etc) </li>\n</ul>\n<p>Note that each object in the database “can be” a database of registered objects allowing for the hierarchical structure; and by “mesh regions” I mean different mesh objects (for example, a mesh for fluids and another for solid regions in fluid-solid interaction simulations).</p>\n<blockquote>\n<p>If two “Time instances” are used in a solver, we would have two independent databases; and it makes complete sense!</p>\n</blockquote>\n<p>For illustration, standard solvers databases would look like this:</p>\n<pre><code class=\"bash\">* runTime         # objectRegistry\n |--&gt; controlDict # regIOobject (can&#39;t have sub-entries attached to it)\n |--&gt; mesh1       # objectRegistry (a database)\n    |--&gt; points, owner, neighbour, cellZones ...\n    |--&gt; fvSchemes, fvSolution\n    |--&gt; U, p\n |--&gt; mesh2\n    |--&gt; points, owner, neighbour, cellZones ...\n    |--&gt; fvSchemes, fvSolution\n    |--&gt; U, p</code></pre>\n<blockquote>\n<p>This Hierarchy is kept in memory, but the same class handles how it’s written to disk.</p>\n</blockquote>\n<p>The database class is called <code>objectRegistry</code> (so it’s a database and an entry in a database at the same time), and in order for objects to auto-register to a database, they must inherit from <code>regIOobject</code> class.</p>\n<p>The inheritance from <code>regIOobject</code> promotes the object into an auto-registered object and it requires to implement the pure virtual member function <code>writeData()</code> (not <code>write()</code>) so that when the database issues the order of writing to disk to all its child entries, the child will be able to write itself properly :</p>\n<pre><code class=\"cpp\">virtual bool writeData(Ostream&amp;) const;</code></pre>\n<p>An example of a simple, non-standard class which inherits from <code>regIOobject</code> is the basic <code>well</code> class in my <a href=\"https://github.com/FoamScience/OpenRSR/blob/master/libs/wellModels/wells/well/well.H\" target=\"_blank\" rel=\"noopener\">Reservoir Simulation toolkit</a>. A well can then be written to disk as a regular dictionary.</p>\n<h2 id=\"Cross-library-interaction-in-OpenFOAM\"><a href=\"#Cross-library-interaction-in-OpenFOAM\" class=\"headerlink\" title=\"Cross library interaction in OpenFOAM\"></a>Cross library interaction in OpenFOAM</h2><p>Now that we all have a good understanding of the hierarchical registration in OpenFOAM, let’s dive into how to use such mechanism for our benefit.</p>\n<p>In practice, when writing OpenFOAM libraries, it’s common to pass a mesh reference to the base model’s constructor (You can do very little without a reference to the mesh, really). Thus, the mesh is the number-one database to log our objects to: Which database to use is decided at the object’s construction time (by calling <code>regIOobject</code>‘s  constructor with the right third parameter). </p>\n<p>In standard solvers, the mesh is created by passing an <code>IOobject</code> to the constructor of the parent class <code>polyMesh</code> which passes it to <code>objectRegistry</code>‘s  constructor:</p>\n<pre><code class=\"cpp\">// fvMesh is an objectRegistry\nFoam::fvMesh mesh\n(\n    Foam::IOobject\n    (\n        Foam::fvMesh::defaultRegion,\n        runTime.timeName(),\n        runTime,    // That&#39;s the database we branch into\n        Foam::IOobject::MUST_READ\n    )\n);</code></pre>\n<blockquote>\n<p>And you can verify that the <code>Time</code> class is not registered to anything.</p>\n</blockquote>\n<p>Now, say we registered a <code>volScalarField</code> with the name of “fName” to the previous mesh object  (See <code>createFields.H</code> file of any standard solver for examples). How can we refer to it in a Boundary Condition Type we’re adding?</p>\n<p>Well, that’s easy, we just use <code>fvMesh</code>‘s interface:</p>\n<pre><code class=\"cpp\">// Const-ref to the field named fName\nconst volScalarField&amp; fN = mesh.lookupObject(&quot;fName&quot;);\n// Ref to the field named fName\nvolScalarField&amp; fN = mesh.lookupObjectRef(&quot;fName&quot;);</code></pre>\n<p>Well, for a more sophisticated way, we may give the user the option of selecting the field’s name:</p>\n<pre><code class=\"cpp\">// Read the name if provided\nword theName = someDict.lookupOrDefault&lt;word&gt;(&quot;fieldName&quot;,&quot;fName&quot;);\n// Const-ref to the field named fName\nconst volScalarField&amp; fN = mesh.lookupObject(theName);</code></pre>\n<p>This particular trick may complicate things for beginners with all the “<strong>didn’t find a field in the database</strong>“ Fatal Errors, but it’s a decent way to program things in OpenFOAM. Anyway, I hope this article clarified at least what the third argument to <code>IOobject</code>‘s constructor is meant to do <span class=\"emoji\" style=\"background-image: url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8)\" data-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8\">&#x1f604;</span></p>\n<p>If you have any suggestions or comments on this matter, don’t hesitate, fire at me bellow.</p>\n","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","titleImageForAmp":"/amp-dist/sample/sample-substituteTitleImage.png","eyeCatchImageProperty":{"width":1024,"height":800},"popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Dec 25 2019 13:54:02 GMT+0100 (Central European Standard Time)","title":"Object Registration in OpenFOAM","path":"coding/object-registration-in-openfoam/","eyeCatchImage":"https://foamscience.github.io/amp-dist/sample/sample-substituteTitleImage.png","excerpt":null,"date":"2019-09-11T23:00:00.000Z","pv":0,"totalPV":0,"categories":"coding","tags":["OpenFOAM","Programming","Cpp"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"ck4lcjy5c00093cqecpu5dnks","category_id":"ck4lcjy5600053cqeh3h3xy7v","_id":"ck4lcjy5r000g3cqe3f9xu4de"},{"post_id":"ck4lcjy4u00013cqe5s02fayp","category_id":"ck4lcjy5600053cqeh3h3xy7v","_id":"ck4lcjy5t000j3cqe5469fltx"},{"post_id":"ck4lcjy5f000b3cqexclvqyrd","category_id":"ck4lcjy5600053cqeh3h3xy7v","_id":"ck4lcjy5v000l3cqedl2ohkny"},{"post_id":"ck4lcjy5l000e3cqekw1cmrn4","category_id":"ck4lcjy5600053cqeh3h3xy7v","_id":"ck4lcjy5y000o3cqek3q8b58f"},{"post_id":"ck4lcjy5800073cqexgocfvsl","category_id":"ck4lcjy5i000c3cqe66f967mi","_id":"ck4lcjy60000s3cqeywcygmdl"},{"post_id":"ck4lcjy5o000f3cqeosa1oo2m","category_id":"ck4lcjy5600053cqeh3h3xy7v","_id":"ck4lcjy62000w3cqebdvoej3s"},{"post_id":"ck4lcjy5s000i3cqe2qem7wu3","category_id":"ck4lcjy5600053cqeh3h3xy7v","_id":"ck4lcjy6500103cqei4bgsz96"},{"post_id":"ck4lcjy61000v3cqeewwpn9q4","category_id":"ck4lcjy5i000c3cqe66f967mi","_id":"ck4lcjy6d00153cqenigb5asr"},{"post_id":"ck4lcjy5t000k3cqe7saonjdm","category_id":"ck4lcjy5z000q3cqej76h683e","_id":"ck4lcjy6f00183cqeu5mi5neb"},{"post_id":"ck4lcjy63000y3cqe1ft8xzfw","category_id":"ck4lcjy5i000c3cqe66f967mi","_id":"ck4lcjy6g001a3cqeonepx3yk"},{"post_id":"ck4lcjy5x000n3cqet7hfykja","category_id":"ck4lcjy64000z3cqe4g0tyh88","_id":"ck4lcjy6h001c3cqe166wzkj1"},{"post_id":"ck4lcjy5z000r3cqezaak2jh9","category_id":"ck4lcjy64000z3cqe4g0tyh88","_id":"ck4lcjy6h001f3cqewjk18r0c"},{"post_id":"ck4lcjy6700113cqeilao2u3r","category_id":"ck4lcjy6g001b3cqe0vtj515c","_id":"ck4lcjy6j001k3cqelv2du6jq"},{"post_id":"ck4lcjy6c00143cqe9omyrhqw","category_id":"ck4lcjy6g001b3cqe0vtj515c","_id":"ck4lcjy6j001m3cqemf29yy51"}],"PostTag":[{"post_id":"ck4lcjy4u00013cqe5s02fayp","tag_id":"ck4lcjy5800063cqel1klmpb4","_id":"ck4lcjy5z000p3cqe9ohngwex"},{"post_id":"ck4lcjy4u00013cqe5s02fayp","tag_id":"ck4lcjy5j000d3cqel7wdk1r9","_id":"ck4lcjy61000t3cqexgdo67gy"},{"post_id":"ck4lcjy4u00013cqe5s02fayp","tag_id":"ck4lcjy5r000h3cqe91cjjh9w","_id":"ck4lcjy63000x3cqebirsv9l3"},{"post_id":"ck4lcjy5800073cqexgocfvsl","tag_id":"ck4lcjy5w000m3cqe18kdw5kf","_id":"ck4lcjy6b00133cqe6e5nxemq"},{"post_id":"ck4lcjy5800073cqexgocfvsl","tag_id":"ck4lcjy61000u3cqeqm6c3yz4","_id":"ck4lcjy6f00173cqe7nnlxc32"},{"post_id":"ck4lcjy5c00093cqecpu5dnks","tag_id":"ck4lcjy5800063cqel1klmpb4","_id":"ck4lcjy6h001e3cqexqpe5vwp"},{"post_id":"ck4lcjy5c00093cqecpu5dnks","tag_id":"ck4lcjy5j000d3cqel7wdk1r9","_id":"ck4lcjy6i001h3cqe8fsjo317"},{"post_id":"ck4lcjy5c00093cqecpu5dnks","tag_id":"ck4lcjy5r000h3cqe91cjjh9w","_id":"ck4lcjy6i001j3cqet9tk6bpn"},{"post_id":"ck4lcjy5f000b3cqexclvqyrd","tag_id":"ck4lcjy6h001d3cqeclbcm16m","_id":"ck4lcjy6k001o3cqectd2z74j"},{"post_id":"ck4lcjy5f000b3cqexclvqyrd","tag_id":"ck4lcjy6i001i3cqew142cbzb","_id":"ck4lcjy6k001p3cqe6dawq303"},{"post_id":"ck4lcjy5f000b3cqexclvqyrd","tag_id":"ck4lcjy5r000h3cqe91cjjh9w","_id":"ck4lcjy6l001r3cqe364u9nke"},{"post_id":"ck4lcjy5l000e3cqekw1cmrn4","tag_id":"ck4lcjy6h001d3cqeclbcm16m","_id":"ck4lcjy6m001u3cqepm9g7qg7"},{"post_id":"ck4lcjy5l000e3cqekw1cmrn4","tag_id":"ck4lcjy6i001i3cqew142cbzb","_id":"ck4lcjy6m001v3cqe3p5bksmk"},{"post_id":"ck4lcjy5l000e3cqekw1cmrn4","tag_id":"ck4lcjy5r000h3cqe91cjjh9w","_id":"ck4lcjy6n001x3cqeipghvsr7"},{"post_id":"ck4lcjy5o000f3cqeosa1oo2m","tag_id":"ck4lcjy5800063cqel1klmpb4","_id":"ck4lcjy6o001z3cqe9v749nxb"},{"post_id":"ck4lcjy5o000f3cqeosa1oo2m","tag_id":"ck4lcjy6i001i3cqew142cbzb","_id":"ck4lcjy6o00203cqe6qvt9aub"},{"post_id":"ck4lcjy5o000f3cqeosa1oo2m","tag_id":"ck4lcjy5r000h3cqe91cjjh9w","_id":"ck4lcjy6p00223cqe9dygv5cv"},{"post_id":"ck4lcjy5s000i3cqe2qem7wu3","tag_id":"ck4lcjy6h001d3cqeclbcm16m","_id":"ck4lcjy6p00243cqed3mtczz3"},{"post_id":"ck4lcjy5s000i3cqe2qem7wu3","tag_id":"ck4lcjy6i001i3cqew142cbzb","_id":"ck4lcjy6r00253cqe1iki5ncg"},{"post_id":"ck4lcjy5s000i3cqe2qem7wu3","tag_id":"ck4lcjy5r000h3cqe91cjjh9w","_id":"ck4lcjy6r00273cqes6jk97mg"},{"post_id":"ck4lcjy5t000k3cqe7saonjdm","tag_id":"ck4lcjy6p00233cqeaajwlqpc","_id":"ck4lcjy6s00293cqexvdwdwz5"},{"post_id":"ck4lcjy5t000k3cqe7saonjdm","tag_id":"ck4lcjy6r00263cqem21gxw35","_id":"ck4lcjy6s002a3cqes15whx02"},{"post_id":"ck4lcjy5x000n3cqet7hfykja","tag_id":"ck4lcjy6r00283cqeyrtcyprt","_id":"ck4lcjy6u002d3cqesb195gh1"},{"post_id":"ck4lcjy5x000n3cqet7hfykja","tag_id":"ck4lcjy6s002b3cqefr26a2f8","_id":"ck4lcjy6v002e3cqeepcda3do"},{"post_id":"ck4lcjy5z000r3cqezaak2jh9","tag_id":"ck4lcjy6r00283cqeyrtcyprt","_id":"ck4lcjy6x002h3cqe82nu7su3"},{"post_id":"ck4lcjy5z000r3cqezaak2jh9","tag_id":"ck4lcjy6s002b3cqefr26a2f8","_id":"ck4lcjy6x002i3cqexalo6e50"},{"post_id":"ck4lcjy61000v3cqeewwpn9q4","tag_id":"ck4lcjy6x002g3cqe55vi71ri","_id":"ck4lcjy6y002l3cqeflrkff27"},{"post_id":"ck4lcjy61000v3cqeewwpn9q4","tag_id":"ck4lcjy61000u3cqeqm6c3yz4","_id":"ck4lcjy6z002m3cqeei66jlxt"},{"post_id":"ck4lcjy63000y3cqe1ft8xzfw","tag_id":"ck4lcjy6x002g3cqe55vi71ri","_id":"ck4lcjy6z002o3cqe1uk8xizg"},{"post_id":"ck4lcjy63000y3cqe1ft8xzfw","tag_id":"ck4lcjy61000u3cqeqm6c3yz4","_id":"ck4lcjy6z002p3cqevwi0eiqe"},{"post_id":"ck4lcjy6700113cqeilao2u3r","tag_id":"ck4lcjy6r00283cqeyrtcyprt","_id":"ck4lcjy71002t3cqeeqe49nqd"},{"post_id":"ck4lcjy6700113cqeilao2u3r","tag_id":"ck4lcjy6z002q3cqe2bbrzkvv","_id":"ck4lcjy71002u3cqe1cffk1b3"},{"post_id":"ck4lcjy6700113cqeilao2u3r","tag_id":"ck4lcjy70002r3cqeyr7bdwvz","_id":"ck4lcjy71002w3cqekvi7k3tt"},{"post_id":"ck4lcjy6c00143cqe9omyrhqw","tag_id":"ck4lcjy6r00283cqeyrtcyprt","_id":"ck4lcjy72002y3cqe0oef9sdd"},{"post_id":"ck4lcjy6c00143cqe9omyrhqw","tag_id":"ck4lcjy6z002q3cqe2bbrzkvv","_id":"ck4lcjy72002z3cqea7y7rkw2"},{"post_id":"ck4lcjy6c00143cqe9omyrhqw","tag_id":"ck4lcjy70002r3cqeyr7bdwvz","_id":"ck4lcjy7300303cqeeh1cfhhd"}],"Tag":[{"name":"Ionic 2","_id":"ck4lcjy5800063cqel1klmpb4"},{"name":"Angular 2","_id":"ck4lcjy5j000d3cqel7wdk1r9"},{"name":"Hybird App","_id":"ck4lcjy5r000h3cqe91cjjh9w"},{"name":"Laravel 5.4","_id":"ck4lcjy5w000m3cqe18kdw5kf"},{"name":"Laravel Passport","_id":"ck4lcjy61000u3cqeqm6c3yz4"},{"name":"Ionic 3","_id":"ck4lcjy6h001d3cqeclbcm16m"},{"name":"Angular 4","_id":"ck4lcjy6i001i3cqew142cbzb"},{"name":"OpenSCAD","_id":"ck4lcjy6p00233cqeaajwlqpc"},{"name":"Meshing","_id":"ck4lcjy6r00263cqem21gxw35"},{"name":"OpenFOAM","_id":"ck4lcjy6r00283cqeyrtcyprt"},{"name":"Vim","_id":"ck4lcjy6s002b3cqefr26a2f8"},{"name":"Lumen","_id":"ck4lcjy6x002g3cqe55vi71ri"},{"name":"Programming","_id":"ck4lcjy6z002q3cqe2bbrzkvv"},{"name":"Cpp","_id":"ck4lcjy70002r3cqeyr7bdwvz"}]}}